<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>布局人生</title>
      <link href="/2020/05/13/bu-ju-ren-sheng/"/>
      <url>/2020/05/13/bu-ju-ren-sheng/</url>
      
        <content type="html"><![CDATA[<h3 id="建立个人品牌："><a href="#建立个人品牌：" class="headerlink" title="建立个人品牌："></a>建立个人品牌：</h3><p>1、不给自己设限</p><p>2、分解目标，设置进度条</p><p>3、正视错误的存在</p><h3 id="从领导角度思考问题"><a href="#从领导角度思考问题" class="headerlink" title="从领导角度思考问题"></a>从领导角度思考问题</h3><p>1、不可替代性</p><p>2、培养大局意识：不计眼前的得失，不拘小节，目光放长远，站在全局的高度上观察形势，分析问题</p><p>3、观察力和共情能力</p><p>4、务实的工作态度</p><h3 id="时间管理"><a href="#时间管理" class="headerlink" title="时间管理"></a>时间管理</h3><p>1、避免布里丹毛驴效应：写出两个以上的目标等于没有目标</p><p>2、整理工作思路，比工作本身更加重要</p><p>3、忌讳把所有时间都规划掉，休息劳逸结合</p><p>4、开场白的重要性：开场白一定要简短有效</p><p>5、不容忽视的身体语言：文字内容带来的影响7%，声音38%，视觉影响55%<br>    声调、语气、眼神和态度所含的雄辩能力，比字句的选择还有力量</p><p>6、想要学会演讲，就必须固执地、一个劲儿地让自己出丑，直到娴熟为止。</p><p>7、实用的说话方式：PREP法则：point、reason、example、point</p><p>8、练习声音和语调<br>    呼吸：小腹收缩的力量带动胸腔缓慢的尽可能多的吸入氧气，呼气的时候舌头顶着上颚，空气慢慢的从嘴巴呼出。<br>    练声：循序渐进，避免一开始狂飙高音<br>          吐字：最开始吐字只需做到清晰即可，由字到词由词到句，按部就班的进行，练好吐字的基本功，才能实现其他环节<br>          语速：恰到好处的停顿，不可过快不可过慢<br>9、坚定信念，提升自信</p>]]></content>
      
      
      <categories>
          
          <category> read </category>
          
      </categories>
      
      
        <tags>
            
            <tag> read </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>职场总结</title>
      <link href="/2020/05/12/zhi-chang-zong-jie/"/>
      <url>/2020/05/12/zhi-chang-zong-jie/</url>
      
        <content type="html"><![CDATA[<p>1、公司领导的出身是根据公司定位来的，稳定运营型公司领导是财务出身，求稳，如果是开拓性的，领导是搞市场出身的<br>所以搞市场出身和财务出身的当公司总经理的多</p><p>2、搞技术出身的都鄙视项目经理</p><p>3、不学习的人迟早被淘汰</p><p>4、学习的目的不是自己多牛逼多优秀，只要比别人更优秀就够了</p><p>5、钱看的多了，心就花了，做技术忌讳搞股票<br><img src="/images/pasted-496.png" alt="upload successful"></p>]]></content>
      
      
      <categories>
          
          <category> read </category>
          
          <category> summary </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>技术知识体系迭代</title>
      <link href="/2020/04/30/ji-zhu-zhi-shi-ti-xi-die-dai/"/>
      <url>/2020/04/30/ji-zhu-zhi-shi-ti-xi-die-dai/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/pasted-494.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> read </category>
          
          <category> essay </category>
          
      </categories>
      
      
        <tags>
            
            <tag> read </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>作为意志和表象的世界</title>
      <link href="/2020/04/30/zuo-wei-yi-zhi-he-biao-xiang-de-shi-jie/"/>
      <url>/2020/04/30/zuo-wei-yi-zhi-he-biao-xiang-de-shi-jie/</url>
      
        <content type="html"><![CDATA[<p>1、只有几个人在思维，可所有人都要发表意见</p><p>2、悟性是可以培养的，而一种谬误存在太久，那就是人们过早的给一个孩子下定义，聪明或不聪明，而忽略了如何去开发孩子的悟性</p><p>3、系统性是科学的本质特性</p><p>4、人一旦拥有了更高的觉悟便可以摆脱痛苦。<br><img src="/images/pasted-495.png" alt=""></p><p>5、贫穷并非痛苦的根源，贪欲才是</p><p>6、成功者是最难改变的</p><p>7、</p>]]></content>
      
      
      <categories>
          
          <category> read </category>
          
          <category> summary </category>
          
      </categories>
      
      
        <tags>
            
            <tag> read </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>重定向输出编译内容到文件</title>
      <link href="/2020/04/26/chong-ding-xiang-shu-chu-bian-yi-nei-rong-dao-wen-jian/"/>
      <url>/2020/04/26/chong-ding-xiang-shu-chu-bian-yi-nei-rong-dao-wen-jian/</url>
      
        <content type="html"><![CDATA[<p>在做批量实验室，例如跑批量 MR 的作业，我们会写好 shell 脚本，然后启动脚本，等所有作业执行完再去看结果，但是这些执行时的信息如何保存下来到文件中呢？下面这个命令可以完成这个任务。</p><pre class=" language-bash"><code class="language-bash">sh batchjob.sh 2<span class="token operator">></span><span class="token operator">&amp;</span>1 <span class="token operator">|</span> <span class="token function">tee</span> mylog.log</code></pre><h3 id="输入输出重定向之：’-lt-’-and-‘-gt-’"><a href="#输入输出重定向之：’-lt-’-and-‘-gt-’" class="headerlink" title="输入输出重定向之：’&lt;’ and ‘&gt;’"></a>输入输出重定向之：’&lt;’ and ‘&gt;’</h3><p>&lt; and &gt; 分别用来支持 linux 中的输入输出重定向，其中 &lt; 支持输入重定向，&gt; 支持输出重定向。</p><p>1、&lt;：重定向输入。<br>sh test.sh &lt; hadoop-hadoop-jobtracker-brix-00.out，将 hadoop-hadoop-jobtracker-brix-00.out 的内容作为 test.sh 的输入。</p><p>2、&gt;：将内容全局覆盖式的加入文件，相当于删除该文件并重新建立该文件，再写入的效果。</p><p>3、ls * &gt; test.txt ，将 ls * 的所有信息输出到文件 test.txt 中。</p><p>4、&gt;!：如果存在则覆盖。</p><p>5、&gt;&amp;：执行时屏幕上所产生的任何信息写入指定的文件中。</p><p>6、&gt;&gt;：追加到文件中。</p><p>7、&gt;&gt;&amp;：屏幕上的信息追加到文件中。</p><h3 id="标准输入输出"><a href="#标准输入输出" class="headerlink" title="标准输入输出"></a>标准输入输出</h3><p>在 Linux 系统中：标准输入 stdin 默认为键盘输入；标准输出 stdout 默认为屏幕输出；标准错误输出 stderr 默认也是输出到屏幕（上面的 std 表示 standard）。在 BASH 中使用这些概念时一般将标准输出表示为 1，将标准错误输出表示为 2。下面我们举例来说明如何使用他们，特别是标准输出和标准错误输出。</p><h3 id="tee命令"><a href="#tee命令" class="headerlink" title="tee命令"></a>tee命令</h3><p>tee 指令会从标准输入设备读取数据，将其内容输出到标准输出设备，同时保存成文件。</p>]]></content>
      
      
      <categories>
          
          <category> backend </category>
          
      </categories>
      
      
        <tags>
            
            <tag> backend </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>要么孤独，要么庸俗</title>
      <link href="/2020/04/21/yao-me-gu-du-yao-me-yong-su/"/>
      <url>/2020/04/21/yao-me-gu-du-yao-me-yong-su/</url>
      
        <content type="html"><![CDATA[<p>财富犹如海水，喝的越多越觉口渴，名声权力也是如此！</p><p>更远的地方更加孤独，远方除了遥远一无所有。</p>]]></content>
      
      
      <categories>
          
          <category> read </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>java之maven与ant详解</title>
      <link href="/2020/04/19/java-zhi-maven-yu-ant-xiang-jie/"/>
      <url>/2020/04/19/java-zhi-maven-yu-ant-xiang-jie/</url>
      
        <content type="html"><![CDATA[<h2 id="一、maven技术-ant和分布式介绍"><a href="#一、maven技术-ant和分布式介绍" class="headerlink" title="一、maven技术_ant和分布式介绍"></a>一、maven技术_ant和分布式介绍</h2><h3 id="1-1-ant"><a href="#1-1-ant" class="headerlink" title="1.1 ant"></a>1.1 ant</h3><p>1、ant和maven都是项目构建工具<br>2、在项目运行中，项目和项目之间产生关系，导入包，用ant来搞的</p><h3 id="1-2-分布式"><a href="#1-2-分布式" class="headerlink" title="1.2 分布式"></a>1.2 分布式</h3><p>1、传统项目部署：<br>    1）新建一个项目，通过不同的包来区分不同的模块<br>    2）把这一个项目直接发布服务器的tomcat中</p><p>2、分布式项目：（适用于高负载情况下）<br>    1）把一个完整的项目拆分成多个项目，把拆分后的项目分别部署到对应的服务器（tomcat）中的过程就叫分布式项目部署<br>    2）把传统项目包换成一个单独的项目。<br>    3）ant项目变更繁琐，无法满足要求，maven出现</p><h3 id="1-3-maven简介"><a href="#1-3-maven简介" class="headerlink" title="1.3 maven简介"></a>1.3 maven简介</h3><p>1、ant有的功能，maven都有，额外添加了其他功能。<br>2、运行原理图<br>    1）本地仓库：计算机中的一个文件夹，自己定义是哪个文件夹<br>    2）中央仓库：网上地址<a href="https://repo1.maven.org" target="_blank" rel="noopener">https://repo1.maven.org</a><br>    3)下载速度慢–&gt;配置国内镜像（阿里）<br>    4）保证JDK版本和开发环境一直，如果不配置1.4或1.5会优先配置高级版本</p><p><img src="/images/pasted-487.png" alt=""><br>3、坐标<br>    1）每一个jar文件都有一个唯一坐标，通过做表可以精确确定是哪个jar<br>    2）坐标组成：groupID公司名.公司网址/artifactID项目名/version版本<br>4、POM——Project Object Mode 项目对象模型，通过maven构建工具可以让对象和对象之间产生广西<br>逻辑父项目，只要一个项目有子项目必须是pom类型</p><p>5、maven项目目录结构（jar类型）</p><p>快捷目录与真实目录</p><h3 id="maven项目关系"><a href="#maven项目关系" class="headerlink" title="maven项目关系"></a>maven项目关系</h3><p>1、依赖关系<br>标签dependencies</p><p>2、继承关系<br>parent标签<br>父项目是POM类型<br>子项目是jar或者war项目，如果子项目还是其他项目的父项目，那么子项目也是Pom类型<br>有继承关系后，子项目中会出现parent标签，如果子项目的goupid和version与父项目先沟通，则可以不配置<br>父项目看不到有哪些子项目，在逻辑上具有父子项目关系</p><p>3、聚合关系<br>前提是继承关系，父项目会把子项目包含到父项目中，同时子项目的类型就必须是maven model而不是maven project<br>聚合项目和集成项目区别：语义上聚合项目父项目和子项目关系较强<br>在语义上，单纯的继承项目父项目与子项目关系较弱</p>]]></content>
      
      
      <categories>
          
          <category> backend </category>
          
          <category> systemarchitecture </category>
          
      </categories>
      
      
        <tags>
            
            <tag> backend </tag>
            
            <tag> systemarchitecture </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JAIN SLEE架构梳理</title>
      <link href="/2020/04/16/jain-slee-jia-gou-shu-li/"/>
      <url>/2020/04/16/jain-slee-jia-gou-shu-li/</url>
      
        <content type="html"><![CDATA[<h2 id="一、介绍"><a href="#一、介绍" class="headerlink" title="一、介绍"></a>一、介绍</h2><p>1、JAIN SLEE is the specification for a Java Service Logic and Execution Environment (SLEE) architecture</p><p>2、A SLEE is an application server, or service container, which defines a component model for structuring the logic of communications services as a collection of reusable components, and for combining these components into even more sophisticated services. </p><p>3、Restcomm JAIN SLEE is the first and only open source platform certified for JAIN SLEE 1.1 compliance, providing a highly scalable, event-driven application server with a robust component model and a fault tolerant execution environment.</p><p><img src="/images/pasted-484.png" alt=""></p><h2 id="二、从源码安装编译"><a href="#二、从源码安装编译" class="headerlink" title="二、从源码安装编译"></a>二、从源码安装编译</h2><p>1、准备环境：足够的空间&gt;500M和java运行环境</p><p>2、下载源码</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>usr<span class="token punctuation">]</span>$ <span class="token function">git</span> clone https://github.com/RestComm/jain-slee restcomm-jain-slee-release<span class="token punctuation">[</span>usr<span class="token punctuation">]</span>$ <span class="token function">cd</span> restcomm-jain-slee-release<span class="token punctuation">[</span>usr<span class="token punctuation">]</span>$ <span class="token function">git</span> checkout tags/7.0.0-SNAPSHOT<span class="token punctuation">[</span>usr<span class="token punctuation">]</span>$ <span class="token function">cd</span> release</code></pre><p>3、编译<br>Apache Ant 1.6 (or higher) and Maven 2.0.9 (or higher) is used to build the release.</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>usr<span class="token punctuation">]</span>$ ant</code></pre><p>Once the process finishes you should have a restcomm-slee-7.0.0-SNAPSHOT.zip file</p><p>4、安装二进制文件<br>unzip<br>Setting up JBOSS_HOME Environment Variable</p><h2 id="三、配置和运行jslee"><a href="#三、配置和运行jslee" class="headerlink" title="三、配置和运行jslee"></a>三、配置和运行jslee</h2><p>1、WildFly can be booted in two different modes.Standalone Server and Managed Domain</p><p>2、Standalone Server<br>For many use cases, the centralized management capability available via a managed domain is not necessary. For these use cases, a WildFly instance can be run as a standalone server. </p><p>3、Managed Domain<br>One of the primary new features of WildFly is the ability to manage multiple WildFly instances from a single control point.</p><h3 id="3-1-starting"><a href="#3-1-starting" class="headerlink" title="3.1 starting"></a>3.1 starting</h3><h4 id="3-1-1、先配置启动jboss"><a href="#3-1-1、先配置启动jboss" class="headerlink" title="3.1.1、先配置启动jboss"></a>3.1.1、先配置启动jboss</h4><h4 id="3-1-2、再配置启动JAIN-SLEE"><a href="#3-1-2、再配置启动JAIN-SLEE" class="headerlink" title="3.1.2、再配置启动JAIN SLEE"></a>3.1.2、再配置启动JAIN SLEE</h4><p>JAIN SLEE is deployed as WildFly extension and is configured through an standalone.xml. This file is located at $JBOSS_HOME/standalone/configuration.</p><h4 id="3-1-3、配置事件上下文"><a href="#3-1-3、配置事件上下文" class="headerlink" title="3.1.3、配置事件上下文"></a>3.1.3、配置事件上下文</h4><p>EventContext Factory Configuration</p><h4 id="3-1-4、事件路由配置"><a href="#3-1-4、事件路由配置" class="headerlink" title="3.1.4、事件路由配置"></a>3.1.4、事件路由配置</h4><p>1、The JAIN SLEE Event Router is the module responsible for creating new service instances and delivering events to all interested parties. </p><p>2、The Event Router is also able to account performance and load statistics</p><p>3、Statistics are turned on by default and may be retrieved through the JMX MBean org.mobicents.slee:name=EventRouterStatistics.</p><p>4、The whole Event Router is a critical component with respect to the container’s performance. Its configuration can be tuned, through an XML file and a JMX MBean.</p><p>5、！！！Event Router Persistent Configuration</p><p>JAIN SLEE is deployed as WildFly extension and is configured through an standalone.xml. This file is located at $JBOSS_HOME/standalone/configuration.</p><p>The configuration is exposed a JBoss Microcontainer Bean:</p><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>mbean name<span class="token operator">=</span><span class="token string">"EventRouterConfiguration"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"eventRouterThreads"</span> value<span class="token operator">=</span><span class="token string">"8"</span> /<span class="token operator">></span>    <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"collectStats"</span> value<span class="token operator">=</span><span class="token string">"true"</span> /<span class="token operator">></span>    <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"confirmSbbEntityAttachement"</span> value<span class="token operator">=</span><span class="token string">"true"</span> /<span class="token operator">></span>    <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"executorMapperClassName"</span> value<span class="token operator">=</span><span class="token string">"org.mobicents.slee.runtime.eventrouter.mapping.ActivityHashingEventRouterExecutorMapper"</span> /<span class="token operator">></span><span class="token operator">&lt;</span>/mbean<span class="token operator">></span></code></pre><p><img src="/images/pasted-485.png" alt=""></p><p>6、Through JMX, the Event Router module configuration can be changed while the container is running. These configuration changes are not persisted.<br>【JMX（Java Management Extensions，即Java管理扩展）是一个为应用程序、设备、系统等植入管理功能的框架。JMX可以跨越一系列异构操作系统平台、系统体系结构和网络传输协议，灵活的开发无缝集成的系统、网络和服务管理应用。】</p><p>The JMX MBean that can be used to change the Event Router configuration is named org.mobicents.slee:name=EventRouterConfiguration, and provides getters and setters to change each property defined in the persistent configuration.</p><p>7、Timer Facility Configuration<br>The JAIN SLEE Timer Facility is the module responsible for managing SLEE timers, and the number of threads it uses is configurable.</p><p>The Timer Facility configuration can be changed through an XML file and a JMX MBean.</p><p>7.1 Timer Facility Persistent Configuration<br>JAIN SLEE is deployed as WildFly extension and is configured through an standalone.xml. This file is located at $JBOSS_HOME/standalone/configuration.</p><p>The configuration is exposed a JBoss Microcontainer Bean:</p><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>mbean name<span class="token operator">=</span><span class="token string">"TimerFacilityConfiguration"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"timerThreads"</span> value<span class="token operator">=</span><span class="token string">"4"</span> /<span class="token operator">></span><span class="token operator">&lt;</span>/mbean<span class="token operator">></span></code></pre><p><img src="/images/pasted-486.png" alt=""><br>7.2 Timer Facility JMX Configuration<br>Through JMX the Timer Facility module configuration can be changed with the container running. Note that such configuration changes are not persisted.</p><p>The JMX MBean which can be used to change the Timer Facility configuration is named org.mobicents.slee:name=TimerFacilityConfiguration, and provides getters and setters to change each property defined in the persistent configuration.</p><p>The JConsole can be used to use this MBean, see JConsole.</p><p>7.3 Configuring JAIN SLEE Profiles<br>JAIN SLEE Profiles is a component used to store data, usually related with a user and/or service profile. JAIN SLEE maps JAIN SLEE Profiles to a Java Persistence API (JPA) Datasource, through Hibernate.</p><p>There is configuration for JAIN SLEE Profiles provided as JBoss Microcontainer Beans:</p><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>mbean name<span class="token operator">=</span><span class="token string">"H2DBConfig"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"persistProfiles"</span> value<span class="token operator">=</span><span class="token string">"true"</span> /<span class="token operator">></span>    <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"clusteredProfiles"</span> value<span class="token operator">=</span><span class="token string">"false"</span> /<span class="token operator">></span>    <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"hibernateDatasource"</span> value<span class="token operator">=</span><span class="token string">"java:jboss/datasources/ExampleDS"</span> /<span class="token operator">></span>    <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"hibernateDialect"</span> value<span class="token operator">=</span><span class="token string">"org.hibernate.dialect.H2Dialect"</span> /<span class="token operator">></span><span class="token operator">&lt;</span>/mbean<span class="token operator">></span><span class="token operator">&lt;</span>mbean name<span class="token operator">=</span><span class="token string">"PostgreDBConfig"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"persistProfiles"</span> value<span class="token operator">=</span><span class="token string">"true"</span> /<span class="token operator">></span>    <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"clusteredProfiles"</span> value<span class="token operator">=</span><span class="token string">"false"</span> /<span class="token operator">></span>    <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"hibernateDatasource"</span> value<span class="token operator">=</span><span class="token string">"java:jboss/datasources/PostgreDS"</span> /<span class="token operator">></span>    <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"hibernateDialect"</span> value<span class="token operator">=</span><span class="token string">"org.hibernate.dialect.PostgreSQL94Dialect"</span> /<span class="token operator">></span>    <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"datasourceServiceName"</span> value<span class="token operator">=</span><span class="token string">"PostgreDS"</span> /<span class="token operator">></span><span class="token operator">&lt;</span>/mbean<span class="token operator">></span><span class="token operator">&lt;</span>mbean name<span class="token operator">=</span><span class="token string">"ProfileManagement"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"dbConfigMBean"</span> value<span class="token operator">=</span><span class="token string">"PostgreDBConfig"</span> /<span class="token operator">></span><span class="token operator">&lt;</span>/mbean<span class="token operator">></span></code></pre><p><img src="/images/pasted-488.png" alt=""></p><p>7.4 Other Configurations<br>Other JAIN SLEE runtime configuration is done through the following JBoss Microcontainer Bean:</p><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>mbean name<span class="token operator">=</span><span class="token string">"MobicentsManagement"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"entitiesRemovalDelay"</span> value<span class="token operator">=</span><span class="token string">"1"</span> /<span class="token operator">></span>    <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"initializeReferenceDataTypesWithNull"</span> value<span class="token operator">=</span><span class="token string">"true"</span> /<span class="token operator">></span><span class="token operator">&lt;</span>/mbean<span class="token operator">></span></code></pre><p><img src="/images/pasted-489.png" alt=""></p><h2 id="四、管理SLEE"><a href="#四、管理SLEE" class="headerlink" title="四、管理SLEE"></a>四、管理SLEE</h2><h3 id="4-1-Managing-JAIN-SLEE-Components"><a href="#4-1-Managing-JAIN-SLEE-Components" class="headerlink" title="4.1 Managing JAIN SLEE Components"></a>4.1 Managing JAIN SLEE Components</h3><h4 id="4-1-1-Persistent-Deployable-Unit-Management"><a href="#4-1-1-Persistent-Deployable-Unit-Management" class="headerlink" title="4.1.1. Persistent Deployable Unit Management"></a>4.1.1. Persistent Deployable Unit Management</h4><p>JAIN SLEE provides a file deployer that greatly simplifies the management of JAIN SLEE deployable unit jars. The deployer:<br>1）Handles the installation of enclosed JAIN SLEE components.</p><p>2）Automatically activates and deactivates services contained.</p><p>3）Handles the creation, removal, activation, deactivation, link binding and link unbinding of all Resource Adapter Entities.</p><p>All operations are persistent, which means that unlike management done through JMX, these survive server shutdowns.</p><h4 id="4-1-2-Persistent-Deployable-Unit-Install"><a href="#4-1-2-Persistent-Deployable-Unit-Install" class="headerlink" title="4.1.2 Persistent Deployable Unit Install"></a>4.1.2 Persistent Deployable Unit Install</h4><p>To install a deployable unit jar simply copy the file to $JBOSS_HOME/standalone/deployments/. Child directories can be used.</p><h4 id="4-1-3-Persistent-Deployable-Unit-Uninstall"><a href="#4-1-3-Persistent-Deployable-Unit-Uninstall" class="headerlink" title="4.1.3 Persistent Deployable Unit Uninstall"></a>4.1.3 Persistent Deployable Unit Uninstall</h4><p>To uninstall a deployable unit jar simply delete the file.</p><h4 id="4-1-4-Beyond-Deployable-Unit-Un-Install"><a href="#4-1-4-Beyond-Deployable-Unit-Un-Install" class="headerlink" title="4.1.4 Beyond Deployable Unit (Un)Install"></a>4.1.4 Beyond Deployable Unit (Un)Install</h4><p>The file deployer provides additional behavior then simply (un)install deployable unit jars, as done through the JAIN SLEE 1.1 DeploymentMBean:</p><p>Service (De)Activation<br>All services contained in the deployable unit jar are activated after the install, and deactivated prior to uninstall. On service activation, if there is an active service in the SLEE, with same service name and vendor, then it is considered an older version, and the SLEE deactivates it. The deactivation of the old, and activation of the new, is done smoothly in a single operation, allowing service upgrades with no down time.</p><p>Dependencies Management<br>The deployer puts the installation process on hold until all of the component’s dependencies are installed and activated. When uninstalling, it waits for all of the components which depend on components inside the deployable unit to be uninstalled. After an install or uninstall, the deployer evaluates all operations on hold.</p><h4 id="4-1-5-Deploy-Config-Extension"><a href="#4-1-5-Deploy-Config-Extension" class="headerlink" title="4.1.5. Deploy-Config Extension"></a>4.1.5. Deploy-Config Extension</h4><p>A deployable unit jar may include a deploy-config.xml file in its META-INF/ directory. This file provides additional management actions for persistent install/uninstall operations:</p><p>Resource Adaptor Entity Management<br>It is possible to specify RA entities, and the container will create and activate the RA entities after the deployable unit is installed. During the uninstall process, the container will deactivate and remove those RA entities.</p><p>Resource Adaptor Links Management<br>It is possible to specify RA links, and the container will bind those after the deployable unit is installed. When uninstalled, the container will unbind those RA links as well. The links are set for resource adapter entities created in the deploy-config.xml file.</p><p>This file should comply with the following schema:</p><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>?xml version<span class="token operator">=</span><span class="token string">"1.0"</span> encoding<span class="token operator">=</span><span class="token string">"UTF-8"</span> ?<span class="token operator">></span><span class="token operator">&lt;</span>xs:schema xmlns:xs<span class="token operator">=</span><span class="token string">"http://www.w3.org/2001/XMLSchema"</span><span class="token operator">></span>  <span class="token operator">&lt;</span>xs:element name<span class="token operator">=</span><span class="token string">"deploy-config"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>xs:complexType<span class="token operator">></span>      <span class="token operator">&lt;</span>xs:sequence<span class="token operator">></span>        <span class="token operator">&lt;</span>xs:element ref<span class="token operator">=</span><span class="token string">"ra-entity"</span> maxOccurs<span class="token operator">=</span><span class="token string">"unbounded"</span> minOccurs<span class="token operator">=</span><span class="token string">"0"</span>/<span class="token operator">></span>      <span class="token operator">&lt;</span>/xs:sequence<span class="token operator">></span>    <span class="token operator">&lt;</span>/xs:complexType<span class="token operator">></span>  <span class="token operator">&lt;</span>/xs:element<span class="token operator">></span>  <span class="token operator">&lt;</span>xs:element name<span class="token operator">=</span><span class="token string">"property"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>xs:complexType<span class="token operator">></span>      <span class="token operator">&lt;</span>xs:attribute name<span class="token operator">=</span><span class="token string">"name"</span> type<span class="token operator">=</span><span class="token string">"xs:string"</span> use<span class="token operator">=</span><span class="token string">"required"</span> /<span class="token operator">></span>      <span class="token operator">&lt;</span>xs:attribute name<span class="token operator">=</span><span class="token string">"type"</span> type<span class="token operator">=</span><span class="token string">"xs:string"</span> use<span class="token operator">=</span><span class="token string">"required"</span> /<span class="token operator">></span>      <span class="token operator">&lt;</span>xs:attribute name<span class="token operator">=</span><span class="token string">"value"</span> type<span class="token operator">=</span><span class="token string">"xs:string"</span> use<span class="token operator">=</span><span class="token string">"required"</span> /<span class="token operator">></span>    <span class="token operator">&lt;</span>/xs:complexType<span class="token operator">></span>  <span class="token operator">&lt;</span>/xs:element<span class="token operator">></span>  <span class="token operator">&lt;</span>xs:element name<span class="token operator">=</span><span class="token string">"properties"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>xs:complexType<span class="token operator">></span>      <span class="token operator">&lt;</span>xs:sequence<span class="token operator">></span>        <span class="token operator">&lt;</span>xs:element ref<span class="token operator">=</span><span class="token string">"property"</span> maxOccurs<span class="token operator">=</span><span class="token string">"unbounded"</span> minOccurs<span class="token operator">=</span><span class="token string">"0"</span>/<span class="token operator">></span>      <span class="token operator">&lt;</span>/xs:sequence<span class="token operator">></span>      <span class="token operator">&lt;</span>xs:attribute name<span class="token operator">=</span><span class="token string">"file"</span> type<span class="token operator">=</span><span class="token string">"xs:string"</span> use<span class="token operator">=</span><span class="token string">"optional"</span> /<span class="token operator">></span>    <span class="token operator">&lt;</span>/xs:complexType<span class="token operator">></span>  <span class="token operator">&lt;</span>/xs:element<span class="token operator">></span>  <span class="token operator">&lt;</span>xs:element name<span class="token operator">=</span><span class="token string">"ra-entity"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>xs:complexType<span class="token operator">></span>      <span class="token operator">&lt;</span>xs:sequence<span class="token operator">></span>        <span class="token operator">&lt;</span>xs:element ref<span class="token operator">=</span><span class="token string">"properties"</span> maxOccurs<span class="token operator">=</span><span class="token string">"1"</span> minOccurs<span class="token operator">=</span><span class="token string">"0"</span>/<span class="token operator">></span>        <span class="token operator">&lt;</span>xs:element ref<span class="token operator">=</span><span class="token string">"ra-link"</span> maxOccurs<span class="token operator">=</span><span class="token string">"unbounded"</span> minOccurs<span class="token operator">=</span><span class="token string">"0"</span>/<span class="token operator">></span>      <span class="token operator">&lt;</span>/xs:sequence<span class="token operator">></span>      <span class="token operator">&lt;</span>xs:attribute name<span class="token operator">=</span><span class="token string">"resource-adaptor-id"</span> type<span class="token operator">=</span><span class="token string">"xs:string"</span> use<span class="token operator">=</span><span class="token string">"required"</span> /<span class="token operator">></span>      <span class="token operator">&lt;</span>xs:attribute name<span class="token operator">=</span><span class="token string">"entity-name"</span> type<span class="token operator">=</span><span class="token string">"xs:string"</span> use<span class="token operator">=</span><span class="token string">"required"</span> /<span class="token operator">></span>    <span class="token operator">&lt;</span>/xs:complexType<span class="token operator">></span>  <span class="token operator">&lt;</span>/xs:element<span class="token operator">></span>  <span class="token operator">&lt;</span>xs:element name<span class="token operator">=</span><span class="token string">"ra-link"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>xs:complexType<span class="token operator">></span>      <span class="token operator">&lt;</span>xs:attribute name<span class="token operator">=</span><span class="token string">"name"</span> type<span class="token operator">=</span><span class="token string">"xs:string"</span> use<span class="token operator">=</span><span class="token string">"required"</span> /<span class="token operator">></span>    <span class="token operator">&lt;</span>/xs:complexType<span class="token operator">></span>  <span class="token operator">&lt;</span>/xs:element<span class="token operator">></span><span class="token operator">&lt;</span>/xs:schema<span class="token operator">></span></code></pre><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>ra-entity    resource-adaptor-id<span class="token operator">=</span><span class="token string">"ResourceAdaptorID[name=JainSipResourceAdaptor,vendor=net.java.slee.sip,version=1.2]"</span>    entity-name<span class="token operator">=</span><span class="token string">"SipRA"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>properties<span class="token operator">></span>        <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"javax.sip.PORT"</span> type<span class="token operator">=</span><span class="token string">"java.lang.Integer"</span> value<span class="token operator">=</span><span class="token string">"5060"</span> /<span class="token operator">></span>    <span class="token operator">&lt;</span>/properties<span class="token operator">></span>    <span class="token operator">&lt;</span>ra-link name<span class="token operator">=</span><span class="token string">"SipRA"</span> /<span class="token operator">></span><span class="token operator">&lt;</span>/ra-entity<span class="token operator">></span></code></pre><p>The deploy-config.xml example above defines a resource adaptor entity named SipRa, to be created for the resource adaptor with id ResourceAdaptorID[name=JainSipResourceAdaptor, vendor=net.java.slee.sip, version=1.2], and with a single config property named javax.sip.PORT of type java.lang.Integer and with value 5060. Additionally, a resource adaptor link named SipRa should be bound to the resource adaptor entity.</p><p>After the deployable unit is installed, the resource adaptor entity is created, activated and the resource adaptor link is bound. Before the deployable unit is uninstalled, or the server is shutdown, the link is unbound, then the resource adaptor entity is deactivated, and finally the same resource adaptor entity is removed.</p><p>The SLEE includes a deploy-config.xml file at $JBOSS_HOME/server/profile_name/deploy/restcomm-slee, where profile_name is the server profile name, and that file can be used to specify RA entities and links too. If an RA is installed using the persistent deployer, then SLEE reads its own deploy-config.xml file, and if there are RA entities and/or links specified with same RA ID, then the operations to create/activate/deactivate/remove these are executed too, as if these were specified in the Deployable Unit’s own deploy-config.xml.</p><h3 id="4-2-Management-Consoles"><a href="#4-2-Management-Consoles" class="headerlink" title="4.2 Management Consoles"></a>4.2 Management Consoles</h3><h4 id="4-2-1-JConsole"><a href="#4-2-1-JConsole" class="headerlink" title="4.2.1. JConsole"></a>4.2.1. JConsole</h4><p>WildFly provides a script jconsole.sh that starts JConsole tool that gives quick access to all MBeans registered in the server, which includes the ones defined by the JAIN SLEE 1.1 specification. This script adds WildFly CLI tab for access to WildFly server information. Also you can acces to all MBeans in MBeans tab.</p><pre class=" language-bash"><code class="language-bash"><span class="token variable">$JBOSS_HOME</span>/bin/jconsole.sh</code></pre><h4 id="4-2-2-SLEE-Management-Console"><a href="#4-2-2-SLEE-Management-Console" class="headerlink" title="4.2.2. SLEE Management Console"></a>4.2.2. SLEE Management Console</h4><p>The JMX Console is simple but the MBeans operations were made considering its invocation by management clients, not people using browsers. The SLEE Management Console is a web application that provides high level management functionality for the SLEE, and comes pre-deployed in SLEE binary releases. To access this console point a web browser to <a href="http://ip:8080/slee-management-console" target="_blank" rel="noopener">http://ip:8080/slee-management-console</a>, where ip is the IP/Host the container is bound. Unless set during start up, the IP/Host will be 127.0.0.1/localhost by default.</p><p>Full documentation for this management tool can be found in docs/tools/slee-management-console directory.</p><h4 id="TWIDDLE-CLI"><a href="#TWIDDLE-CLI" class="headerlink" title="TWIDDLE CLI"></a>TWIDDLE CLI</h4><p>Console is graphic(web) based tools. Some deployments may require command line access to Restcomm. To aid such cases, Restcomm offers TWIDDLE based CLI. It allows to manage single instance (remote or local) of Restcomm server.</p><p>Restcomm JAIN SLEE binary release includes a TWIDDLE CLI in tools/twiddle, with standalone documentation on same path, but inside docs directory.</p><p>Connecting the Twiddle CLI using JMX to the JSLEE running in the same VM can be achieved as follows:</p><pre class=" language-bash"><code class="language-bash">./twiddle.sh --server<span class="token operator">=</span>service:jmx:remote+http://localhost:9990 activity -l --contexts<span class="token operator">=</span>true</code></pre><h2 id="五-Logging-Traces-and-Alarms"><a href="#五-Logging-Traces-and-Alarms" class="headerlink" title="五 Logging, Traces and Alarms"></a>五 Logging, Traces and Alarms</h2><p>略</p><h2 id="六-Restcomm-JAIN-SLEE-Clustering"><a href="#六-Restcomm-JAIN-SLEE-Clustering" class="headerlink" title="六 Restcomm JAIN SLEE Clustering"></a>六 Restcomm JAIN SLEE Clustering</h2><p>略</p><h2 id="七-Fault-Tolerant-Resource-Adaptor-API"><a href="#七-Fault-Tolerant-Resource-Adaptor-API" class="headerlink" title="七 Fault Tolerant Resource Adaptor API"></a>七 Fault Tolerant Resource Adaptor API</h2><p>略</p><h2 id="八-Resource-Adaptor-Activity-Replication"><a href="#八-Resource-Adaptor-Activity-Replication" class="headerlink" title="八 Resource Adaptor Activity Replication"></a>八 Resource Adaptor Activity Replication</h2><p>略</p><h2 id="九-Firing-Events-from-Java-EE-Applications"><a href="#九-Firing-Events-from-Java-EE-Applications" class="headerlink" title="九 Firing Events from Java EE Applications"></a>九 Firing Events from Java EE Applications</h2><h3 id="9-1-Remote-SLEE-Connection-Service"><a href="#9-1-Remote-SLEE-Connection-Service" class="headerlink" title="9.1 Remote SLEE Connection Service"></a>9.1 Remote SLEE Connection Service</h3><p>JAIN SLEE provides Remote SLEE Connection Service via RMI Registry lookup method for firing event.</p><p>The code is the same whether the SLEE container is in the same JVM or not.</p><pre class=" language-bash"><code class="language-bash">    // get local or remote RMI registry on rmiAddress:rmiPort    Registry registry <span class="token operator">=</span> LocateRegistry.getRegistry<span class="token punctuation">(</span>this.rmiAddress, this.rmiPort<span class="token punctuation">)</span><span class="token punctuation">;</span>    // get RMI stup throw lookup    RemoteSleeConnectionService rmiStub <span class="token operator">=</span>        <span class="token punctuation">(</span>RemoteSleeConnectionService<span class="token punctuation">)</span> registry.lookup<span class="token punctuation">(</span><span class="token string">"RemoteSleeConnectionService"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    // create activity handle    ExternalActivityHandle handle <span class="token operator">=</span> rmiStub.createActivityHandle<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    // get event <span class="token function">type</span>    EventTypeID requestType <span class="token operator">=</span> rmiStub.getEventTypeID<span class="token punctuation">(</span>eventName, eventVendor, eventVersion<span class="token punctuation">)</span><span class="token punctuation">;</span>    CustomEvent customEvent <span class="token operator">=</span> new CustomEvent<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    customEvent.setMessage<span class="token punctuation">(</span>messagePassed<span class="token punctuation">)</span><span class="token punctuation">;</span>    logger.info<span class="token punctuation">(</span><span class="token string">"The event type is: "</span> + requestType<span class="token punctuation">)</span><span class="token punctuation">;</span>    rmiStub.fireEvent<span class="token punctuation">(</span>customEvent, requestType, handle, null<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> backend </category>
          
      </categories>
      
      
        <tags>
            
            <tag> backend </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>USSD网关架构梳理</title>
      <link href="/2020/04/16/ussd-wang-guan-jia-gou-shu-li/"/>
      <url>/2020/04/16/ussd-wang-guan-jia-gou-shu-li/</url>
      
        <content type="html"><![CDATA[<h2 id="一、总体介绍"><a href="#一、总体介绍" class="headerlink" title="一、总体介绍"></a>一、总体介绍</h2><p>1、The platform is easy-to-install and easy-to-deploy allowing you to have the Gateway set up and configured very quickly.</p><p>2、Restcomm USSD GateWay supports TDM hardware offered by major vendors in the market, namely Intel family boards (Dialogic) and Zaptel/Dahdi (Digium, Sangoma).</p><p>3、Restcomm USSD GateWay is based on the robust and proven Restcomm JAIN SLEE 1.1 Server and Restcomm jSS7 Stack. </p><p>4、具有优秀的健壮性架构，不需要怀疑其不稳定性以及不专业性！！！！！</p><p>5、It provides a set of connectors to a variety of networks elements: SS7 MAP, TCAP, INAP, ISUP, SMPP, XMPP, SIP, MGCP, HTTP, XDM, XCAP, Diameter and many others.</p><p>6、fully compliant with JSR 240 (JSLEE 1.1). </p><p>7、The Restcomm USSD Gateway makes use of HTTP protocol between the gateway and the third-party applications (or Value Added Service Modules). </p><p>8、Restcomm USSD Gateway receives the USSD request from the subscriber’s handset/device via the GSM Signaling network and then translates these requests to HTTP depending on the rules configured in the Gateway to route to a corresponding Value Added Service (VAS) or third-party application.</p><p>9、The HTTP callback mechanism allows the third-party Application to be agnostic to Operating System, Programming Language and Framework.————解耦</p><h2 id="二、安装先决条件"><a href="#二、安装先决条件" class="headerlink" title="二、安装先决条件"></a>二、安装先决条件</h2><p>1、The platform can be installed on any OS that supports Java and SCTP. But native libraries for SS7 cards are compiled only for Linux at the moment and therefore supported only on Linux Operating System.</p><p>2、Java 7 is used for a server under JBOSS 5, JAVA 8 or above is needed for a server under Wildfly</p><p>3、You must ensure that you have appropriate firewall permissions to allow access to IP:8080. This is required to access the management consoles.</p><p>4、！！！If you intend to use SIGTRAN (M3UA), you must have the lksctp library installed. The Linux Kernel Stream Control Transmission Protocol (lksctp) library provides SCTP implementation.<br>For more details on downloading and installing lksctp, please refer to <a href="http://lksctp.sourceforge.net/" target="_blank" rel="noopener">http://lksctp.sourceforge.net/</a></p><p>5、must ensure that the JAVA_HOME and JBOSS_HOME Environment variables are set properly for the user account(s) that will run the server. </p><h2 id="三、JBOSS环境变量设置"><a href="#三、JBOSS环境变量设置" class="headerlink" title="三、JBOSS环境变量设置"></a>三、JBOSS环境变量设置</h2><p>1、When the [app]<code>Platform</code> or &amp;THIS.PLATFORM; servers are built from source, then JBOSS_HOME must be set</p><p>2、The JBOSS_HOME environment variable must point to the directory which contains all of the files for the [app]<code>Platform</code> or individual &amp;THIS.PLATFORM; server that you installed. As another hint, this topmost directory contains a bin subdirectory.</p><p>3、The JBOSS_HOME environment variable must point to the directory which contains all of the files for the [app]<code>Platform</code> or individual &amp;THIS.PLATFORM; server that you installed. As another hint, this topmost directory contains a bin subdirectory.</p><p>4、The command line usage below is based upon a binary installation of the [app]<code>Platform</code>. In this sample output, JBOSS_HOME has been set correctly to the topmost_directory of the installation. Note that if you are installing one of the standalone [app] servers (with JBoss AS bundled!), then JBOSS_HOME would point to the topmost_directory of your server installation.</p><pre class=" language-xml"><code class="language-xml">~]$ echo $JBOSS_HOME/home/silas/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>path</span><span class="token punctuation">></span></span>/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>to</span><span class="token punctuation">></span></span>/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>install_directory</span><span class="token punctuation">></span></span></code></pre><h2 id="四、从源码安装"><a href="#四、从源码安装" class="headerlink" title="四、从源码安装"></a>四、从源码安装</h2><p>1、Restcomm USSD GateWay works with JDK1.7 or above. In addition you must have the following tools installed.</p><p>Git Client : Instructions for using GIT, including install, can be found at <a href="http://git-scm.com/book" target="_blank" rel="noopener">http://git-scm.com/book</a></p><p>Maven 3.2.X : Instructions for using Maven, including install, can be found at <a href="http://maven.apache.org/" target="_blank" rel="noopener">http://maven.apache.org/</a></p><p>Ant 1.7.0 : Instructions for using Ant, including install, can be found at <a href="http://ant.apache.org" target="_blank" rel="noopener">http://ant.apache.org</a></p><p>2、release source code building</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>usr<span class="token punctuation">]</span>$ <span class="token function">git</span> clone https://github.com/Restcomm/ussdgateway.git<span class="token punctuation">[</span>usr<span class="token punctuation">]</span>$ <span class="token function">cd</span> ussdgateway<span class="token punctuation">[</span>usr<span class="token punctuation">]</span>$ <span class="token function">git</span> checkout <span class="token punctuation">(</span>select<span class="token punctuation">)</span><span class="token punctuation">[</span>usr<span class="token punctuation">]</span>$ mvn clean <span class="token function">install</span></code></pre><h2 id="五、安装后配置"><a href="#五、安装后配置" class="headerlink" title="五、安装后配置"></a>五、安装后配置</h2><p>1、configure the SS7 Stack and the Gateway to meet your requirements.The Restcomm jSS7 Stack User Guide in the restcomm-ussdgateway-<version>/docs/jss7/ folder will assist you in configuring and managing the SS7 Stack.</p><p>2、when you have completely configured the SS7 Stack to meet your requirements, you must go ahead with configuring the USSD Gateway. The Restcomm USSD GateWay Admin Guide in the restcomm-ussdgateway-<version>/docs/ussd/ folder will assist you in configuring and managing the USSD Gateway. </p><p>3、To configure and manage both the Stack and the Gateway you can make use of the Command Line Interface (CLI) tool or the GUI that comes with the platform.</p><p>4、！！！Failure to configure memory, database, logging and other settings as per the instructions in the Admin Guide may result in poor performance of the Gateway.</p>]]></content>
      
      
      <categories>
          
          <category> systemarchitecture </category>
          
      </categories>
      
      
        <tags>
            
            <tag> systemarchitecture </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RestComm架构体系梳理</title>
      <link href="/2020/04/16/restcomm-jia-gou-ti-xi-shu-li/"/>
      <url>/2020/04/16/restcomm-jia-gou-ti-xi-shu-li/</url>
      
        <content type="html"><![CDATA[<h2 id="一、整体架构"><a href="#一、整体架构" class="headerlink" title="一、整体架构"></a>一、整体架构</h2><p><img src="/images/pasted-483.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> systemarchitecture </category>
          
      </categories>
      
      
        <tags>
            
            <tag> systemarchitecture </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux常用命令</title>
      <link href="/2020/04/15/linux-chang-yong-ming-ling/"/>
      <url>/2020/04/15/linux-chang-yong-ming-ling/</url>
      
        <content type="html"><![CDATA[<h4 id="1、查看系统安装的java"><a href="#1、查看系统安装的java" class="headerlink" title="1、查看系统安装的java"></a>1、查看系统安装的java</h4><p>rpm -qa | grep java</p><h4 id="2、linux统计代码行数"><a href="#2、linux统计代码行数" class="headerlink" title="2、linux统计代码行数"></a>2、linux统计代码行数</h4><p>find . -name “*.c” |xargs cat|grep -v ^$|wc -l</p>]]></content>
      
      
      <categories>
          
          <category> backend </category>
          
      </categories>
      
      
        <tags>
            
            <tag> backend </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JSLEE/SS7/USSD/JBOSS梳理</title>
      <link href="/2020/04/15/jslee-ss7-ussd-jboss-shu-li/"/>
      <url>/2020/04/15/jslee-ss7-ussd-jboss-shu-li/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/pasted-482.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> backend </category>
          
      </categories>
      
      
        <tags>
            
            <tag> backend </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Deploy USSDGW From Trunk</title>
      <link href="/2020/04/15/deploy-ussdgw-from-trunk/"/>
      <url>/2020/04/15/deploy-ussdgw-from-trunk/</url>
      
        <content type="html"><![CDATA[<h2 id="一、Deploy-Mobicents-USSD-Gateway-from-master"><a href="#一、Deploy-Mobicents-USSD-Gateway-from-master" class="headerlink" title="一、Deploy Mobicents USSD Gateway from master"></a>一、Deploy Mobicents USSD Gateway from master</h2><p>Below are steps to compile the USSD Gateway from GIT master branch and deploy on latest Mobicents JSLEE Server</p><pre class=" language-xml"><code class="language-xml">  # Download latest SNAPSHOT JSLEE server from https://hudson.jboss.org/hudson/view/Mobicents/job/Mobicents-Slee-2.x-Release/  # GIT clone MAP RA from master branch http://code.google.com/p/jain-slee/source/browse/?repo=ss7#git%2Fresources%2Fmap  # GIT clone USSD GW from http://code.google.com/p/ussdgateway/source/checkout  # Unzip mobicents-jainslee-2.7.0-SNAPSHOT-jboss-5.1.0.GA.zip  # set JBOSS_HOME environment variable to point to mobicents-jainslee-2.7.0-SNAPSHOT-jboss-5.1.0.GA/jboss-5.1.0.GA  # cd to checkedout map ra and call "mvn clean install"  # cd to cloned ussdgateway and call "mvn clean install"   # copy mobicents-jainslee-2.7.0-SNAPSHOT-jboss-5.1.0.GA/resources/http-client/http-client-ra-DU-2.5.0.FINAL.jar to mobicents-jainslee-2.7.0-SNAPSHOT-jboss-5.1.0.GA/jboss-5.1.0.GA/server/default/deploy  # copy mobicents-jainslee-2.7.0-SNAPSHOT-jboss-5.1.0.GA/resources/jdbc/mobicents-slee-ra-jdbc-DU-1.0.0.FINAL.jar to mobicents-jainslee-2.7.0-SNAPSHOT-jboss-5.1.0.GA/jboss-5.1.0.GA/server/default/deploy  # cd to mobicents-jainslee-2.7.0-SNAPSHOT-jboss-5.1.0.GA/jboss-5.1.0.GA/bin and start the server "./run.sh -b 127.0.0.1"</code></pre><h2 id="二、Prepare-CLI"><a href="#二、Prepare-CLI" class="headerlink" title="二、Prepare CLI"></a>二、Prepare CLI</h2><p>Above steps will prepare the USSD Gw, however to get the latest Command Line Interface (CLI) working below steps needs to be executed</p><pre class=" language-xml"><code class="language-xml">  #  GIT clone jSS7 from master branch http://code.google.com/p/jss7/source/checkout  # set JBOSS_HOME environment variable to point to mobicents-jainslee-2.7.0-SNAPSHOT-jboss-5.1.0.GA/jboss-5.1.0.GA  # cd to checkedout jss7 and call "mvn clean install -Pjboss"  # cd to mobicents-jainslee-2.7.0-SNAPSHOT-jboss-5.1.0.GA/jboss-5.1.0.GA/bin and execute ./ss7-cli.sh</code></pre><p>Above steps will copy the necessary scripts and jars in jboss-5.1.0.GA for CLI to work</p>]]></content>
      
      
      <categories>
          
          <category> backend </category>
          
      </categories>
      
      
        <tags>
            
            <tag> backend </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jboss结构</title>
      <link href="/2020/04/10/jboss-jie-gou/"/>
      <url>/2020/04/10/jboss-jie-gou/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/pasted-481.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> backend </category>
          
      </categories>
      
      
        <tags>
            
            <tag> backend </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>与华总关于宏观掌控、布局与方法论的洽谈纪要</title>
      <link href="/2020/04/09/yu-hua-zong-guan-yu-hong-guan-zhang-kong-bu-ju-yu-fang-fa-lun-de-qia-tan-ji-yao/"/>
      <url>/2020/04/09/yu-hua-zong-guan-yu-hong-guan-zhang-kong-bu-ju-yu-fang-fa-lun-de-qia-tan-ji-yao/</url>
      
        <content type="html"><![CDATA[<h2 id="1、宏观掌控全局"><a href="#1、宏观掌控全局" class="headerlink" title="1、宏观掌控全局"></a>1、宏观掌控全局</h2><h2 id="2、不要错过重要学习资源，保持警惕性"><a href="#2、不要错过重要学习资源，保持警惕性" class="headerlink" title="2、不要错过重要学习资源，保持警惕性"></a>2、不要错过重要学习资源，保持警惕性</h2><h2 id="3、努力赶车，也要抬头看路"><a href="#3、努力赶车，也要抬头看路" class="headerlink" title="3、努力赶车，也要抬头看路"></a>3、努力赶车，也要抬头看路</h2><h2 id="4、未来布局，目标（3、5年规划）"><a href="#4、未来布局，目标（3、5年规划）" class="headerlink" title="4、未来布局，目标（3、5年规划）"></a>4、未来布局，目标（3、5年规划）</h2><h2 id="5、做事的成本与回收"><a href="#5、做事的成本与回收" class="headerlink" title="5、做事的成本与回收"></a>5、做事的成本与回收</h2><h2 id="6、方法体系与知识体系同样重要"><a href="#6、方法体系与知识体系同样重要" class="headerlink" title="6、方法体系与知识体系同样重要"></a>6、方法体系与知识体系同样重要</h2><h2 id="7、思考问题、做决策多元化、生态化"><a href="#7、思考问题、做决策多元化、生态化" class="headerlink" title="7、思考问题、做决策多元化、生态化"></a>7、思考问题、做决策多元化、生态化</h2><h2 id="8、线性-非线性出发点的弊端与优势"><a href="#8、线性-非线性出发点的弊端与优势" class="headerlink" title="8、线性/非线性出发点的弊端与优势"></a>8、线性/非线性出发点的弊端与优势</h2>]]></content>
      
      
      <categories>
          
          <category> read </category>
          
          <category> essay </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>荀子·修身</title>
      <link href="/2020/04/09/xun-zi-xiu-shen/"/>
      <url>/2020/04/09/xun-zi-xiu-shen/</url>
      
        <content type="html"><![CDATA[<p>“ 不闻不若闻之，闻之不若见之，见之不若知之，知之不若行之。学至于行而止矣。行之，明也。”</p>]]></content>
      
      
      <categories>
          
          <category> read </category>
          
          <category> essay </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>家训</title>
      <link href="/2020/04/08/jia-xun/"/>
      <url>/2020/04/08/jia-xun/</url>
      
        <content type="html"><![CDATA[<h2 id="祥和堂男人处事精神符号"><a href="#祥和堂男人处事精神符号" class="headerlink" title="祥和堂男人处事精神符号"></a>祥和堂男人处事精神符号</h2><p>详见《祥和堂•家规礼仪》为人篇、处事篇）：</p><pre class=" language-java"><code class="language-java">一、处事风格心思缜密，计划周密，超前部署，付诸行动；二、行为品格凡事有交代，件件有着落，事事有回音；三、办事思路月计划，周安排，日落时；长计划，短安排，贵在落实。</code></pre>]]></content>
      
      
      <categories>
          
          <category> read </category>
          
          <category> essay </category>
          
      </categories>
      
      
        <tags>
            
            <tag> essay </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springboot获取配置的两种方式</title>
      <link href="/2020/04/08/springboot-huo-qu-pei-zhi-de-liang-chong-fang-shi/"/>
      <url>/2020/04/08/springboot-huo-qu-pei-zhi-de-liang-chong-fang-shi/</url>
      
        <content type="html"><![CDATA[<p>1.读取默认配置文件中的数据<br>application.properties </p><p><img src="/images/pasted-474.png" alt=""><br>直接使用@Value注解获取数据 </p><p><img src="/images/pasted-475.png" alt=""><br>2.使用Environment获取数据<br>防止乱码统一编码格式 </p><p><img src="/images/pasted-476.png" alt=""><br>注入Environment 使用getProperty获取数据 </p><p><img src="/images/pasted-477.png" alt=""><br>3.读取自定义配置文件中的数据<br>自定义配置文件</p><p><img src="/images/pasted-478.png" alt=""><br>加载自定义配置文件实体类并生成set和get方法 </p><p><img src="/images/pasted-479.png" alt=""><br>注入自定义实体类，用get方法获取数据 </p><p><img src="/images/pasted-480.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> backend </category>
          
      </categories>
      
      
        <tags>
            
            <tag> backend </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jss7从m3ua-sccp-map的设置</title>
      <link href="/2020/04/07/jss7-cong-m3ua-sccp-map-de-she-zhi/"/>
      <url>/2020/04/07/jss7-cong-m3ua-sccp-map-de-she-zhi/</url>
      
        <content type="html"><![CDATA[<h2 id="一、总体分层"><a href="#一、总体分层" class="headerlink" title="一、总体分层"></a>一、总体分层</h2><p><img src="/images/pasted-465.png" alt=""></p><h2 id="二、m3ua层设置"><a href="#二、m3ua层设置" class="headerlink" title="二、m3ua层设置"></a>二、m3ua层设置</h2><p><img src="/images/pasted-473.png" alt=""></p><p>IP channel type<br>sctp role</p>]]></content>
      
      
      <categories>
          
          <category> signaling </category>
          
      </categories>
      
      
        <tags>
            
            <tag> signaling </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>xmanager+xshell控制远程linux桌面</title>
      <link href="/2020/04/07/xmanager-xshell-kong-zhi-yuan-cheng-linux-zhuo-mian/"/>
      <url>/2020/04/07/xmanager-xshell-kong-zhi-yuan-cheng-linux-zhuo-mian/</url>
      
        <content type="html"><![CDATA[<pre><code>export DISPLAY=jump_ip_addr:0.0</code></pre>]]></content>
      
      
      <categories>
          
          <category> backend </category>
          
      </categories>
      
      
        <tags>
            
            <tag> backend </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>服务器加速代理docker</title>
      <link href="/2020/04/07/fu-wu-qi-jia-su-dai-li-docker/"/>
      <url>/2020/04/07/fu-wu-qi-jia-su-dai-li-docker/</url>
      
        <content type="html"><![CDATA[<p>1、传config文件到服务器</p><p><img src="/images/pasted-472.png" alt=""></p><p>2、yum install docker</p><p>3、启动sudo service docker restart</p><p>4、加载docker服务</p><pre><code>docker run -d --name=sslocal  --restart=always --net=host --entrypoint=&quot;/usr/local/bin/sslocal&quot; -v $(pwd)/gui-config.json:/tmp/ssmlt.json:rw oddrationale/docker-shadowsocks -c /tmp/ssmlt.json</code></pre><p>5、git 的 http 协议代理</p><p>如果是http代理，假设端口为1080，按照如下设置：</p><pre><code>git config --global http.proxy &#39;http://127.0.0.1:1080&#39; git config --global https.proxy &#39;https://127.0.0.1:1080&#39;</code></pre>]]></content>
      
      
      <categories>
          
          <category> backend </category>
          
      </categories>
      
      
        <tags>
            
            <tag> backend </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>M3UA参数与配置</title>
      <link href="/2020/04/07/m3ua-can-shu-yu-pei-zhi/"/>
      <url>/2020/04/07/m3ua-can-shu-yu-pei-zhi/</url>
      
        <content type="html"><![CDATA[<h2 id="一、pre"><a href="#一、pre" class="headerlink" title="一、pre"></a>一、pre</h2><p>为了满足实体依赖性，必须按以下顺序将配置节加载到M3UA任务：</p><h2 id="一-0-使用m3ua"><a href="#一-0-使用m3ua" class="headerlink" title="一.0 使用m3ua"></a>一.0 使用m3ua</h2><p>M3UA通过配置通用参数和以下entity结构体来实现服务：<br><img src="/images/pasted-462.png" alt=""></p><p>将M3UA配置为应用服务器进程（ASP）或IP服务器进程（IPSP）。下表显示了为ASP或IPSP配置M3UA时的差异：<br><img src="/images/pasted-463.png" alt=""></p><p>如果M3UA配置为IPSP，则IPSP_MODE参数必须配置为单端（SE）或双端（DE）：<br><img src="/images/pasted-464.png" alt=""><br>只有当IPSP配置为远程对等信令进程类型时，IPSP U模式才有效。</p><p>IPSP配置中需要客户端参数。此参数告诉M3UA是否启动与对等方的关联。将客户端参数设置为TRUE表示M3UA始终启动关联。将此参数设置为FALSE表示希望另一方启动关联。如果配置为ASP，M3UA总是启动关联。</p><p>M3UA配置文件的PS configuration部分中的RTE_CTX参数必须与对等端的配置匹配。例如，远程PS的路由上下文必须与本地PS的路由上下文匹配，反之亦然。路由上下文在大多数M3UA消息中传递，用于将传入消息与其关联的nsap和上层匹配。有关更多信息，请参阅NMS SS7配置手册。</p><h2 id="二、M3UA配置概览"><a href="#二、M3UA配置概览" class="headerlink" title="二、M3UA配置概览"></a>二、M3UA配置概览</h2><p>M3UA级别的所有计时器的默认值都以毫秒为单位显示。计时器的配置值为零将禁用该计时器。</p><p><img src="/images/pasted-465.png" alt=""></p><h2 id="三、网络配置"><a href="#三、网络配置" class="headerlink" title="三、网络配置"></a>三、网络配置</h2><p><img src="/images/pasted-466.png" alt=""><br>ITU配置实例</p><pre><code>&lt;NetworkConfig Index=&quot;1&quot;&gt;     &lt;NetworkId&gt;1&lt;/NetworkId&gt;     &lt;NetworkAppear&gt;1234&lt;/NetworkAppear&gt;     &lt;Ssf&gt;INTL&lt;/Ssf&gt;     &lt;DpcLength&gt;14&lt;/DpcLength&gt;     &lt;SlsLength&gt;4&lt;/SlsLength&gt; &lt;!-- 4 / 5/ 8 --&gt;     &lt;ServiceUserVar&gt;ITU&lt;/ServiceUserVar&gt;     &lt;ServiceUserVar2&gt;ITU&lt;/ServiceUserVar2&gt; &lt;!-- TCAP user var --&gt;&lt;/NetworkConfig&gt;</code></pre><p>ANSI配置实例</p><pre><code>&lt;NetworkConfig Index=&quot;1&quot;&gt;     &lt;NetworkId&gt;1&lt;/NetworkId&gt;     &lt;NetworkAppear&gt;1234&lt;/NetworkAppear&gt;     &lt;Ssf&gt;NAT&lt;/Ssf&gt;     &lt;DpcLength&gt;24&lt;/DpcLength&gt;     &lt;SlsLength&gt;5&lt;/SlsLength&gt; &lt;!-- 4 / 5/ 8 --&gt;     &lt;ServiceUserVar&gt;ANSI&lt;/ServiceUserVar&gt;     &lt;ServiceUserVar2&gt;ANSI&lt;/ServiceUserVar2&gt; &lt;!-- TCAP user var --&gt;&lt;/NetworkConfig&gt;</code></pre><h2 id="四、NSAP配置"><a href="#四、NSAP配置" class="headerlink" title="四、NSAP配置"></a>四、NSAP配置</h2><p><img src="/images/pasted-467.png" alt=""></p><h2 id="五、SAP配置"><a href="#五、SAP配置" class="headerlink" title="五、SAP配置"></a>五、SAP配置</h2><p><img src="/images/pasted-468.png" alt=""></p><h2 id="六、Peer-signaling-process-configuration"><a href="#六、Peer-signaling-process-configuration" class="headerlink" title="六、Peer signaling process configuration"></a>六、Peer signaling process configuration</h2><p><img src="/images/pasted-469.png" alt=""></p><h2 id="七、Peer-server-configuration"><a href="#七、Peer-server-configuration" class="headerlink" title="七、Peer server configuration"></a>七、Peer server configuration</h2><p><img src="/images/pasted-470.png" alt=""></p><h2 id="八、Routing-entry-configuration"><a href="#八、Routing-entry-configuration" class="headerlink" title="八、Routing entry configuration"></a>八、Routing entry configuration</h2><p><img src="/images/pasted-471.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> signaling </category>
          
      </categories>
      
      
        <tags>
            
            <tag> backend </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux编译sigtran协议栈</title>
      <link href="/2020/04/03/linux-bian-yi-sigtran-xie-yi-zhan/"/>
      <url>/2020/04/03/linux-bian-yi-sigtran-xie-yi-zhan/</url>
      
        <content type="html"><![CDATA[<h2 id="零、源文件拷贝，安装依赖"><a href="#零、源文件拷贝，安装依赖" class="headerlink" title="零、源文件拷贝，安装依赖"></a>零、源文件拷贝，安装依赖</h2><p>git clone xxx</p><h3 id="1、安装jdk"><a href="#1、安装jdk" class="headerlink" title="1、安装jdk"></a>1、安装jdk</h3><pre><code>yum install java-1.8.0-openjdk java-1.8.0-openjdk-devel</code></pre><p>安装mvn</p><pre><code>yum whatprovides mavenyum install xxx</code></pre><h3 id="2、安装jboss"><a href="#2、安装jboss" class="headerlink" title="2、安装jboss"></a>2、安装jboss</h3><h2 id="一、没有任何本地Lib的编译"><a href="#一、没有任何本地Lib的编译" class="headerlink" title="一、没有任何本地Lib的编译"></a>一、没有任何本地Lib的编译</h2><pre><code>cd jss7mvn install</code></pre><h2 id="二、基于ant编译二进制文件"><a href="#二、基于ant编译二进制文件" class="headerlink" title="二、基于ant编译二进制文件"></a>二、基于ant编译二进制文件</h2><pre><code>cd releaseant</code></pre>]]></content>
      
      
      <categories>
          
          <category> backend </category>
          
      </categories>
      
      
        <tags>
            
            <tag> backend </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Idea卡在Resolving Maven dependencies的解决方案</title>
      <link href="/2020/04/03/idea-qia-zai-resolving-maven-dependencies-de-jie-jue-fang-an/"/>
      <url>/2020/04/03/idea-qia-zai-resolving-maven-dependencies-de-jie-jue-fang-an/</url>
      
        <content type="html"><![CDATA[<p>导入项目依赖太多，一直等待</p><p><img src="/images/pasted-458.png" alt=""></p><p>在尝试过更换maven版本, 更换阿里镜像无果的情况下, 可以尝试以下解决方案:</p><pre><code>修改maven Importing的jvm参数, 默认为700多, 直接修改成 -Xms1024m -Xmx2048m</code></pre><p><img src="/images/pasted-459.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> backend </category>
          
      </categories>
      
      
        <tags>
            
            <tag> backend </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Build jSS7 from Source</title>
      <link href="/2020/04/02/build-jss7-from-source/"/>
      <url>/2020/04/02/build-jss7-from-source/</url>
      
        <content type="html"><![CDATA[<p>Here is the list of commands you need to run for building Mobicents jSS7 from the source</p><p>1、Clone jSS7 Repo : git clone <a href="https://github.com/RestComm/jss7.git" target="_blank" rel="noopener">https://github.com/RestComm/jss7.git</a></p><p>2、Download Dialogic dependencies from Dialogic website. This is required to build the hardware part of jSS7 to have support for Dialogic boards in case you can’t use SIGTRAN directly : wget <a href="https://www.dialogic.com/files/DSI/developmentpackages/linux/dpklnx.Z" target="_blank" rel="noopener">https://www.dialogic.com/files/DSI/developmentpackages/linux/dpklnx.Z</a><br>3、Unpack the contents of the Dialogic SS7 dependencies : tar –no-same-owner -zxvf dpklnx.Z<br>4、Install the Dialogic SS7 Java Dependency in your local maven repository : mvn install:install-file -DgroupId=com.vendor.dialogic -DartifactId=gctapi -Dversion=6.7.1 -Dpackaging=jar -Dfile=./JAVA/gctApi.jar<br>5、Download Sun JMX tools dependency used by the jSS7 simulator : wget <a href="http://www.datanucleus.org/downloads/maven2/com/sun/jdmk/jmxtools/1.2.1/jmxtools-1.2.1.jar" target="_blank" rel="noopener">http://www.datanucleus.org/downloads/maven2/com/sun/jdmk/jmxtools/1.2.1/jmxtools-1.2.1.jar</a><br>6、Install the Sun JMX Tools Dependency in your local maven repository : mvn install:install-file -DgroupId=com.sun.jdmk -DartifactId=jmxtools -Dversion=1.2.1 -Dpackaging=jar -Dfile=jmxtools-1.2.1.jar<br>7、Build jSS7 with maven : mvn clean install -Dmaven.test.skip=true<br>8、Enjoy the best SS7 Open Source Stack out there ;) !</p><p>Note: For deploying of binaries into a local JBOSS AS you need to configure a JBOSS_HOME environmental variable to a JBOSS folder and run following mvn commands:</p><p>1、mvn clean install -Pdeploy-module-jboss5 -Dmaven.test.skip=true (for jboss 5.1 server)<br>2、mvn clean install -Pdeploy-module-wildfly -Dmaven.test.skip=true (for wildfly 10 server)</p>]]></content>
      
      
      <categories>
          
          <category> backend </category>
          
      </categories>
      
      
        <tags>
            
            <tag> signaling </tag>
            
            <tag> backend </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux安装配置JBOSS</title>
      <link href="/2020/04/02/linux-an-zhuang-pei-zhi-jboss/"/>
      <url>/2020/04/02/linux-an-zhuang-pei-zhi-jboss/</url>
      
        <content type="html"><![CDATA[<h2 id="一、下载JBOSS"><a href="#一、下载JBOSS" class="headerlink" title="一、下载JBOSS"></a>一、下载JBOSS</h2><p><a href="https://jbossas.jboss.org/downloads/" target="_blank" rel="noopener">https://jbossas.jboss.org/downloads/</a><br>找到合适的镜像，下载后传到Linux服务器<br><img src="/images/pasted-455.png" alt=""></p><p><img src="/images/pasted-456.png" alt="上传到服务器"></p><h2 id="二、安装JBOSS"><a href="#二、安装JBOSS" class="headerlink" title="二、安装JBOSS"></a>二、安装JBOSS</h2><p>1、cp到服务器/usr/local/目录下</p><p>2、tar -zxvf jboss-as-7.1.1.Final.tar.gz（换成自己的版本文件）</p><p>3、配置环境变量</p><p>vi /etc/profile<br>最后一行输入：export JBOSS_HOME=/usr/local/jboss-as-7.1.1.Final</p><p>保存退出输入source /etc/profile生效配置</p><p>4、执行echo $JBOSS_HOME验证成功</p><p><img src="/images/pasted-457.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> backend </category>
          
      </categories>
      
      
        <tags>
            
            <tag> backend </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springboot笔记</title>
      <link href="/2020/04/02/springboot-bi-ji/"/>
      <url>/2020/04/02/springboot-bi-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="一、Spring-Boot-入门"><a href="#一、Spring-Boot-入门" class="headerlink" title="一、Spring Boot 入门"></a><strong>一、</strong>Spring Boot 入门</h1><h2 id="1、Spring-Boot-简介"><a href="#1、Spring-Boot-简介" class="headerlink" title="1、Spring Boot 简介"></a>1、Spring Boot 简介</h2><blockquote><p>简化Spring应用开发的一个框架；</p><p>整个Spring技术栈的一个大整合；</p><p>J2EE开发的一站式解决方案；</p></blockquote><h2 id="2、微服务"><a href="#2、微服务" class="headerlink" title="2、微服务"></a>2、微服务</h2><p>2014，martin fowler</p><p>微服务：架构风格（服务微化）</p><p>一个应用应该是一组小型服务；可以通过HTTP的方式进行互通；</p><p>单体应用：ALL IN ONE</p><p>微服务：每一个功能元素最终都是一个可独立替换和独立升级的软件单元；</p><p><a href="https://martinfowler.com/articles/microservices.html#MicroservicesAndSoa" target="_blank" rel="noopener">详细参照微服务文档</a></p><h2 id="3、环境准备"><a href="#3、环境准备" class="headerlink" title="3、环境准备"></a>3、环境准备</h2><p><a href="http://www.gulixueyuan.com/" target="_blank" rel="noopener">http://www.gulixueyuan.com/</a> 谷粒学院</p><p>环境约束</p><p>–jdk1.8：Spring Boot 推荐jdk1.7及以上；java version “1.8.0_112”</p><p>–maven3.x：maven 3.3以上版本；Apache Maven 3.3.9</p><p>–IntelliJIDEA2017：IntelliJ IDEA 2017.2.2 x64、STS</p><p>–SpringBoot 1.5.9.RELEASE：1.5.9；</p><p>统一环境；</p><h3 id="1、MAVEN设置；"><a href="#1、MAVEN设置；" class="headerlink" title="1、MAVEN设置；"></a>1、MAVEN设置；</h3><p>给maven 的settings.xml配置文件的profiles标签添加</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>profile</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>jdk-1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>activation</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>activeByDefault</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>activeByDefault</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>jdk</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>jdk</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>activation</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.source</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.source</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.target</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.target</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.compilerVersion</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.compilerVersion</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>profile</span><span class="token punctuation">></span></span></code></pre><h3 id="2、IDEA设置"><a href="#2、IDEA设置" class="headerlink" title="2、IDEA设置"></a>2、IDEA设置</h3><p>整合maven进来；</p><p><img src="images/%E6%90%9C%E7%8B%97%E6%88%AA%E5%9B%BE20180129151045.png" alt="idea设置"></p><p><img src="images/%E6%90%9C%E7%8B%97%E6%88%AA%E5%9B%BE20180129151112.png" alt="images/"></p><h2 id="4、Spring-Boot-HelloWorld"><a href="#4、Spring-Boot-HelloWorld" class="headerlink" title="4、Spring Boot HelloWorld"></a>4、Spring Boot HelloWorld</h2><p>一个功能：</p><p>浏览器发送hello请求，服务器接受请求并处理，响应Hello World字符串；</p><h3 id="1、创建一个maven工程；（jar）"><a href="#1、创建一个maven工程；（jar）" class="headerlink" title="1、创建一个maven工程；（jar）"></a>1、创建一个maven工程；（jar）</h3><h3 id="2、导入spring-boot相关的依赖"><a href="#2、导入spring-boot相关的依赖" class="headerlink" title="2、导入spring boot相关的依赖"></a>2、导入spring boot相关的依赖</h3><pre class=" language-xml"><code class="language-xml">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-parent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.5.9.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span></code></pre><h3 id="3、编写一个主程序；启动Spring-Boot应用"><a href="#3、编写一个主程序；启动Spring-Boot应用" class="headerlink" title="3、编写一个主程序；启动Spring Boot应用"></a>3、编写一个主程序；启动Spring Boot应用</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** *  @SpringBootApplication 来标注一个主程序类，说明这是一个Spring Boot应用 */</span><span class="token annotation punctuation">@SpringBootApplication</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloWorldMainApplication</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// Spring应用启动起来</span>        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>HelloWorldMainApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="4、编写相关的Controller、Service"><a href="#4、编写相关的Controller、Service" class="headerlink" title="4、编写相关的Controller、Service"></a>4、编写相关的Controller、Service</h3><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Controller</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@ResponseBody</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/hello"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Hello World!"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="5、运行主程序测试"><a href="#5、运行主程序测试" class="headerlink" title="5、运行主程序测试"></a>5、运行主程序测试</h3><h3 id="6、简化部署"><a href="#6、简化部署" class="headerlink" title="6、简化部署"></a>6、简化部署</h3><pre class=" language-xml"><code class="language-xml"> <span class="token comment" spellcheck="true">&lt;!-- 这个插件，可以将应用打包成一个可执行的jar包；--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span></code></pre><p>将这个应用打成jar包，直接使用java -jar的命令进行执行；</p><h2 id="5、Hello-World探究"><a href="#5、Hello-World探究" class="headerlink" title="5、Hello World探究"></a>5、Hello World探究</h2><h3 id="1、POM文件"><a href="#1、POM文件" class="headerlink" title="1、POM文件"></a>1、POM文件</h3><h4 id="1、父项目"><a href="#1、父项目" class="headerlink" title="1、父项目"></a>1、父项目</h4><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-parent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.5.9.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">></span></span>他的父项目是<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-dependencies<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.5.9.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>relativePath</span><span class="token punctuation">></span></span>../../spring-boot-dependencies<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>relativePath</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">></span></span>他来真正管理Spring Boot应用里面的所有依赖版本；</code></pre><p>Spring Boot的版本仲裁中心；</p><p>以后我们导入依赖默认是不需要写版本；（没有在dependencies里面管理的依赖自然需要声明版本号）</p><h4 id="2、启动器"><a href="#2、启动器" class="headerlink" title="2、启动器"></a>2、启动器</h4><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p><strong>spring-boot-starter</strong>-==web==：</p><p>​    spring-boot-starter：spring-boot场景启动器；帮我们导入了web模块正常运行所依赖的组件；</p><p>Spring Boot将所有的功能场景都抽取出来，做成一个个的starters（启动器），只需要在项目里面引入这些starter相关场景的所有依赖都会导入进来。要用什么功能就导入什么场景的启动器</p><h3 id="2、主程序类，主入口类"><a href="#2、主程序类，主入口类" class="headerlink" title="2、主程序类，主入口类"></a>2、主程序类，主入口类</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** *  @SpringBootApplication 来标注一个主程序类，说明这是一个Spring Boot应用 */</span><span class="token annotation punctuation">@SpringBootApplication</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloWorldMainApplication</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// Spring应用启动起来</span>        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>HelloWorldMainApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>@<strong>SpringBootApplication</strong>:    Spring Boot应用标注在某个类上说明这个类是SpringBoot的主配置类，SpringBoot就应该运行这个类的main方法来启动SpringBoot应用；</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span>ElementType<span class="token punctuation">.</span>TYPE<span class="token punctuation">)</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>RetentionPolicy<span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token annotation punctuation">@Documented</span><span class="token annotation punctuation">@Inherited</span><span class="token annotation punctuation">@SpringBootConfiguration</span><span class="token annotation punctuation">@EnableAutoConfiguration</span><span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span>excludeFilters <span class="token operator">=</span> <span class="token punctuation">{</span>      <span class="token annotation punctuation">@Filter</span><span class="token punctuation">(</span>type <span class="token operator">=</span> FilterType<span class="token punctuation">.</span>CUSTOM<span class="token punctuation">,</span> classes <span class="token operator">=</span> TypeExcludeFilter<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token annotation punctuation">@Filter</span><span class="token punctuation">(</span>type <span class="token operator">=</span> FilterType<span class="token punctuation">.</span>CUSTOM<span class="token punctuation">,</span> classes <span class="token operator">=</span> AutoConfigurationExcludeFilter<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">SpringBootApplication</span> <span class="token punctuation">{</span></code></pre><p>@<strong>SpringBootConfiguration</strong>:Spring Boot的配置类；</p><p>​        标注在某个类上，表示这是一个Spring Boot的配置类；</p><p>​        @<strong>Configuration</strong>:配置类上来标注这个注解；</p><p>​            配置类 —–  配置文件；配置类也是容器中的一个组件；@Component</p><p>@<strong>EnableAutoConfiguration</strong>：开启自动配置功能；</p><p>​        以前我们需要配置的东西，Spring Boot帮我们自动配置；@<strong>EnableAutoConfiguration</strong>告诉SpringBoot开启自动配置功能；这样自动配置才能生效；</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@AutoConfigurationPackage</span><span class="token annotation punctuation">@Import</span><span class="token punctuation">(</span>EnableAutoConfigurationImportSelector<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">EnableAutoConfiguration</span> <span class="token punctuation">{</span></code></pre><p>​          @<strong>AutoConfigurationPackage</strong>：自动配置包</p><p>​        @<strong>Import</strong>(AutoConfigurationPackages.Registrar.class)：</p><p>​        Spring的底层注解@Import，给容器中导入一个组件；导入的组件由AutoConfigurationPackages.Registrar.class；</p><p>==将主配置类（@SpringBootApplication标注的类）的所在包及下面所有子包里面的所有组件扫描到Spring容器；==</p><p>​    @<strong>Import</strong>(EnableAutoConfigurationImportSelector.class)；</p><p>​        给容器中导入组件？</p><p>​        <strong>EnableAutoConfigurationImportSelector</strong>：导入哪些组件的选择器；</p><p>​        将所有需要导入的组件以全类名的方式返回；这些组件就会被添加到容器中；</p><p>​        会给容器中导入非常多的自动配置类（xxxAutoConfiguration）；就是给容器中导入这个场景需要的所有组件，并配置好这些组件；        <img src="images/%E6%90%9C%E7%8B%97%E6%88%AA%E5%9B%BE20180129224104.png" alt="自动配置类"></p><p>有了自动配置类，免去了我们手动编写配置注入功能组件等的工作；</p><p>​        SpringFactoriesLoader.loadFactoryNames(EnableAutoConfiguration.class,classLoader)；</p><p>==Spring Boot在启动的时候从类路径下的META-INF/spring.factories中获取EnableAutoConfiguration指定的值，将这些值作为自动配置类导入到容器中，自动配置类就生效，帮我们进行自动配置工作；==以前我们需要自己配置的东西，自动配置类都帮我们；</p><p>J2EE的整体整合解决方案和自动配置都在spring-boot-autoconfigure-1.5.9.RELEASE.jar；</p><p>​        </p><p>==Spring注解版（谷粒学院）==</p><h2 id="6、使用Spring-Initializer快速创建Spring-Boot项目"><a href="#6、使用Spring-Initializer快速创建Spring-Boot项目" class="headerlink" title="6、使用Spring Initializer快速创建Spring Boot项目"></a>6、使用Spring Initializer快速创建Spring Boot项目</h2><h3 id="1、IDEA：使用-Spring-Initializer快速创建项目"><a href="#1、IDEA：使用-Spring-Initializer快速创建项目" class="headerlink" title="1、IDEA：使用 Spring Initializer快速创建项目"></a>1、IDEA：使用 Spring Initializer快速创建项目</h3><p>IDE都支持使用Spring的项目创建向导快速创建一个Spring Boot项目；</p><p>选择我们需要的模块；向导会联网创建Spring Boot项目；</p><p>默认生成的Spring Boot项目；</p><ul><li>主程序已经生成好了，我们只需要我们自己的逻辑</li><li>resources文件夹中目录结构<ul><li>static：保存所有的静态资源； js css  images；</li><li>templates：保存所有的模板页面；（Spring Boot默认jar包使用嵌入式的Tomcat，默认不支持JSP页面）；可以使用模板引擎（freemarker、thymeleaf）；</li><li>application.properties：Spring Boot应用的配置文件；可以修改一些默认设置；</li></ul></li></ul><h3 id="2、STS使用-Spring-Starter-Project快速创建项目"><a href="#2、STS使用-Spring-Starter-Project快速创建项目" class="headerlink" title="2、STS使用 Spring Starter Project快速创建项目"></a>2、STS使用 Spring Starter Project快速创建项目</h3><hr><h1 id="二、配置文件"><a href="#二、配置文件" class="headerlink" title="二、配置文件"></a>二、配置文件</h1><h2 id="1、配置文件"><a href="#1、配置文件" class="headerlink" title="1、配置文件"></a>1、配置文件</h2><p>SpringBoot使用一个全局的配置文件，配置文件名是固定的；</p><p>•application.properties</p><p>•application.yml</p><p>配置文件的作用：修改SpringBoot自动配置的默认值；SpringBoot在底层都给我们自动配置好；</p><p>YAML（YAML Ain’t Markup Language）</p><p>​    YAML  A Markup Language：是一个标记语言</p><p>​    YAML   isn’t Markup Language：不是一个标记语言；</p><p>标记语言：</p><p>​    以前的配置文件；大多都使用的是  <strong>xxxx.xml</strong>文件；</p><p>​    YAML：<strong>以数据为中心</strong>，比json、xml等更适合做配置文件；</p><p>​    YAML：配置例子</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8081</span></code></pre><p>​    XML：</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>server</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>port</span><span class="token punctuation">></span></span>8081<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>port</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>server</span><span class="token punctuation">></span></span></code></pre><h2 id="2、YAML语法："><a href="#2、YAML语法：" class="headerlink" title="2、YAML语法："></a>2、YAML语法：</h2><h3 id="1、基本语法"><a href="#1、基本语法" class="headerlink" title="1、基本语法"></a>1、基本语法</h3><p>k:(空格)v：表示一对键值对（空格必须有）；</p><p>以<strong>空格</strong>的缩进来控制层级关系；只要是左对齐的一列数据，都是同一个层级的</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>    <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8081</span>    <span class="token key atrule">path</span><span class="token punctuation">:</span> /hello</code></pre><p>属性和值也是大小写敏感；</p><h3 id="2、值的写法"><a href="#2、值的写法" class="headerlink" title="2、值的写法"></a>2、值的写法</h3><h4 id="字面量：普通的值（数字，字符串，布尔）"><a href="#字面量：普通的值（数字，字符串，布尔）" class="headerlink" title="字面量：普通的值（数字，字符串，布尔）"></a>字面量：普通的值（数字，字符串，布尔）</h4><p>​    k: v：字面直接来写；</p><p>​        字符串默认不用加上单引号或者双引号；</p><p>​        “”：双引号；不会转义字符串里面的特殊字符；特殊字符会作为本身想表示的意思</p><p>​                name:   “zhangsan \n lisi”：输出；zhangsan 换行  lisi</p><p>​        ‘’：单引号；会转义特殊字符，特殊字符最终只是一个普通的字符串数据</p><p>​                name:   ‘zhangsan \n lisi’：输出；zhangsan \n  lisi</p><h4 id="对象、Map（属性和值）（键值对）："><a href="#对象、Map（属性和值）（键值对）：" class="headerlink" title="对象、Map（属性和值）（键值对）："></a>对象、Map（属性和值）（键值对）：</h4><p>​    k: v：在下一行来写对象的属性和值的关系；注意缩进</p><p>​        对象还是k: v的方式</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">friends</span><span class="token punctuation">:</span>        <span class="token key atrule">lastName</span><span class="token punctuation">:</span> zhangsan        <span class="token key atrule">age</span><span class="token punctuation">:</span> <span class="token number">20</span></code></pre><p>行内写法：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">friends</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token key atrule">lastName</span><span class="token punctuation">:</span> zhangsan<span class="token punctuation">,</span><span class="token key atrule">age</span><span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">}</span></code></pre><h4 id="数组（List、Set）："><a href="#数组（List、Set）：" class="headerlink" title="数组（List、Set）："></a>数组（List、Set）：</h4><p>用- 值表示数组中的一个元素</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">pets</span><span class="token punctuation">:</span> <span class="token punctuation">-</span> cat <span class="token punctuation">-</span> dog <span class="token punctuation">-</span> pig</code></pre><p>行内写法</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">pets</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>cat<span class="token punctuation">,</span>dog<span class="token punctuation">,</span>pig<span class="token punctuation">]</span></code></pre><h2 id="3、配置文件值注入"><a href="#3、配置文件值注入" class="headerlink" title="3、配置文件值注入"></a>3、配置文件值注入</h2><p>配置文件</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">person</span><span class="token punctuation">:</span>    <span class="token key atrule">lastName</span><span class="token punctuation">:</span> hello    <span class="token key atrule">age</span><span class="token punctuation">:</span> <span class="token number">18</span>    <span class="token key atrule">boss</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>    <span class="token key atrule">birth</span><span class="token punctuation">:</span> 2017/12/12    <span class="token key atrule">maps</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token key atrule">k1</span><span class="token punctuation">:</span> v1<span class="token punctuation">,</span><span class="token key atrule">k2</span><span class="token punctuation">:</span> <span class="token number">12</span><span class="token punctuation">}</span>    <span class="token key atrule">lists</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> lisi      <span class="token punctuation">-</span> zhaoliu    <span class="token key atrule">dog</span><span class="token punctuation">:</span>      <span class="token key atrule">name</span><span class="token punctuation">:</span> 小狗      <span class="token key atrule">age</span><span class="token punctuation">:</span> <span class="token number">12</span></code></pre><p>javaBean：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 将配置文件中配置的每一个属性的值，映射到这个组件中 * @ConfigurationProperties：告诉SpringBoot将本类中的所有属性和配置文件中相关的配置进行绑定； *      prefix = "person"：配置文件中哪个下面的所有属性进行一一映射 * * 只有这个组件是容器中的组件，才能容器提供的@ConfigurationProperties功能； * */</span><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"person"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String lastName<span class="token punctuation">;</span>    <span class="token keyword">private</span> Integer age<span class="token punctuation">;</span>    <span class="token keyword">private</span> Boolean boss<span class="token punctuation">;</span>    <span class="token keyword">private</span> Date birth<span class="token punctuation">;</span>    <span class="token keyword">private</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Object<span class="token operator">></span> maps<span class="token punctuation">;</span>    <span class="token keyword">private</span> List<span class="token operator">&lt;</span>Object<span class="token operator">></span> lists<span class="token punctuation">;</span>    <span class="token keyword">private</span> Dog dog<span class="token punctuation">;</span></code></pre><p>我们可以导入配置文件处理器，以后编写配置就有提示了</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--导入配置文件处理器，配置文件进行绑定就会有提示--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-configuration-processor<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><h4 id="1、properties配置文件在idea中默认utf-8可能会乱码"><a href="#1、properties配置文件在idea中默认utf-8可能会乱码" class="headerlink" title="1、properties配置文件在idea中默认utf-8可能会乱码"></a>1、properties配置文件在idea中默认utf-8可能会乱码</h4><p>调整</p><p><img src="images/%E6%90%9C%E7%8B%97%E6%88%AA%E5%9B%BE20180130161620.png" alt="idea配置乱码"></p><h4 id="2、-Value获取值和-ConfigurationProperties获取值比较"><a href="#2、-Value获取值和-ConfigurationProperties获取值比较" class="headerlink" title="2、@Value获取值和@ConfigurationProperties获取值比较"></a>2、@Value获取值和@ConfigurationProperties获取值比较</h4><table><thead><tr><th></th><th>@ConfigurationProperties</th><th>@Value</th></tr></thead><tbody><tr><td>功能</td><td>批量注入配置文件中的属性</td><td>一个个指定</td></tr><tr><td>松散绑定（松散语法）</td><td>支持</td><td>不支持</td></tr><tr><td>SpEL</td><td>不支持</td><td>支持</td></tr><tr><td>JSR303数据校验</td><td>支持</td><td>不支持</td></tr><tr><td>复杂类型封装</td><td>支持</td><td>不支持</td></tr></tbody></table><p>配置文件yml还是properties他们都能获取到值；</p><p>如果说，我们只是在某个业务逻辑中需要获取一下配置文件中的某项值，使用@Value；</p><p>如果说，我们专门编写了一个javaBean来和配置文件进行映射，我们就直接使用@ConfigurationProperties；</p><h4 id="3、配置文件注入值数据校验"><a href="#3、配置文件注入值数据校验" class="headerlink" title="3、配置文件注入值数据校验"></a>3、配置文件注入值数据校验</h4><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"person"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Validated</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * &lt;bean class="Person">     *      &lt;property name="lastName" value="字面量/${key}从环境变量、配置文件中获取值/#{SpEL}">&lt;/property>     * &lt;bean/>     */</span>   <span class="token comment" spellcheck="true">//lastName必须是邮箱格式</span>    <span class="token annotation punctuation">@Email</span>    <span class="token comment" spellcheck="true">//@Value("${person.last-name}")</span>    <span class="token keyword">private</span> String lastName<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//@Value("#{11*2}")</span>    <span class="token keyword">private</span> Integer age<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//@Value("true")</span>    <span class="token keyword">private</span> Boolean boss<span class="token punctuation">;</span>    <span class="token keyword">private</span> Date birth<span class="token punctuation">;</span>    <span class="token keyword">private</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Object<span class="token operator">></span> maps<span class="token punctuation">;</span>    <span class="token keyword">private</span> List<span class="token operator">&lt;</span>Object<span class="token operator">></span> lists<span class="token punctuation">;</span>    <span class="token keyword">private</span> Dog dog<span class="token punctuation">;</span></code></pre><h4 id="4、-PropertySource-amp-ImportResource-amp-Bean"><a href="#4、-PropertySource-amp-ImportResource-amp-Bean" class="headerlink" title="4、@PropertySource&amp;@ImportResource&amp;@Bean"></a>4、@PropertySource&amp;@ImportResource&amp;@Bean</h4><p>@<strong>PropertySource</strong>：加载指定的配置文件；</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 将配置文件中配置的每一个属性的值，映射到这个组件中 * @ConfigurationProperties：告诉SpringBoot将本类中的所有属性和配置文件中相关的配置进行绑定； *      prefix = "person"：配置文件中哪个下面的所有属性进行一一映射 * * 只有这个组件是容器中的组件，才能容器提供的@ConfigurationProperties功能； *  @ConfigurationProperties(prefix = "person")默认从全局配置文件中获取值； * */</span><span class="token annotation punctuation">@PropertySource</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"classpath:person.properties"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"person"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//@Validated</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * &lt;bean class="Person">     *      &lt;property name="lastName" value="字面量/${key}从环境变量、配置文件中获取值/#{SpEL}">&lt;/property>     * &lt;bean/>     */</span>   <span class="token comment" spellcheck="true">//lastName必须是邮箱格式</span>   <span class="token comment" spellcheck="true">// @Email</span>    <span class="token comment" spellcheck="true">//@Value("${person.last-name}")</span>    <span class="token keyword">private</span> String lastName<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//@Value("#{11*2}")</span>    <span class="token keyword">private</span> Integer age<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//@Value("true")</span>    <span class="token keyword">private</span> Boolean boss<span class="token punctuation">;</span></code></pre><p>@<strong>ImportResource</strong>：导入Spring的配置文件，让配置文件里面的内容生效；</p><p>Spring Boot里面没有Spring的配置文件，我们自己编写的配置文件，也不能自动识别；</p><p>想让Spring的配置文件生效，加载进来；@<strong>ImportResource</strong>标注在一个配置类上</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@ImportResource</span><span class="token punctuation">(</span>locations <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"classpath:beans.xml"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>导入Spring的配置文件让其生效</code></pre><p>不来编写Spring的配置文件</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>helloService<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.atguigu.springboot.service.HelloService<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre><p>SpringBoot推荐给容器中添加组件的方式；推荐使用全注解的方式</p><p>1、配置类<strong>@Configuration</strong>——&gt;Spring配置文件</p><p>2、使用<strong>@Bean</strong>给容器中添加组件</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @Configuration：指明当前类是一个配置类；就是来替代之前的Spring配置文件 * * 在配置文件中用&lt;bean>&lt;bean/>标签添加组件 * */</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyAppConfig</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//将方法的返回值添加到容器中；容器中这个组件默认的id就是方法名</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> HelloService <span class="token function">helloService02</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"配置类@Bean给容器中添加组件了..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">HelloService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>##4、配置文件占位符</p><h3 id="1、随机数"><a href="#1、随机数" class="headerlink" title="1、随机数"></a>1、随机数</h3><pre class=" language-java"><code class="language-java">$<span class="token punctuation">{</span>random<span class="token punctuation">.</span>value<span class="token punctuation">}</span>、$<span class="token punctuation">{</span>random<span class="token punctuation">.</span><span class="token keyword">int</span><span class="token punctuation">}</span>、$<span class="token punctuation">{</span>random<span class="token punctuation">.</span><span class="token keyword">long</span><span class="token punctuation">}</span>$<span class="token punctuation">{</span>random<span class="token punctuation">.</span><span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">}</span>、$<span class="token punctuation">{</span>random<span class="token punctuation">.</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">,</span><span class="token number">65536</span><span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre><h3 id="2、占位符获取之前配置的值，如果没有可以是用-指定默认值"><a href="#2、占位符获取之前配置的值，如果没有可以是用-指定默认值" class="headerlink" title="2、占位符获取之前配置的值，如果没有可以是用:指定默认值"></a>2、占位符获取之前配置的值，如果没有可以是用:指定默认值</h3><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">person.last-name</span><span class="token punctuation">=</span><span class="token attr-value">张三${random.uuid}</span><span class="token attr-name">person.age</span><span class="token punctuation">=</span><span class="token attr-value">${random.int}</span><span class="token attr-name">person.birth</span><span class="token punctuation">=</span><span class="token attr-value">2017/12/15</span><span class="token attr-name">person.boss</span><span class="token punctuation">=</span><span class="token attr-value">false</span><span class="token attr-name">person.maps.k1</span><span class="token punctuation">=</span><span class="token attr-value">v1</span><span class="token attr-name">person.maps.k2</span><span class="token punctuation">=</span><span class="token attr-value">14</span><span class="token attr-name">person.lists</span><span class="token punctuation">=</span><span class="token attr-value">a,b,c</span><span class="token attr-name">person.dog.name</span><span class="token punctuation">=</span><span class="token attr-value">${person.hello:hello}_dog</span><span class="token attr-name">person.dog.age</span><span class="token punctuation">=</span><span class="token attr-value">15</span></code></pre><h2 id="5、Profile"><a href="#5、Profile" class="headerlink" title="5、Profile"></a>5、Profile</h2><h3 id="1、多Profile文件"><a href="#1、多Profile文件" class="headerlink" title="1、多Profile文件"></a>1、多Profile文件</h3><p>我们在主配置文件编写的时候，文件名可以是   application-{profile}.properties/yml</p><p>默认使用application.properties的配置；</p><h3 id="2、yml支持多文档块方式"><a href="#2、yml支持多文档块方式" class="headerlink" title="2、yml支持多文档块方式"></a>2、yml支持多文档块方式</h3><pre class=" language-yml"><code class="language-yml">server:  port: 8081spring:  profiles:    active: prod---server:  port: 8083spring:  profiles: dev---server:  port: 8084spring:  profiles: prod  #指定属于哪个环境</code></pre><h3 id="3、激活指定profile"><a href="#3、激活指定profile" class="headerlink" title="3、激活指定profile"></a>3、激活指定profile</h3><p>​    1、在配置文件中指定  spring.profiles.active=dev</p><p>​    2、命令行：</p><p>​        java -jar spring-boot-02-config-0.0.1-SNAPSHOT.jar –spring.profiles.active=dev；</p><p>​        可以直接在测试的时候，配置传入命令行参数</p><p>​    3、虚拟机参数；</p><p>​        -Dspring.profiles.active=dev</p><h2 id="6、配置文件加载位置"><a href="#6、配置文件加载位置" class="headerlink" title="6、配置文件加载位置"></a>6、配置文件加载位置</h2><p>springboot 启动会扫描以下位置的application.properties或者application.yml文件作为Spring boot的默认配置文件</p><p>–file:./config/</p><p>–file:./</p><p>–classpath:/config/</p><p>–classpath:/</p><p>优先级由高到底，高优先级的配置会覆盖低优先级的配置；</p><p>SpringBoot会从这四个位置全部加载主配置文件；<strong>互补配置</strong>；</p><p>==我们还可以通过spring.config.location来改变默认的配置文件位置==</p><p><strong>项目打包好以后，我们可以使用命令行参数的形式，启动项目的时候来指定配置文件的新位置；指定配置文件和默认加载的这些配置文件共同起作用形成互补配置；</strong></p><p>java -jar spring-boot-02-config-02-0.0.1-SNAPSHOT.jar –spring.config.location=G:/application.properties</p><h2 id="7、外部配置加载顺序"><a href="#7、外部配置加载顺序" class="headerlink" title="7、外部配置加载顺序"></a>7、外部配置加载顺序</h2><p><strong>==SpringBoot也可以从以下位置加载配置； 优先级从高到低；高优先级的配置覆盖低优先级的配置，所有的配置会形成互补配置==</strong></p><p><strong>1.命令行参数</strong></p><p>所有的配置都可以在命令行上进行指定</p><p>java -jar spring-boot-02-config-02-0.0.1-SNAPSHOT.jar –server.port=8087  –server.context-path=/abc</p><p>多个配置用空格分开； –配置项=值</p><p>2.来自java:comp/env的JNDI属性</p><p>3.Java系统属性（System.getProperties()）</p><p>4.操作系统环境变量</p><p>5.RandomValuePropertySource配置的random.*属性值</p><p>==<strong>由jar包外向jar包内进行寻找；</strong>==</p><p>==<strong>优先加载带profile</strong>==</p><p><strong>6.jar包外部的application-{profile}.properties或application.yml(带spring.profile)配置文件</strong></p><p><strong>7.jar包内部的application-{profile}.properties或application.yml(带spring.profile)配置文件</strong></p><p>==<strong>再来加载不带profile</strong>==</p><p><strong>8.jar包外部的application.properties或application.yml(不带spring.profile)配置文件</strong></p><p><strong>9.jar包内部的application.properties或application.yml(不带spring.profile)配置文件</strong></p><p>10.@Configuration注解类上的@PropertySource</p><p>11.通过SpringApplication.setDefaultProperties指定的默认属性</p><p>所有支持的配置加载来源；</p><p><a href="https://docs.spring.io/spring-boot/docs/1.5.9.RELEASE/reference/htmlsingle/#boot-features-external-config" target="_blank" rel="noopener">参考官方文档</a></p><h2 id="8、自动配置原理"><a href="#8、自动配置原理" class="headerlink" title="8、自动配置原理"></a>8、自动配置原理</h2><p>配置文件到底能写什么？怎么写？自动配置原理；</p><p><a href="https://docs.spring.io/spring-boot/docs/1.5.9.RELEASE/reference/htmlsingle/#common-application-properties" target="_blank" rel="noopener">配置文件能配置的属性参照</a></p><h3 id="1、自动配置原理："><a href="#1、自动配置原理：" class="headerlink" title="1、自动配置原理："></a>1、<strong>自动配置原理：</strong></h3><p>1）、SpringBoot启动的时候加载主配置类，开启了自动配置功能 ==@EnableAutoConfiguration==</p><p><strong>2）、@EnableAutoConfiguration 作用：</strong></p><ul><li>利用EnableAutoConfigurationImportSelector给容器中导入一些组件？</li></ul><ul><li><p>可以查看selectImports()方法的内容；</p></li><li><p>List<String> configurations = getCandidateConfigurations(annotationMetadata,      attributes);获取候选的配置</p><ul><li><pre class=" language-java"><code class="language-java">SpringFactoriesLoader<span class="token punctuation">.</span><span class="token function">loadFactoryNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span>扫描所有jar包类路径下  META<span class="token operator">-</span>INF<span class="token operator">/</span>spring<span class="token punctuation">.</span>factories把扫描到的这些文件的内容包装成properties对象从properties中获取到EnableAutoConfiguration<span class="token punctuation">.</span><span class="token keyword">class</span>类（类名）对应的值，然后把他们添加在容器中</code></pre><p>​</p></li></ul></li></ul><p><strong>==将 类路径下  META-INF/spring.factories 里面配置的所有EnableAutoConfiguration的值加入到了容器中；==</strong></p><pre class=" language-properties"><code class="language-properties"><span class="token comment" spellcheck="true"># Auto Configure</span><span class="token attr-name">org.springframework.boot.autoconfigure.EnableAutoConfiguration</span><span class="token punctuation">=</span><span class="token attr-value">\org.springframework.boot.autoconfigure.admin.SpringApplicationAdminJmxAutoConfiguration,\org.springframework.boot.autoconfigure.aop.AopAutoConfiguration,\org.springframework.boot.autoconfigure.amqp.RabbitAutoConfiguration,\org.springframework.boot.autoconfigure.batch.BatchAutoConfiguration,\org.springframework.boot.autoconfigure.cache.CacheAutoConfiguration,\org.springframework.boot.autoconfigure.cassandra.CassandraAutoConfiguration,\org.springframework.boot.autoconfigure.cloud.CloudAutoConfiguration,\org.springframework.boot.autoconfigure.context.ConfigurationPropertiesAutoConfiguration,\org.springframework.boot.autoconfigure.context.MessageSourceAutoConfiguration,\org.springframework.boot.autoconfigure.context.PropertyPlaceholderAutoConfiguration,\org.springframework.boot.autoconfigure.couchbase.CouchbaseAutoConfiguration,\org.springframework.boot.autoconfigure.dao.PersistenceExceptionTranslationAutoConfiguration,\org.springframework.boot.autoconfigure.data.cassandra.CassandraDataAutoConfiguration,\org.springframework.boot.autoconfigure.data.cassandra.CassandraRepositoriesAutoConfiguration,\org.springframework.boot.autoconfigure.data.couchbase.CouchbaseDataAutoConfiguration,\org.springframework.boot.autoconfigure.data.couchbase.CouchbaseRepositoriesAutoConfiguration,\org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchAutoConfiguration,\org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchDataAutoConfiguration,\org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchRepositoriesAutoConfiguration,\org.springframework.boot.autoconfigure.data.jpa.JpaRepositoriesAutoConfiguration,\org.springframework.boot.autoconfigure.data.ldap.LdapDataAutoConfiguration,\org.springframework.boot.autoconfigure.data.ldap.LdapRepositoriesAutoConfiguration,\org.springframework.boot.autoconfigure.data.mongo.MongoDataAutoConfiguration,\org.springframework.boot.autoconfigure.data.mongo.MongoRepositoriesAutoConfiguration,\org.springframework.boot.autoconfigure.data.neo4j.Neo4jDataAutoConfiguration,\org.springframework.boot.autoconfigure.data.neo4j.Neo4jRepositoriesAutoConfiguration,\org.springframework.boot.autoconfigure.data.solr.SolrRepositoriesAutoConfiguration,\org.springframework.boot.autoconfigure.data.redis.RedisAutoConfiguration,\org.springframework.boot.autoconfigure.data.redis.RedisRepositoriesAutoConfiguration,\org.springframework.boot.autoconfigure.data.rest.RepositoryRestMvcAutoConfiguration,\org.springframework.boot.autoconfigure.data.web.SpringDataWebAutoConfiguration,\org.springframework.boot.autoconfigure.elasticsearch.jest.JestAutoConfiguration,\org.springframework.boot.autoconfigure.freemarker.FreeMarkerAutoConfiguration,\org.springframework.boot.autoconfigure.gson.GsonAutoConfiguration,\org.springframework.boot.autoconfigure.h2.H2ConsoleAutoConfiguration,\org.springframework.boot.autoconfigure.hateoas.HypermediaAutoConfiguration,\org.springframework.boot.autoconfigure.hazelcast.HazelcastAutoConfiguration,\org.springframework.boot.autoconfigure.hazelcast.HazelcastJpaDependencyAutoConfiguration,\org.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration,\org.springframework.boot.autoconfigure.integration.IntegrationAutoConfiguration,\org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration,\org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration,\org.springframework.boot.autoconfigure.jdbc.JdbcTemplateAutoConfiguration,\org.springframework.boot.autoconfigure.jdbc.JndiDataSourceAutoConfiguration,\org.springframework.boot.autoconfigure.jdbc.XADataSourceAutoConfiguration,\org.springframework.boot.autoconfigure.jdbc.DataSourceTransactionManagerAutoConfiguration,\org.springframework.boot.autoconfigure.jms.JmsAutoConfiguration,\org.springframework.boot.autoconfigure.jmx.JmxAutoConfiguration,\org.springframework.boot.autoconfigure.jms.JndiConnectionFactoryAutoConfiguration,\org.springframework.boot.autoconfigure.jms.activemq.ActiveMQAutoConfiguration,\org.springframework.boot.autoconfigure.jms.artemis.ArtemisAutoConfiguration,\org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration,\org.springframework.boot.autoconfigure.groovy.template.GroovyTemplateAutoConfiguration,\org.springframework.boot.autoconfigure.jersey.JerseyAutoConfiguration,\org.springframework.boot.autoconfigure.jooq.JooqAutoConfiguration,\org.springframework.boot.autoconfigure.kafka.KafkaAutoConfiguration,\org.springframework.boot.autoconfigure.ldap.embedded.EmbeddedLdapAutoConfiguration,\org.springframework.boot.autoconfigure.ldap.LdapAutoConfiguration,\org.springframework.boot.autoconfigure.liquibase.LiquibaseAutoConfiguration,\org.springframework.boot.autoconfigure.mail.MailSenderAutoConfiguration,\org.springframework.boot.autoconfigure.mail.MailSenderValidatorAutoConfiguration,\org.springframework.boot.autoconfigure.mobile.DeviceResolverAutoConfiguration,\org.springframework.boot.autoconfigure.mobile.DeviceDelegatingViewResolverAutoConfiguration,\org.springframework.boot.autoconfigure.mobile.SitePreferenceAutoConfiguration,\org.springframework.boot.autoconfigure.mongo.embedded.EmbeddedMongoAutoConfiguration,\org.springframework.boot.autoconfigure.mongo.MongoAutoConfiguration,\org.springframework.boot.autoconfigure.mustache.MustacheAutoConfiguration,\org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaAutoConfiguration,\org.springframework.boot.autoconfigure.reactor.ReactorAutoConfiguration,\org.springframework.boot.autoconfigure.security.SecurityAutoConfiguration,\org.springframework.boot.autoconfigure.security.SecurityFilterAutoConfiguration,\org.springframework.boot.autoconfigure.security.FallbackWebSecurityAutoConfiguration,\org.springframework.boot.autoconfigure.security.oauth2.OAuth2AutoConfiguration,\org.springframework.boot.autoconfigure.sendgrid.SendGridAutoConfiguration,\org.springframework.boot.autoconfigure.session.SessionAutoConfiguration,\org.springframework.boot.autoconfigure.social.SocialWebAutoConfiguration,\org.springframework.boot.autoconfigure.social.FacebookAutoConfiguration,\org.springframework.boot.autoconfigure.social.LinkedInAutoConfiguration,\org.springframework.boot.autoconfigure.social.TwitterAutoConfiguration,\org.springframework.boot.autoconfigure.solr.SolrAutoConfiguration,\org.springframework.boot.autoconfigure.thymeleaf.ThymeleafAutoConfiguration,\org.springframework.boot.autoconfigure.transaction.TransactionAutoConfiguration,\org.springframework.boot.autoconfigure.transaction.jta.JtaAutoConfiguration,\org.springframework.boot.autoconfigure.validation.ValidationAutoConfiguration,\org.springframework.boot.autoconfigure.web.DispatcherServletAutoConfiguration,\org.springframework.boot.autoconfigure.web.EmbeddedServletContainerAutoConfiguration,\org.springframework.boot.autoconfigure.web.ErrorMvcAutoConfiguration,\org.springframework.boot.autoconfigure.web.HttpEncodingAutoConfiguration,\org.springframework.boot.autoconfigure.web.HttpMessageConvertersAutoConfiguration,\org.springframework.boot.autoconfigure.web.MultipartAutoConfiguration,\org.springframework.boot.autoconfigure.web.ServerPropertiesAutoConfiguration,\org.springframework.boot.autoconfigure.web.WebClientAutoConfiguration,\org.springframework.boot.autoconfigure.web.WebMvcAutoConfiguration,\org.springframework.boot.autoconfigure.websocket.WebSocketAutoConfiguration,\org.springframework.boot.autoconfigure.websocket.WebSocketMessagingAutoConfiguration,\org.springframework.boot.autoconfigure.webservices.WebServicesAutoConfiguration</span></code></pre><p>每一个这样的  xxxAutoConfiguration类都是容器中的一个组件，都加入到容器中；用他们来做自动配置；</p><p>3）、每一个自动配置类进行自动配置功能；</p><p>4）、以<strong>HttpEncodingAutoConfiguration（Http编码自动配置）</strong>为例解释自动配置原理；</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span>   <span class="token comment" spellcheck="true">//表示这是一个配置类，以前编写的配置文件一样，也可以给容器中添加组件</span><span class="token annotation punctuation">@EnableConfigurationProperties</span><span class="token punctuation">(</span>HttpEncodingProperties<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//启动指定类的ConfigurationProperties功能；将配置文件中对应的值和HttpEncodingProperties绑定起来；并把HttpEncodingProperties加入到ioc容器中</span><span class="token annotation punctuation">@ConditionalOnWebApplication</span> <span class="token comment" spellcheck="true">//Spring底层@Conditional注解（Spring注解版），根据不同的条件，如果满足指定的条件，整个配置类里面的配置就会生效；    判断当前应用是否是web应用，如果是，当前配置类生效</span><span class="token annotation punctuation">@ConditionalOnClass</span><span class="token punctuation">(</span>CharacterEncodingFilter<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//判断当前项目有没有这个类CharacterEncodingFilter；SpringMVC中进行乱码解决的过滤器；</span><span class="token annotation punctuation">@ConditionalOnProperty</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"spring.http.encoding"</span><span class="token punctuation">,</span> value <span class="token operator">=</span> <span class="token string">"enabled"</span><span class="token punctuation">,</span> matchIfMissing <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//判断配置文件中是否存在某个配置  spring.http.encoding.enabled；如果不存在，判断也是成立的</span><span class="token comment" spellcheck="true">//即使我们配置文件中不配置pring.http.encoding.enabled=true，也是默认生效的；</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HttpEncodingAutoConfiguration</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//他已经和SpringBoot的配置文件映射了</span>      <span class="token keyword">private</span> <span class="token keyword">final</span> HttpEncodingProperties properties<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//只有一个有参构造器的情况下，参数的值就会从容器中拿</span>      <span class="token keyword">public</span> <span class="token function">HttpEncodingAutoConfiguration</span><span class="token punctuation">(</span>HttpEncodingProperties properties<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>properties <span class="token operator">=</span> properties<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>   <span class="token comment" spellcheck="true">//给容器中添加一个组件，这个组件的某些值需要从properties中获取</span>    <span class="token annotation punctuation">@ConditionalOnMissingBean</span><span class="token punctuation">(</span>CharacterEncodingFilter<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//判断容器没有这个组件？</span>    <span class="token keyword">public</span> CharacterEncodingFilter <span class="token function">characterEncodingFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        CharacterEncodingFilter filter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OrderedCharacterEncodingFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        filter<span class="token punctuation">.</span><span class="token function">setEncoding</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>properties<span class="token punctuation">.</span><span class="token function">getCharset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        filter<span class="token punctuation">.</span><span class="token function">setForceRequestEncoding</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>properties<span class="token punctuation">.</span><span class="token function">shouldForce</span><span class="token punctuation">(</span>Type<span class="token punctuation">.</span>REQUEST<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        filter<span class="token punctuation">.</span><span class="token function">setForceResponseEncoding</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>properties<span class="token punctuation">.</span><span class="token function">shouldForce</span><span class="token punctuation">(</span>Type<span class="token punctuation">.</span>RESPONSE<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> filter<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>根据当前不同的条件判断，决定这个配置类是否生效？</p><p>一但这个配置类生效；这个配置类就会给容器中添加各种组件；这些组件的属性是从对应的properties类中获取的，这些类里面的每一个属性又是和配置文件绑定的；</p><p>5）、所有在配置文件中能配置的属性都是在xxxxProperties类中封装者‘；配置文件能配置什么就可以参照某个功能对应的这个属性类</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"spring.http.encoding"</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//从配置文件中获取指定的值和bean的属性进行绑定</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HttpEncodingProperties</span> <span class="token punctuation">{</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Charset DEFAULT_CHARSET <span class="token operator">=</span> Charset<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>精髓：</strong></p><p>​    <strong>1）、SpringBoot启动会加载大量的自动配置类</strong></p><p>​    <strong>2）、我们看我们需要的功能有没有SpringBoot默认写好的自动配置类；</strong></p><p>​    <strong>3）、我们再来看这个自动配置类中到底配置了哪些组件；（只要我们要用的组件有，我们就不需要再来配置了）</strong></p><p>​    <strong>4）、给容器中自动配置类添加组件的时候，会从properties类中获取某些属性。我们就可以在配置文件中指定这些属性的值；</strong></p><p>xxxxAutoConfigurartion：自动配置类；</p><p>给容器中添加组件</p><p>xxxxProperties:封装配置文件中相关属性；</p><h3 id="2、细节"><a href="#2、细节" class="headerlink" title="2、细节"></a>2、细节</h3><h4 id="1、-Conditional派生注解（Spring注解版原生的-Conditional作用）"><a href="#1、-Conditional派生注解（Spring注解版原生的-Conditional作用）" class="headerlink" title="1、@Conditional派生注解（Spring注解版原生的@Conditional作用）"></a>1、@Conditional派生注解（Spring注解版原生的@Conditional作用）</h4><p>作用：必须是@Conditional指定的条件成立，才给容器中添加组件，配置配里面的所有内容才生效；</p><table><thead><tr><th>@Conditional扩展注解</th><th>作用（判断是否满足当前指定条件）</th></tr></thead><tbody><tr><td>@ConditionalOnJava</td><td>系统的java版本是否符合要求</td></tr><tr><td>@ConditionalOnBean</td><td>容器中存在指定Bean；</td></tr><tr><td>@ConditionalOnMissingBean</td><td>容器中不存在指定Bean；</td></tr><tr><td>@ConditionalOnExpression</td><td>满足SpEL表达式指定</td></tr><tr><td>@ConditionalOnClass</td><td>系统中有指定的类</td></tr><tr><td>@ConditionalOnMissingClass</td><td>系统中没有指定的类</td></tr><tr><td>@ConditionalOnSingleCandidate</td><td>容器中只有一个指定的Bean，或者这个Bean是首选Bean</td></tr><tr><td>@ConditionalOnProperty</td><td>系统中指定的属性是否有指定的值</td></tr><tr><td>@ConditionalOnResource</td><td>类路径下是否存在指定资源文件</td></tr><tr><td>@ConditionalOnWebApplication</td><td>当前是web环境</td></tr><tr><td>@ConditionalOnNotWebApplication</td><td>当前不是web环境</td></tr><tr><td>@ConditionalOnJndi</td><td>JNDI存在指定项</td></tr></tbody></table><p><strong>自动配置类必须在一定的条件下才能生效；</strong></p><p>我们怎么知道哪些自动配置类生效；</p><p><strong>==我们可以通过启用  debug=true属性；来让控制台打印自动配置报告==</strong>，这样我们就可以很方便的知道哪些自动配置类生效；</p><pre class=" language-java"><code class="language-java"><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>AUTO<span class="token operator">-</span>CONFIGURATION REPORT<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>Positive matches<span class="token operator">:</span>（自动配置类启用的）<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>   DispatcherServletAutoConfiguration matched<span class="token operator">:</span>      <span class="token operator">-</span> <span class="token annotation punctuation">@ConditionalOnClass</span> found required <span class="token keyword">class</span> <span class="token string">'org.springframework.web.servlet.DispatcherServlet'</span><span class="token punctuation">;</span> <span class="token annotation punctuation">@ConditionalOnMissingClass</span> did not find unwanted <span class="token keyword">class</span> <span class="token punctuation">(</span>OnClassCondition<span class="token punctuation">)</span>      <span class="token operator">-</span> <span class="token annotation punctuation">@ConditionalOnWebApplication</span> <span class="token punctuation">(</span>required<span class="token punctuation">)</span> found <span class="token function">StandardServletEnvironment</span> <span class="token punctuation">(</span>OnWebApplicationCondition<span class="token punctuation">)</span>Negative matches<span class="token operator">:</span>（没有启动，没有匹配成功的自动配置类）<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>   ActiveMQAutoConfiguration<span class="token operator">:</span>      Did not match<span class="token operator">:</span>         <span class="token operator">-</span> <span class="token annotation punctuation">@ConditionalOnClass</span> did not find required classes <span class="token string">'javax.jms.ConnectionFactory'</span><span class="token punctuation">,</span> <span class="token string">'org.apache.activemq.ActiveMQConnectionFactory'</span> <span class="token punctuation">(</span>OnClassCondition<span class="token punctuation">)</span>   AopAutoConfiguration<span class="token operator">:</span>      Did not match<span class="token operator">:</span>         <span class="token operator">-</span> <span class="token annotation punctuation">@ConditionalOnClass</span> did not find required classes <span class="token string">'org.aspectj.lang.annotation.Aspect'</span><span class="token punctuation">,</span> <span class="token string">'org.aspectj.lang.reflect.Advice'</span> <span class="token punctuation">(</span>OnClassCondition<span class="token punctuation">)</span></code></pre><h1 id="三、日志"><a href="#三、日志" class="headerlink" title="三、日志"></a>三、日志</h1><h2 id="1、日志框架"><a href="#1、日志框架" class="headerlink" title="1、日志框架"></a>1、日志框架</h2><p> 小张；开发一个大型系统；</p><p>​        1、System.out.println(“”)；将关键数据打印在控制台；去掉？写在一个文件？</p><p>​        2、框架来记录系统的一些运行时信息；日志框架 ；  zhanglogging.jar；</p><p>​        3、高大上的几个功能？异步模式？自动归档？xxxx？  zhanglogging-good.jar？</p><p>​        4、将以前框架卸下来？换上新的框架，重新修改之前相关的API；zhanglogging-prefect.jar；</p><p>​        5、JDBC—数据库驱动；</p><p>​            写了一个统一的接口层；日志门面（日志的一个抽象层）；logging-abstract.jar；</p><p>​            给项目中导入具体的日志实现就行了；我们之前的日志框架都是实现的抽象层；</p><p><strong>市面上的日志框架；</strong></p><p>JUL、JCL、Jboss-logging、logback、log4j、log4j2、slf4j….</p><table><thead><tr><th>日志门面  （日志的抽象层）</th><th>日志实现</th></tr></thead><tbody><tr><td><del>JCL（Jakarta  Commons Logging）</del>    SLF4j（Simple  Logging Facade for Java）    <strong><del>jboss-logging</del></strong></td><td>Log4j  JUL（java.util.logging）  Log4j2  <strong>Logback</strong></td></tr></tbody></table><p>左边选一个门面（抽象层）、右边来选一个实现；</p><p>日志门面：  SLF4J；</p><p>日志实现：Logback；</p><p>SpringBoot：底层是Spring框架，Spring框架默认是用JCL；‘</p><p>​    <strong>==SpringBoot选用 SLF4j和logback；==</strong></p><h2 id="2、SLF4j使用"><a href="#2、SLF4j使用" class="headerlink" title="2、SLF4j使用"></a>2、SLF4j使用</h2><h3 id="1、如何在系统中使用SLF4j-https-www-slf4j-org"><a href="#1、如何在系统中使用SLF4j-https-www-slf4j-org" class="headerlink" title="1、如何在系统中使用SLF4j   https://www.slf4j.org"></a>1、如何在系统中使用SLF4j   <a href="https://www.slf4j.org" target="_blank" rel="noopener">https://www.slf4j.org</a></h3><p>以后开发的时候，日志记录方法的调用，不应该来直接调用日志的实现类，而是调用日志抽象层里面的方法；</p><p>给系统里面导入slf4j的jar和  logback的实现jar</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>Logger<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>LoggerFactory<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloWorld</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Logger logger <span class="token operator">=</span> LoggerFactory<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>HelloWorld<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"Hello World"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>图示；</p><p><img src="images/concrete-bindings.png" alt="images/concrete-bindings.png"></p><p>每一个日志的实现框架都有自己的配置文件。使用slf4j以后，<strong>配置文件还是做成日志实现框架自己本身的配置文件；</strong></p><h3 id="2、遗留问题"><a href="#2、遗留问题" class="headerlink" title="2、遗留问题"></a>2、遗留问题</h3><p>a（slf4j+logback）: Spring（commons-logging）、Hibernate（jboss-logging）、MyBatis、xxxx</p><p>统一日志记录，即使是别的框架和我一起统一使用slf4j进行输出？</p><p><img src="images/legacy.png" alt=""></p><p><strong>如何让系统中所有的日志都统一到slf4j；</strong></p><p>==1、将系统中其他日志框架先排除出去；==</p><p>==2、用中间包来替换原有的日志框架；==</p><p>==3、我们导入slf4j其他的实现==</p><h2 id="3、SpringBoot日志关系"><a href="#3、SpringBoot日志关系" class="headerlink" title="3、SpringBoot日志关系"></a>3、SpringBoot日志关系</h2><pre class=" language-xml"><code class="language-xml">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>SpringBoot使用它来做日志功能；</p><pre class=" language-xml"><code class="language-xml">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-logging<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>底层依赖关系</p><p><img src="images/%E6%90%9C%E7%8B%97%E6%88%AA%E5%9B%BE20180131220946.png" alt=""></p><p>总结：</p><p>​    1）、SpringBoot底层也是使用slf4j+logback的方式进行日志记录</p><p>​    2）、SpringBoot也把其他的日志都替换成了slf4j；</p><p>​    3）、中间替换包？</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"rawtypes"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">LogFactory</span> <span class="token punctuation">{</span>    <span class="token keyword">static</span> String UNSUPPORTED_OPERATION_IN_JCL_OVER_SLF4J <span class="token operator">=</span> <span class="token string">"http://www.slf4j.org/codes.html#unsupported_operation_in_jcl_over_slf4j"</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> LogFactory logFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SLF4JLogFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><img src="images/%E6%90%9C%E7%8B%97%E6%88%AA%E5%9B%BE20180131221411.png" alt=""></p><p>​    4）、如果我们要引入其他框架？一定要把这个框架的默认日志依赖移除掉？</p><p>​            Spring框架用的是commons-logging；</p><pre class=" language-xml"><code class="language-xml">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusions</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>commons-logging<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>commons-logging<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusions</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p><strong>==SpringBoot能自动适配所有的日志，而且底层使用slf4j+logback的方式记录日志，引入其他框架的时候，只需要把这个框架依赖的日志框架排除掉即可；==</strong></p><h2 id="4、日志使用；"><a href="#4、日志使用；" class="headerlink" title="4、日志使用；"></a>4、日志使用；</h2><h3 id="1、默认配置"><a href="#1、默认配置" class="headerlink" title="1、默认配置"></a>1、默认配置</h3><p>SpringBoot默认帮我们配置好了日志；</p><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">//记录器</span>    Logger logger <span class="token operator">=</span> LoggerFactory<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">contextLoads</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//System.out.println();</span>        <span class="token comment" spellcheck="true">//日志的级别；</span>        <span class="token comment" spellcheck="true">//由低到高   trace&lt;debug&lt;info&lt;warn&lt;error</span>        <span class="token comment" spellcheck="true">//可以调整输出的日志级别；日志就只会在这个级别以以后的高级别生效</span>        logger<span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span><span class="token string">"这是trace日志..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"这是debug日志..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//SpringBoot默认给我们使用的是info级别的，没有指定级别的就用SpringBoot默认规定的级别；root级别</span>        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"这是info日志..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        logger<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">"这是warn日志..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"这是error日志..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><pre><code>    日志输出格式：        %d表示日期时间，        %thread表示线程名，        %-5level：级别从左显示5个字符宽度        %logger{50} 表示logger名字最长50个字符，否则按照句点分割。         %msg：日志消息，        %n是换行符    --&gt;    %d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n</code></pre><p>SpringBoot修改日志的默认配置</p><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">logging.level.com.atguigu</span><span class="token punctuation">=</span><span class="token attr-value">trace</span><span class="token comment" spellcheck="true">#logging.path=</span><span class="token comment" spellcheck="true"># 不指定路径在当前项目下生成springboot.log日志</span><span class="token comment" spellcheck="true"># 可以指定完整的路径；</span><span class="token comment" spellcheck="true">#logging.file=G:/springboot.log</span><span class="token comment" spellcheck="true"># 在当前磁盘的根路径下创建spring文件夹和里面的log文件夹；使用 spring.log 作为默认文件</span><span class="token attr-name">logging.path</span><span class="token punctuation">=</span><span class="token attr-value">/spring/log</span><span class="token comment" spellcheck="true">#  在控制台输出的日志的格式</span><span class="token attr-name">logging.pattern.console</span><span class="token punctuation">=</span><span class="token attr-value">%d{yyyy-MM-dd} [%thread] %-5level %logger{50} - %msg%n</span><span class="token comment" spellcheck="true"># 指定文件中日志输出的格式</span><span class="token attr-name">logging.pattern.file</span><span class="token punctuation">=</span><span class="token attr-value">%d{yyyy-MM-dd} === [%thread] === %-5level === %logger{50} ==== %msg%n</span></code></pre><table><thead><tr><th>logging.file</th><th>logging.path</th><th>Example</th><th>Description</th></tr></thead><tbody><tr><td>(none)</td><td>(none)</td><td></td><td>只在控制台输出</td></tr><tr><td>指定文件名</td><td>(none)</td><td>my.log</td><td>输出日志到my.log文件</td></tr><tr><td>(none)</td><td>指定目录</td><td>/var/log</td><td>输出到指定目录的 spring.log 文件中</td></tr></tbody></table><h3 id="2、指定配置"><a href="#2、指定配置" class="headerlink" title="2、指定配置"></a>2、指定配置</h3><p>给类路径下放上每个日志框架自己的配置文件即可；SpringBoot就不使用他默认配置的了</p><table><thead><tr><th>Logging System</th><th>Customization</th></tr></thead><tbody><tr><td>Logback</td><td><code>logback-spring.xml</code>, <code>logback-spring.groovy</code>, <code>logback.xml</code> or <code>logback.groovy</code></td></tr><tr><td>Log4j2</td><td><code>log4j2-spring.xml</code> or <code>log4j2.xml</code></td></tr><tr><td>JDK (Java Util Logging)</td><td><code>logging.properties</code></td></tr></tbody></table><p>logback.xml：直接就被日志框架识别了；</p><p><strong>logback-spring.xml</strong>：日志框架就不直接加载日志的配置项，由SpringBoot解析日志配置，可以使用SpringBoot的高级Profile功能</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>springProfile</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>staging<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- configuration to be enabled when the "staging" profile is active --></span>      可以指定某段配置只在某个环境下生效<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>springProfile</span><span class="token punctuation">></span></span></code></pre><p>如：</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stdout<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ch.qos.logback.core.ConsoleAppender<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--        日志输出格式：            %d表示日期时间，            %thread表示线程名，            %-5level：级别从左显示5个字符宽度            %logger{50} 表示logger名字最长50个字符，否则按照句点分割。             %msg：日志消息，            %n是换行符        --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>layout</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ch.qos.logback.classic.PatternLayout<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>springProfile</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dev<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pattern</span><span class="token punctuation">></span></span>%d{yyyy-MM-dd HH:mm:ss.SSS} ----> [%thread] ---> %-5level %logger{50} - %msg%n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pattern</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>springProfile</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>springProfile</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>!dev<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pattern</span><span class="token punctuation">></span></span>%d{yyyy-MM-dd HH:mm:ss.SSS} ==== [%thread] ==== %-5level %logger{50} - %msg%n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pattern</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>springProfile</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>layout</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>appender</span><span class="token punctuation">></span></span></code></pre><p>如果使用logback.xml作为日志配置文件，还要使用profile功能，会有以下错误</p><p> <code>no applicable action for [springProfile]</code></p><h2 id="5、切换日志框架"><a href="#5、切换日志框架" class="headerlink" title="5、切换日志框架"></a>5、切换日志框架</h2><p>可以按照slf4j的日志适配图，进行相关的切换；</p><p>slf4j+log4j的方式；</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusions</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>logback-classic<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>ch.qos.logback<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>log4j-over-slf4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.slf4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusions</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.slf4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>slf4j-log4j12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>切换为log4j2</p><pre class=" language-xml"><code class="language-xml">   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusions</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-logging<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusions</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-log4j2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><hr><h1 id="四、Web开发"><a href="#四、Web开发" class="headerlink" title="四、Web开发"></a>四、Web开发</h1><h2 id="1、简介"><a href="#1、简介" class="headerlink" title="1、简介"></a>1、简介</h2><p>使用SpringBoot；</p><p><strong>1）、创建SpringBoot应用，选中我们需要的模块；</strong></p><p><strong>2）、SpringBoot已经默认将这些场景配置好了，只需要在配置文件中指定少量配置就可以运行起来</strong></p><p><strong>3）、自己编写业务代码；</strong></p><p><strong>自动配置原理？</strong></p><p>这个场景SpringBoot帮我们配置了什么？能不能修改？能修改哪些配置？能不能扩展？xxx</p><pre><code>xxxxAutoConfiguration：帮我们给容器中自动配置组件；xxxxProperties:配置类来封装配置文件的内容；</code></pre><h2 id="2、SpringBoot对静态资源的映射规则；"><a href="#2、SpringBoot对静态资源的映射规则；" class="headerlink" title="2、SpringBoot对静态资源的映射规则；"></a>2、SpringBoot对静态资源的映射规则；</h2><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"spring.resources"</span><span class="token punctuation">,</span> ignoreUnknownFields <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ResourceProperties</span> <span class="token keyword">implements</span> <span class="token class-name">ResourceLoaderAware</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//可以设置和静态资源有关的参数，缓存时间等</span></code></pre><pre class=" language-java"><code class="language-java">    WebMvcAuotConfiguration：        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addResourceHandlers</span><span class="token punctuation">(</span>ResourceHandlerRegistry registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>resourceProperties<span class="token punctuation">.</span><span class="token function">isAddMappings</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Default resource handling disabled"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            Integer cachePeriod <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>resourceProperties<span class="token punctuation">.</span><span class="token function">getCachePeriod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>registry<span class="token punctuation">.</span><span class="token function">hasMappingForPattern</span><span class="token punctuation">(</span><span class="token string">"/webjars/**"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">customizeResourceHandlerRegistration</span><span class="token punctuation">(</span>                        registry<span class="token punctuation">.</span><span class="token function">addResourceHandler</span><span class="token punctuation">(</span><span class="token string">"/webjars/**"</span><span class="token punctuation">)</span>                                <span class="token punctuation">.</span><span class="token function">addResourceLocations</span><span class="token punctuation">(</span>                                        <span class="token string">"classpath:/META-INF/resources/webjars/"</span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">setCachePeriod</span><span class="token punctuation">(</span>cachePeriod<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            String staticPathPattern <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>mvcProperties<span class="token punctuation">.</span><span class="token function">getStaticPathPattern</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token operator">/</span><span class="token operator">/</span>静态资源文件夹映射            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>registry<span class="token punctuation">.</span><span class="token function">hasMappingForPattern</span><span class="token punctuation">(</span>staticPathPattern<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">customizeResourceHandlerRegistration</span><span class="token punctuation">(</span>                        registry<span class="token punctuation">.</span><span class="token function">addResourceHandler</span><span class="token punctuation">(</span>staticPathPattern<span class="token punctuation">)</span>                                <span class="token punctuation">.</span><span class="token function">addResourceLocations</span><span class="token punctuation">(</span>                                        <span class="token keyword">this</span><span class="token punctuation">.</span>resourceProperties<span class="token punctuation">.</span><span class="token function">getStaticLocations</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">setCachePeriod</span><span class="token punctuation">(</span>cachePeriod<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token operator">/</span><span class="token operator">/</span>配置欢迎页映射        <span class="token annotation punctuation">@Bean</span>        <span class="token keyword">public</span> WelcomePageHandlerMapping <span class="token function">welcomePageHandlerMapping</span><span class="token punctuation">(</span>                ResourceProperties resourceProperties<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">WelcomePageHandlerMapping</span><span class="token punctuation">(</span>resourceProperties<span class="token punctuation">.</span><span class="token function">getWelcomePage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span>mvcProperties<span class="token punctuation">.</span><span class="token function">getStaticPathPattern</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>       <span class="token operator">/</span><span class="token operator">/</span>配置喜欢的图标        <span class="token annotation punctuation">@Configuration</span>        <span class="token annotation punctuation">@ConditionalOnProperty</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"spring.mvc.favicon.enabled"</span><span class="token punctuation">,</span> matchIfMissing <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">FaviconConfiguration</span> <span class="token punctuation">{</span>            <span class="token keyword">private</span> <span class="token keyword">final</span> ResourceProperties resourceProperties<span class="token punctuation">;</span>            <span class="token keyword">public</span> <span class="token function">FaviconConfiguration</span><span class="token punctuation">(</span>ResourceProperties resourceProperties<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>resourceProperties <span class="token operator">=</span> resourceProperties<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token annotation punctuation">@Bean</span>            <span class="token keyword">public</span> SimpleUrlHandlerMapping <span class="token function">faviconHandlerMapping</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                SimpleUrlHandlerMapping mapping <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleUrlHandlerMapping</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                mapping<span class="token punctuation">.</span><span class="token function">setOrder</span><span class="token punctuation">(</span>Ordered<span class="token punctuation">.</span>HIGHEST_PRECEDENCE <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token operator">/</span><span class="token operator">/</span>所有  <span class="token operator">*</span><span class="token operator">*</span><span class="token operator">/</span>favicon<span class="token punctuation">.</span>ico                 mapping<span class="token punctuation">.</span><span class="token function">setUrlMap</span><span class="token punctuation">(</span>Collections<span class="token punctuation">.</span><span class="token function">singletonMap</span><span class="token punctuation">(</span><span class="token string">"**/favicon.ico"</span><span class="token punctuation">,</span>                        <span class="token function">faviconRequestHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> mapping<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token annotation punctuation">@Bean</span>            <span class="token keyword">public</span> ResourceHttpRequestHandler <span class="token function">faviconRequestHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                ResourceHttpRequestHandler requestHandler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ResourceHttpRequestHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                requestHandler                        <span class="token punctuation">.</span><span class="token function">setLocations</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>resourceProperties<span class="token punctuation">.</span><span class="token function">getFaviconLocations</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> requestHandler<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span></code></pre><p>==1）、所有 /webjars/** ，都去 classpath:/META-INF/resources/webjars/ 找资源；==</p><p>​    webjars：以jar包的方式引入静态资源；</p><p><a href="http://www.webjars.org/" target="_blank" rel="noopener">http://www.webjars.org/</a></p><p><img src="images/%E6%90%9C%E7%8B%97%E6%88%AA%E5%9B%BE20180203181751.png" alt=""></p><p>localhost:8080/webjars/jquery/3.3.1/jquery.js</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--引入jquery-webjar--></span>在访问的时候只需要写webjars下面资源的名称即可        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.webjars<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jquery<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.3.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>==2）、”/**” 访问当前项目的任何资源，都去（静态资源的文件夹）找映射==</p><pre><code>&quot;classpath:/META-INF/resources/&quot;, &quot;classpath:/resources/&quot;,&quot;classpath:/static/&quot;, &quot;classpath:/public/&quot; &quot;/&quot;：当前项目的根路径</code></pre><p>localhost:8080/abc ===  去静态资源文件夹里面找abc</p><p>==3）、欢迎页； 静态资源文件夹下的所有index.html页面；被”/**”映射；==</p><p>​    localhost:8080/   找index页面</p><p>==4）、所有的 **/favicon.ico  都是在静态资源文件下找；==</p><h2 id="3、模板引擎"><a href="#3、模板引擎" class="headerlink" title="3、模板引擎"></a>3、模板引擎</h2><p>JSP、Velocity、Freemarker、Thymeleaf</p><p><img src="images/template-engine.png" alt=""></p><p>SpringBoot推荐的Thymeleaf；</p><p>语法更简单，功能更强大；</p><h3 id="1、引入thymeleaf；"><a href="#1、引入thymeleaf；" class="headerlink" title="1、引入thymeleaf；"></a>1、引入thymeleaf；</h3><pre class=" language-xml"><code class="language-xml">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-thymeleaf<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>              2.1.6        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>切换thymeleaf版本<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>thymeleaf.version</span><span class="token punctuation">></span></span>3.0.9.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>thymeleaf.version</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 布局功能的支持程序  thymeleaf3主程序  layout2以上版本 --></span>        <span class="token comment" spellcheck="true">&lt;!-- thymeleaf2   layout1--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>thymeleaf-layout-dialect.version</span><span class="token punctuation">></span></span>2.2.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>thymeleaf-layout-dialect.version</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span></code></pre><h3 id="2、Thymeleaf使用"><a href="#2、Thymeleaf使用" class="headerlink" title="2、Thymeleaf使用"></a>2、Thymeleaf使用</h3><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"spring.thymeleaf"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThymeleafProperties</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Charset DEFAULT_ENCODING <span class="token operator">=</span> Charset<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> MimeType DEFAULT_CONTENT_TYPE <span class="token operator">=</span> MimeType<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token string">"text/html"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String DEFAULT_PREFIX <span class="token operator">=</span> <span class="token string">"classpath:/templates/"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String DEFAULT_SUFFIX <span class="token operator">=</span> <span class="token string">".html"</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//</span></code></pre><p>只要我们把HTML页面放在classpath:/templates/，thymeleaf就能自动渲染；</p><p>使用：</p><p>1、导入thymeleaf的名称空间</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>th</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.thymeleaf.org<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></code></pre><p>2、使用thymeleaf语法；</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>th</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.thymeleaf.org<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>成功！<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--th:text 将div里面的文本内容设置为 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${hello}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>这是显示欢迎信息<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h3 id="3、语法规则"><a href="#3、语法规则" class="headerlink" title="3、语法规则"></a>3、语法规则</h3><p>1）、th:text；改变当前元素里面的文本内容；</p><p>​    th：任意html属性；来替换原生属性的值</p><p><img src="images/2018-02-04_123955.png" alt=""></p><p>2）、表达式？</p><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">Simple</span> <span class="token attr-value">expressions:（表达式语法）</span><span class="token attr-name">    Variable</span> <span class="token attr-value">Expressions: ${...}：获取变量值；OGNL；</span>            1）、获取对象的属性、调用方法            2）、使用内置的基本对象：<span class="token comment" spellcheck="true">                #ctx : the context object.</span><span class="token comment" spellcheck="true">                #vars: the context variables.</span><span class="token comment" spellcheck="true">                #locale : the context locale.</span><span class="token comment" spellcheck="true">                #request : (only in Web Contexts) the HttpServletRequest object.</span><span class="token comment" spellcheck="true">                #response : (only in Web Contexts) the HttpServletResponse object.</span><span class="token comment" spellcheck="true">                #session : (only in Web Contexts) the HttpSession object.</span><span class="token comment" spellcheck="true">                #servletContext : (only in Web Contexts) the ServletContext object.</span>                ${session.foo}            3）、内置的一些工具对象：<span class="token comment" spellcheck="true">#execInfo : information about the template being processed.</span><span class="token comment" spellcheck="true">#messages : methods for obtaining externalized messages inside variables expressions, in the same way as they would be obtained using #{…} syntax.</span><span class="token comment" spellcheck="true">#uris : methods for escaping parts of URLs/URIs</span><span class="token comment" spellcheck="true">#conversions : methods for executing the configured conversion service (if any).</span><span class="token comment" spellcheck="true">#dates : methods for java.util.Date objects: formatting, component extraction, etc.</span><span class="token comment" spellcheck="true">#calendars : analogous to #dates , but for java.util.Calendar objects.</span><span class="token comment" spellcheck="true">#numbers : methods for formatting numeric objects.</span><span class="token comment" spellcheck="true">#strings : methods for String objects: contains, startsWith, prepending/appending, etc.</span><span class="token comment" spellcheck="true">#objects : methods for objects in general.</span><span class="token comment" spellcheck="true">#bools : methods for boolean evaluation.</span><span class="token comment" spellcheck="true">#arrays : methods for arrays.</span><span class="token comment" spellcheck="true">#lists : methods for lists.</span><span class="token comment" spellcheck="true">#sets : methods for sets.</span><span class="token comment" spellcheck="true">#maps : methods for maps.</span><span class="token comment" spellcheck="true">#aggregates : methods for creating aggregates on arrays or collections.</span><span class="token comment" spellcheck="true">#ids : methods for dealing with id attributes that might be repeated (for example, as a result of an iteration).</span><span class="token attr-name">    Selection</span> <span class="token attr-value">Variable Expressions: *{...}：选择表达式：和${}在功能上是一样；</span><span class="token attr-name">        补充：配合</span> <span class="token attr-value">th:object="${session.user}：</span><span class="token attr-name">   &lt;div</span> <span class="token attr-value">th:object="${session.user}"></span><span class="token attr-name">    &lt;p>Name</span><span class="token punctuation">:</span> <span class="token attr-value">&lt;span th:text="*{firstName}">Sebastian&lt;/span>.&lt;/p></span><span class="token attr-name">    &lt;p>Surname</span><span class="token punctuation">:</span> <span class="token attr-value">&lt;span th:text="*{lastName}">Pepper&lt;/span>.&lt;/p></span><span class="token attr-name">    &lt;p>Nationality</span><span class="token punctuation">:</span> <span class="token attr-value">&lt;span th:text="*{nationality}">Saturn&lt;/span>.&lt;/p></span>    &lt;/div><span class="token attr-name">    Message</span> <span class="token attr-value">Expressions: #{...}：获取国际化内容</span><span class="token attr-name">    Link</span> <span class="token attr-value">URL Expressions: @{...}：定义URL；</span><span class="token attr-name">            @{/order/process(execId</span><span class="token punctuation">=</span><span class="token attr-value">${execId},execType='FAST')}</span><span class="token attr-name">    Fragment</span> <span class="token attr-value">Expressions: ~{...}：片段引用表达式</span><span class="token attr-name">            &lt;div</span> <span class="token attr-value">th:insert="~{commons :: main}">...&lt;/div></span>Literals（字面量）<span class="token attr-name">      Text</span> <span class="token attr-value">literals: 'one text' , 'Another one!' ,…</span><span class="token attr-name">      Number</span> <span class="token attr-value">literals: 0 , 34 , 3.0 , 12.3 ,…</span><span class="token attr-name">      Boolean</span> <span class="token attr-value">literals: true , false</span><span class="token attr-name">      Null</span> <span class="token attr-value">literal: null</span><span class="token attr-name">      Literal</span> <span class="token attr-value">tokens: one , sometext , main ,…</span><span class="token attr-name">Text</span> <span class="token attr-value">operations:（文本操作）</span><span class="token attr-name">    String</span> <span class="token attr-value">concatenation: +</span><span class="token attr-name">    Literal</span> <span class="token attr-value">substitutions: |The name is ${name}|</span><span class="token attr-name">Arithmetic</span> <span class="token attr-value">operations:（数学运算）</span><span class="token attr-name">    Binary</span> <span class="token attr-value">operators: + , - , * , / , %</span><span class="token attr-name">    Minus</span> <span class="token attr-value">sign (unary operator): -</span><span class="token attr-name">Boolean</span> <span class="token attr-value">operations:（布尔运算）</span><span class="token attr-name">    Binary</span> <span class="token attr-value">operators: and , or</span><span class="token attr-name">    Boolean</span> <span class="token attr-value">negation (unary operator): ! , not</span><span class="token attr-name">Comparisons</span> <span class="token attr-value">and equality:（比较运算）</span><span class="token attr-name">    Comparators</span><span class="token punctuation">:</span> <span class="token attr-value">> , &lt; , >= , &lt;= ( gt , lt , ge , le )</span><span class="token attr-name">    Equality</span> <span class="token attr-value">operators: == , != ( eq , ne )</span><span class="token attr-name">Conditional</span> <span class="token attr-value">operators:条件运算（三元运算符）</span><span class="token attr-name">    If-then</span><span class="token punctuation">:</span> <span class="token attr-value">(if) ? (then)</span><span class="token attr-name">    If-then-else</span><span class="token punctuation">:</span> <span class="token attr-value">(if) ? (then) : (else)</span><span class="token attr-name">    Default</span><span class="token punctuation">:</span> <span class="token attr-value">(value) ?: (defaultvalue)</span><span class="token attr-name">Special</span> <span class="token attr-value">tokens:</span><span class="token attr-name">    No-Operation</span><span class="token punctuation">:</span> <span class="token attr-value">_ </span></code></pre><h2 id="4、SpringMVC自动配置"><a href="#4、SpringMVC自动配置" class="headerlink" title="4、SpringMVC自动配置"></a>4、SpringMVC自动配置</h2><p><a href="https://docs.spring.io/spring-boot/docs/1.5.10.RELEASE/reference/htmlsingle/#boot-features-developing-web-applications" target="_blank" rel="noopener">https://docs.spring.io/spring-boot/docs/1.5.10.RELEASE/reference/htmlsingle/#boot-features-developing-web-applications</a></p><h3 id="1-Spring-MVC-auto-configuration"><a href="#1-Spring-MVC-auto-configuration" class="headerlink" title="1. Spring MVC auto-configuration"></a>1. Spring MVC auto-configuration</h3><p>Spring Boot 自动配置好了SpringMVC</p><p>以下是SpringBoot对SpringMVC的默认配置:<strong>==（WebMvcAutoConfiguration）==</strong></p><ul><li><p>Inclusion of <code>ContentNegotiatingViewResolver</code> and <code>BeanNameViewResolver</code> beans.</p><ul><li>自动配置了ViewResolver（视图解析器：根据方法的返回值得到视图对象（View），视图对象决定如何渲染（转发？重定向？））</li><li>ContentNegotiatingViewResolver：组合所有的视图解析器的；</li><li>==如何定制：我们可以自己给容器中添加一个视图解析器；自动的将其组合进来；==</li></ul></li><li><p>Support for serving static resources, including support for WebJars (see below).静态资源文件夹路径,webjars</p></li><li><p>Static <code>index.html</code> support. 静态首页访问</p></li><li><p>Custom <code>Favicon</code> support (see below).  favicon.ico</p><p>​</p></li><li><p>自动注册了 of <code>Converter</code>, <code>GenericConverter</code>, <code>Formatter</code> beans.</p><ul><li>Converter：转换器；  public String hello(User user)：类型转换使用Converter</li><li><code>Formatter</code>  格式化器；  2017.12.17===Date；</li></ul></li></ul><pre class=" language-java"><code class="language-java">        <span class="token annotation punctuation">@Bean</span>        <span class="token annotation punctuation">@ConditionalOnProperty</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"spring.mvc"</span><span class="token punctuation">,</span> name <span class="token operator">=</span> <span class="token string">"date-format"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//在文件中配置日期格式化的规则</span>        <span class="token keyword">public</span> Formatter<span class="token operator">&lt;</span>Date<span class="token operator">></span> <span class="token function">dateFormatter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DateFormatter</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>mvcProperties<span class="token punctuation">.</span><span class="token function">getDateFormat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//日期格式化组件</span>        <span class="token punctuation">}</span></code></pre><p>​    ==自己添加的格式化器转换器，我们只需要放在容器中即可==</p><ul><li><p>Support for <code>HttpMessageConverters</code> (see below).</p><ul><li><p>HttpMessageConverter：SpringMVC用来转换Http请求和响应的；User—Json；</p></li><li><p><code>HttpMessageConverters</code> 是从容器中确定；获取所有的HttpMessageConverter；</p><p>==自己给容器中添加HttpMessageConverter，只需要将自己的组件注册容器中（@Bean,@Component）==</p><p>​</p></li></ul></li><li><p>Automatic registration of <code>MessageCodesResolver</code> (see below).定义错误代码生成规则</p></li><li><p>Automatic use of a <code>ConfigurableWebBindingInitializer</code> bean (see below).</p><p>==我们可以配置一个ConfigurableWebBindingInitializer来替换默认的；（添加到容器）==</p><pre><code>初始化WebDataBinder；请求数据=====JavaBean；</code></pre></li></ul><p><strong>org.springframework.boot.autoconfigure.web：web的所有自动场景；</strong></p><p>If you want to keep Spring Boot MVC features, and you just want to add additional <a href="https://docs.spring.io/spring/docs/4.3.14.RELEASE/spring-framework-reference/htmlsingle#mvc" target="_blank" rel="noopener">MVC configuration</a> (interceptors, formatters, view controllers etc.) you can add your own <code>@Configuration</code> class of type <code>WebMvcConfigurerAdapter</code>, but <strong>without</strong> <code>@EnableWebMvc</code>. If you wish to provide custom instances of <code>RequestMappingHandlerMapping</code>, <code>RequestMappingHandlerAdapter</code> or <code>ExceptionHandlerExceptionResolver</code> you can declare a <code>WebMvcRegistrationsAdapter</code> instance providing such components.</p><p>If you want to take complete control of Spring MVC, you can add your own <code>@Configuration</code> annotated with <code>@EnableWebMvc</code>.</p><h3 id="2、扩展SpringMVC"><a href="#2、扩展SpringMVC" class="headerlink" title="2、扩展SpringMVC"></a>2、扩展SpringMVC</h3><pre class=" language-xml"><code class="language-xml">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>view-controller</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/hello<span class="token punctuation">"</span></span> <span class="token attr-name">view-name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>success<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>interceptors</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>interceptor</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>mapping</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/hello<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">mvc:</span>interceptor</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">mvc:</span>interceptors</span><span class="token punctuation">></span></span></code></pre><p><strong>==编写一个配置类（@Configuration），是WebMvcConfigurerAdapter类型；不能标注@EnableWebMvc==</strong>;</p><p>既保留了所有的自动配置，也能用我们扩展的配置；</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//使用WebMvcConfigurerAdapter可以来扩展SpringMVC的功能</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyMvcConfig</span> <span class="token keyword">extends</span> <span class="token class-name">WebMvcConfigurerAdapter</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addViewControllers</span><span class="token punctuation">(</span>ViewControllerRegistry registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token comment" spellcheck="true">// super.addViewControllers(registry);</span>        <span class="token comment" spellcheck="true">//浏览器发送 /atguigu 请求来到 success</span>        registry<span class="token punctuation">.</span><span class="token function">addViewController</span><span class="token punctuation">(</span><span class="token string">"/atguigu"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setViewName</span><span class="token punctuation">(</span><span class="token string">"success"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>原理：</p><p>​    1）、WebMvcAutoConfiguration是SpringMVC的自动配置类</p><p>​    2）、在做其他自动配置时会导入；@Import(<strong>EnableWebMvcConfiguration</strong>.class)</p><pre class=" language-java"><code class="language-java">    <span class="token annotation punctuation">@Configuration</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">EnableWebMvcConfiguration</span> <span class="token keyword">extends</span> <span class="token class-name">DelegatingWebMvcConfiguration</span> <span class="token punctuation">{</span>      <span class="token keyword">private</span> <span class="token keyword">final</span> WebMvcConfigurerComposite configurers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WebMvcConfigurerComposite</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//从容器中获取所有的WebMvcConfigurer</span>      <span class="token annotation punctuation">@Autowired</span><span class="token punctuation">(</span>required <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setConfigurers</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>WebMvcConfigurer<span class="token operator">></span> configurers<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>CollectionUtils<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>configurers<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token keyword">this</span><span class="token punctuation">.</span>configurers<span class="token punctuation">.</span><span class="token function">addWebMvcConfigurers</span><span class="token punctuation">(</span>configurers<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//一个参考实现；将所有的WebMvcConfigurer相关配置都来一起调用；  </span>                <span class="token annotation punctuation">@Override</span>             <span class="token comment" spellcheck="true">// public void addViewControllers(ViewControllerRegistry registry) {</span>              <span class="token comment" spellcheck="true">//    for (WebMvcConfigurer delegate : this.delegates) {</span>               <span class="token comment" spellcheck="true">//       delegate.addViewControllers(registry);</span>               <span class="token comment" spellcheck="true">//   }</span>              <span class="token punctuation">}</span>          <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>​    3）、容器中所有的WebMvcConfigurer都会一起起作用；</p><p>​    4）、我们的配置类也会被调用；</p><p>​    效果：SpringMVC的自动配置和我们的扩展配置都会起作用；</p><h3 id="3、全面接管SpringMVC；"><a href="#3、全面接管SpringMVC；" class="headerlink" title="3、全面接管SpringMVC；"></a>3、全面接管SpringMVC；</h3><p>SpringBoot对SpringMVC的自动配置不需要了，所有都是我们自己配置；所有的SpringMVC的自动配置都失效了</p><p><strong>我们需要在配置类中添加@EnableWebMvc即可；</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//使用WebMvcConfigurerAdapter可以来扩展SpringMVC的功能</span><span class="token annotation punctuation">@EnableWebMvc</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyMvcConfig</span> <span class="token keyword">extends</span> <span class="token class-name">WebMvcConfigurerAdapter</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addViewControllers</span><span class="token punctuation">(</span>ViewControllerRegistry registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token comment" spellcheck="true">// super.addViewControllers(registry);</span>        <span class="token comment" spellcheck="true">//浏览器发送 /atguigu 请求来到 success</span>        registry<span class="token punctuation">.</span><span class="token function">addViewController</span><span class="token punctuation">(</span><span class="token string">"/atguigu"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setViewName</span><span class="token punctuation">(</span><span class="token string">"success"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>原理：</p><p>为什么@EnableWebMvc自动配置就失效了；</p><p>1）@EnableWebMvc的核心</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Import</span><span class="token punctuation">(</span>DelegatingWebMvcConfiguration<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">EnableWebMvc</span> <span class="token punctuation">{</span></code></pre><p>2）、</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DelegatingWebMvcConfiguration</span> <span class="token keyword">extends</span> <span class="token class-name">WebMvcConfigurationSupport</span> <span class="token punctuation">{</span></code></pre><p>3）、</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@ConditionalOnWebApplication</span><span class="token annotation punctuation">@ConditionalOnClass</span><span class="token punctuation">(</span><span class="token punctuation">{</span> Servlet<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> DispatcherServlet<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>        WebMvcConfigurerAdapter<span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//容器中没有这个组件的时候，这个自动配置类才生效</span><span class="token annotation punctuation">@ConditionalOnMissingBean</span><span class="token punctuation">(</span>WebMvcConfigurationSupport<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@AutoConfigureOrder</span><span class="token punctuation">(</span>Ordered<span class="token punctuation">.</span>HIGHEST_PRECEDENCE <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token annotation punctuation">@AutoConfigureAfter</span><span class="token punctuation">(</span><span class="token punctuation">{</span> DispatcherServletAutoConfiguration<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>        ValidationAutoConfiguration<span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebMvcAutoConfiguration</span> <span class="token punctuation">{</span></code></pre><p>4）、@EnableWebMvc将WebMvcConfigurationSupport组件导入进来；</p><p>5）、导入的WebMvcConfigurationSupport只是SpringMVC最基本的功能；</p><h2 id="5、如何修改SpringBoot的默认配置"><a href="#5、如何修改SpringBoot的默认配置" class="headerlink" title="5、如何修改SpringBoot的默认配置"></a>5、如何修改SpringBoot的默认配置</h2><p>模式：</p><p>​    1）、SpringBoot在自动配置很多组件的时候，先看容器中有没有用户自己配置的（@Bean、@Component）如果有就用用户配置的，如果没有，才自动配置；如果有些组件可以有多个（ViewResolver）将用户配置的和自己默认的组合起来；</p><p>​    2）、在SpringBoot中会有非常多的xxxConfigurer帮助我们进行扩展配置</p><p>​    3）、在SpringBoot中会有很多的xxxCustomizer帮助我们进行定制配置</p><h2 id="6、RestfulCRUD"><a href="#6、RestfulCRUD" class="headerlink" title="6、RestfulCRUD"></a>6、RestfulCRUD</h2><h3 id="1）、默认访问首页"><a href="#1）、默认访问首页" class="headerlink" title="1）、默认访问首页"></a>1）、默认访问首页</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//使用WebMvcConfigurerAdapter可以来扩展SpringMVC的功能</span><span class="token comment" spellcheck="true">//@EnableWebMvc   不要接管SpringMVC</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyMvcConfig</span> <span class="token keyword">extends</span> <span class="token class-name">WebMvcConfigurerAdapter</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addViewControllers</span><span class="token punctuation">(</span>ViewControllerRegistry registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token comment" spellcheck="true">// super.addViewControllers(registry);</span>        <span class="token comment" spellcheck="true">//浏览器发送 /atguigu 请求来到 success</span>        registry<span class="token punctuation">.</span><span class="token function">addViewController</span><span class="token punctuation">(</span><span class="token string">"/atguigu"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setViewName</span><span class="token punctuation">(</span><span class="token string">"success"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//所有的WebMvcConfigurerAdapter组件都会一起起作用</span>    <span class="token annotation punctuation">@Bean</span> <span class="token comment" spellcheck="true">//将组件注册在容器</span>    <span class="token keyword">public</span> WebMvcConfigurerAdapter <span class="token function">webMvcConfigurerAdapter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        WebMvcConfigurerAdapter adapter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WebMvcConfigurerAdapter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addViewControllers</span><span class="token punctuation">(</span>ViewControllerRegistry registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>                registry<span class="token punctuation">.</span><span class="token function">addViewController</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setViewName</span><span class="token punctuation">(</span><span class="token string">"login"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                registry<span class="token punctuation">.</span><span class="token function">addViewController</span><span class="token punctuation">(</span><span class="token string">"/index.html"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setViewName</span><span class="token punctuation">(</span><span class="token string">"login"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> adapter<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="2）、国际化"><a href="#2）、国际化" class="headerlink" title="2）、国际化"></a>2）、国际化</h3><p><strong>1）、编写国际化配置文件；</strong></p><p>2）、使用ResourceBundleMessageSource管理国际化资源文件</p><p>3）、在页面使用fmt:message取出国际化内容</p><p>步骤：</p><p>1）、编写国际化配置文件，抽取页面需要显示的国际化消息</p><p><img src="images/%E6%90%9C%E7%8B%97%E6%88%AA%E5%9B%BE20180211130721.png" alt=""></p><p>2）、SpringBoot自动配置好了管理国际化资源文件的组件；</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"spring.messages"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MessageSourceAutoConfiguration</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * Comma-separated list of basenames (essentially a fully-qualified classpath     * location), each following the ResourceBundle convention with relaxed support for     * slash based locations. If it doesn't contain a package qualifier (such as     * "org.mypackage"), it will be resolved from the classpath root.     */</span>    <span class="token keyword">private</span> String basename <span class="token operator">=</span> <span class="token string">"messages"</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//我们的配置文件可以直接放在类路径下叫messages.properties；</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> MessageSource <span class="token function">messageSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        ResourceBundleMessageSource messageSource <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ResourceBundleMessageSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>StringUtils<span class="token punctuation">.</span><span class="token function">hasText</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>basename<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//设置国际化资源文件的基础名（去掉语言国家代码的）</span>            messageSource<span class="token punctuation">.</span><span class="token function">setBasenames</span><span class="token punctuation">(</span>StringUtils<span class="token punctuation">.</span><span class="token function">commaDelimitedListToStringArray</span><span class="token punctuation">(</span>                    StringUtils<span class="token punctuation">.</span><span class="token function">trimAllWhitespace</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>basename<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>encoding <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            messageSource<span class="token punctuation">.</span><span class="token function">setDefaultEncoding</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>encoding<span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        messageSource<span class="token punctuation">.</span><span class="token function">setFallbackToSystemLocale</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>fallbackToSystemLocale<span class="token punctuation">)</span><span class="token punctuation">;</span>        messageSource<span class="token punctuation">.</span><span class="token function">setCacheSeconds</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>cacheSeconds<span class="token punctuation">)</span><span class="token punctuation">;</span>        messageSource<span class="token punctuation">.</span><span class="token function">setAlwaysUseMessageFormat</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>alwaysUseMessageFormat<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> messageSource<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>3）、去页面获取国际化的值；</p><p><img src="images/%E6%90%9C%E7%8B%97%E6%88%AA%E5%9B%BE20180211134506.png" alt=""></p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span>  <span class="token attr-name"><span class="token namespace">xmlns:</span>th</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.thymeleaf.org<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Content-Type<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/html; charset<span class="token punctuation">=</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1, shrink-to-fit<span class="token punctuation">=</span>no<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>description<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>author<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Signin Template for Bootstrap<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- Bootstrap core CSS --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>asserts/css/bootstrap.min.css<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@{/webjars/bootstrap/4.0.0/css/bootstrap.css}<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- Custom styles for this template --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>asserts/css/signin.css<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@{/asserts/css/signin.css}<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text-center<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-signin<span class="token punctuation">"</span></span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dashboard.html<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mb-4<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@{/asserts/img/bootstrap-solid.svg}<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>asserts/img/bootstrap-solid.svg<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>72<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>72<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>h3 mb-3 font-weight-normal<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#{login.tip}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Please sign in<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sr-only<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#{login.username}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Username<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-control<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Username<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#{login.username}<span class="token punctuation">"</span></span> <span class="token attr-name">required</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">autofocus</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sr-only<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#{login.password}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Password<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-control<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Password<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#{login.password}<span class="token punctuation">"</span></span> <span class="token attr-name">required</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox mb-3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span>                  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>remember-me<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span> [[#{login.remember}]]        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btn btn-lg btn-primary btn-block<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#{login.btn}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Sign in<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mt-5 mb-3 text-muted<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>© 2017-2018<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btn btn-sm<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>中文<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btn btn-sm<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>English<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>效果：根据浏览器语言设置的信息切换了国际化；</p><p>原理：</p><p>​    国际化Locale（区域信息对象）；LocaleResolver（获取区域信息对象）；</p><pre class=" language-java"><code class="language-java">        <span class="token annotation punctuation">@Bean</span>        <span class="token annotation punctuation">@ConditionalOnMissingBean</span>        <span class="token annotation punctuation">@ConditionalOnProperty</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"spring.mvc"</span><span class="token punctuation">,</span> name <span class="token operator">=</span> <span class="token string">"locale"</span><span class="token punctuation">)</span>        <span class="token keyword">public</span> LocaleResolver <span class="token function">localeResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>mvcProperties                    <span class="token punctuation">.</span><span class="token function">getLocaleResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> WebMvcProperties<span class="token punctuation">.</span>LocaleResolver<span class="token punctuation">.</span>FIXED<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">FixedLocaleResolver</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>mvcProperties<span class="token punctuation">.</span><span class="token function">getLocale</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            AcceptHeaderLocaleResolver localeResolver <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AcceptHeaderLocaleResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            localeResolver<span class="token punctuation">.</span><span class="token function">setDefaultLocale</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>mvcProperties<span class="token punctuation">.</span><span class="token function">getLocale</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> localeResolver<span class="token punctuation">;</span>        <span class="token punctuation">}</span>默认的就是根据请求头带来的区域信息获取Locale进行国际化</code></pre><p>4）、点击链接切换国际化</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 可以在连接上携带区域信息 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyLocaleResolver</span> <span class="token keyword">implements</span> <span class="token class-name">LocaleResolver</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Locale <span class="token function">resolveLocale</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String l <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"l"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Locale locale <span class="token operator">=</span> Locale<span class="token punctuation">.</span><span class="token function">getDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>StringUtils<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            String<span class="token punctuation">[</span><span class="token punctuation">]</span> split <span class="token operator">=</span> l<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"_"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            locale <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Locale</span><span class="token punctuation">(</span>split<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>split<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> locale<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setLocale</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">,</span> Locale locale<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> LocaleResolver <span class="token function">localeResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">MyLocaleResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="3）、登陆"><a href="#3）、登陆" class="headerlink" title="3）、登陆"></a>3）、登陆</h3><p>开发期间模板引擎页面修改以后，要实时生效</p><p>1）、禁用模板引擎的缓存</p><pre><code># 禁用缓存spring.thymeleaf.cache=false </code></pre><p>2）、页面修改完成以后ctrl+f9：重新编译；</p><p>登陆错误消息的显示</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">color</span><span class="token punctuation">:</span> red</span><span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${msg}<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${not #strings.isEmpty(msg)}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span></code></pre><h3 id="4）、拦截器进行登陆检查"><a href="#4）、拦截器进行登陆检查" class="headerlink" title="4）、拦截器进行登陆检查"></a>4）、拦截器进行登陆检查</h3><p>拦截器</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 登陆检查， */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LoginHandlerInterceptor</span> <span class="token keyword">implements</span> <span class="token class-name">HandlerInterceptor</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//目标方法执行之前</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">preHandle</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">,</span> Object handler<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        Object user <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">"loginUser"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>user <span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//未登陆，返回登陆页面</span>            request<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">,</span><span class="token string">"没有权限请先登陆"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            request<span class="token punctuation">.</span><span class="token function">getRequestDispatcher</span><span class="token punctuation">(</span><span class="token string">"/index.html"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forward</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//已登陆，放行请求</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">postHandle</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">,</span> Object handler<span class="token punctuation">,</span> ModelAndView modelAndView<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterCompletion</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">,</span> Object handler<span class="token punctuation">,</span> Exception ex<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>注册拦截器</p><pre class=" language-java"><code class="language-java">  <span class="token comment" spellcheck="true">//所有的WebMvcConfigurerAdapter组件都会一起起作用</span>    <span class="token annotation punctuation">@Bean</span> <span class="token comment" spellcheck="true">//将组件注册在容器</span>    <span class="token keyword">public</span> WebMvcConfigurerAdapter <span class="token function">webMvcConfigurerAdapter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        WebMvcConfigurerAdapter adapter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WebMvcConfigurerAdapter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addViewControllers</span><span class="token punctuation">(</span>ViewControllerRegistry registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>                registry<span class="token punctuation">.</span><span class="token function">addViewController</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setViewName</span><span class="token punctuation">(</span><span class="token string">"login"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                registry<span class="token punctuation">.</span><span class="token function">addViewController</span><span class="token punctuation">(</span><span class="token string">"/index.html"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setViewName</span><span class="token punctuation">(</span><span class="token string">"login"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                registry<span class="token punctuation">.</span><span class="token function">addViewController</span><span class="token punctuation">(</span><span class="token string">"/main.html"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setViewName</span><span class="token punctuation">(</span><span class="token string">"dashboard"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//注册拦截器</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addInterceptors</span><span class="token punctuation">(</span>InterceptorRegistry registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//super.addInterceptors(registry);</span>                <span class="token comment" spellcheck="true">//静态资源；  *.css , *.js</span>                <span class="token comment" spellcheck="true">//SpringBoot已经做好了静态资源映射</span>                registry<span class="token punctuation">.</span><span class="token function">addInterceptor</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">LoginHandlerInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addPathPatterns</span><span class="token punctuation">(</span><span class="token string">"/**"</span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">excludePathPatterns</span><span class="token punctuation">(</span><span class="token string">"/index.html"</span><span class="token punctuation">,</span><span class="token string">"/"</span><span class="token punctuation">,</span><span class="token string">"/user/login"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> adapter<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h3 id="5）、CRUD-员工列表"><a href="#5）、CRUD-员工列表" class="headerlink" title="5）、CRUD-员工列表"></a>5）、CRUD-员工列表</h3><p>实验要求：</p><p>1）、RestfulCRUD：CRUD满足Rest风格；</p><p>URI：  /资源名称/资源标识       HTTP请求方式区分对资源CRUD操作</p><table><thead><tr><th></th><th>普通CRUD（uri来区分操作）</th><th>RestfulCRUD</th></tr></thead><tbody><tr><td>查询</td><td>getEmp</td><td>emp—GET</td></tr><tr><td>添加</td><td>addEmp?xxx</td><td>emp—POST</td></tr><tr><td>修改</td><td>updateEmp?id=xxx&amp;xxx=xx</td><td>emp/{id}—PUT</td></tr><tr><td>删除</td><td>deleteEmp?id=1</td><td>emp/{id}—DELETE</td></tr></tbody></table><p>2）、实验的请求架构;</p><table><thead><tr><th>实验功能</th><th>请求URI</th><th>请求方式</th></tr></thead><tbody><tr><td>查询所有员工</td><td>emps</td><td>GET</td></tr><tr><td>查询某个员工(来到修改页面)</td><td>emp/1</td><td>GET</td></tr><tr><td>来到添加页面</td><td>emp</td><td>GET</td></tr><tr><td>添加员工</td><td>emp</td><td>POST</td></tr><tr><td>来到修改页面（查出员工进行信息回显）</td><td>emp/1</td><td>GET</td></tr><tr><td>修改员工</td><td>emp</td><td>PUT</td></tr><tr><td>删除员工</td><td>emp/1</td><td>DELETE</td></tr></tbody></table><p>3）、员工列表：</p><h4 id="thymeleaf公共页面元素抽取"><a href="#thymeleaf公共页面元素抽取" class="headerlink" title="thymeleaf公共页面元素抽取"></a>thymeleaf公共页面元素抽取</h4><pre class=" language-html"><code class="language-html">1、抽取公共片段<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">th:</span>fragment</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>copy<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token entity" title="&copy;">&amp;copy;</span> 2011 The Good Thymes Virtual Grocery<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>2、引入公共片段<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">th:</span>insert</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>~{footer :: copy}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>~{templatename::selector}：模板名::选择器~{templatename::fragmentname}:模板名::片段名3、默认效果：insert的公共片段在div标签中如果使用th:insert等属性进行引入，可以不用写~{}：行内写法可以加上：[[~{}]];[(~{})]；</code></pre><p>三种引入公共片段的th属性：</p><p><strong>th:insert</strong>：将公共片段整个插入到声明引入的元素中</p><p><strong>th:replace</strong>：将声明引入的元素替换为公共片段</p><p><strong>th:include</strong>：将被引入的片段的内容包含进这个标签中</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>footer</span> <span class="token attr-name"><span class="token namespace">th:</span>fragment</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>copy<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token entity" title="&copy;">&amp;copy;</span> 2011 The Good Thymes Virtual Grocery<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>footer</span><span class="token punctuation">></span></span>引入方式<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">th:</span>insert</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>footer :: copy<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">th:</span>replace</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>footer :: copy<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">th:</span>include</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>footer :: copy<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>效果<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>footer</span><span class="token punctuation">></span></span>    <span class="token entity" title="&copy;">&amp;copy;</span> 2011 The Good Thymes Virtual Grocery    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>footer</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>footer</span><span class="token punctuation">></span></span><span class="token entity" title="&copy;">&amp;copy;</span> 2011 The Good Thymes Virtual Grocery<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>footer</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token entity" title="&copy;">&amp;copy;</span> 2011 The Good Thymes Virtual Grocery<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><p>引入片段的时候传入参数： </p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>nav</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col-md-2 d-none d-md-block bg-light sidebar<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sidebar<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sidebar-sticky<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>nav flex-column<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>nav-item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>nav-link active<span class="token punctuation">"</span></span>                   <span class="token attr-name"><span class="token namespace">th:</span>class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${activeUri<span class="token punctuation">=</span><span class="token punctuation">=</span><span class="token punctuation">'</span>main.html<span class="token punctuation">'</span>?<span class="token punctuation">'</span>nav-link active<span class="token punctuation">'</span>:<span class="token punctuation">'</span>nav-link<span class="token punctuation">'</span>}<span class="token punctuation">"</span></span>                   <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@{/main.html}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>svg</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2000/svg<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>24<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>24<span class="token punctuation">"</span></span> <span class="token attr-name">viewBox</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0 0 24 24<span class="token punctuation">"</span></span> <span class="token attr-name">fill</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>none<span class="token punctuation">"</span></span> <span class="token attr-name">stroke</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>currentColor<span class="token punctuation">"</span></span> <span class="token attr-name">stroke-width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span> <span class="token attr-name">stroke-linecap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>round<span class="token punctuation">"</span></span> <span class="token attr-name">stroke-linejoin</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>round<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>feather feather-home<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>path</span> <span class="token attr-name">d</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>M3 9l9-7 9 7v11a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2z<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>path</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>polyline</span> <span class="token attr-name">points</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>9 22 9 12 15 12 15 22<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>polyline</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>svg</span><span class="token punctuation">></span></span>                    Dashboard <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sr-only<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>(current)<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--引入侧边栏;传入参数--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">th:</span>replace</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>commons/bar::#sidebar(activeUri<span class="token punctuation">=</span><span class="token punctuation">'</span>emps<span class="token punctuation">'</span>)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><h3 id="6）、CRUD-员工添加"><a href="#6）、CRUD-员工添加" class="headerlink" title="6）、CRUD-员工添加"></a>6）、CRUD-员工添加</h3><p>添加页面</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-group<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span>LastName<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-control<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>zhangsan<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-group<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span>Email<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-control<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>zhangsan@atguigu.com<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-group<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span>Gender<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-check form-check-inline<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-check-input<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>gender<span class="token punctuation">"</span></span>  <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-check-label<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>男<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-check form-check-inline<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-check-input<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>gender<span class="token punctuation">"</span></span>  <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-check-label<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>女<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-group<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span>department<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-control<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">></span></span>2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">></span></span>3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">></span></span>4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">></span></span>5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-group<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span>Birth<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-control<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>zhangsan<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btn btn-primary<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>添加<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span></code></pre><p>提交的数据格式不对：生日：日期；</p><p>2017-12-12；2017/12/12；2017.12.12；</p><p>日期的格式化；SpringMVC将页面提交的值需要转换为指定的类型;</p><p>2017-12-12—Date； 类型转换，格式化;</p><p>默认日期是按照/的方式；</p><h3 id="7）、CRUD-员工修改"><a href="#7）、CRUD-员工修改" class="headerlink" title="7）、CRUD-员工修改"></a>7）、CRUD-员工修改</h3><p>修改添加二合一表单</p><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!--需要区分是员工修改还是添加；--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name"><span class="token namespace">th:</span>action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@{/emp}<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--发送put请求修改员工数据--></span>    <span class="token comment" spellcheck="true">&lt;!--1、SpringMVC中配置HiddenHttpMethodFilter;（SpringBoot自动配置好的）2、页面创建一个post表单3、创建一个input项，name="_method";值就是我们指定的请求方式--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hidden<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>_method<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>put<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${emp!<span class="token punctuation">=</span>null}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hidden<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${emp!<span class="token punctuation">=</span>null}<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${emp.id}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-group<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span>LastName<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>lastName<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-control<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>zhangsan<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${emp!<span class="token punctuation">=</span>null}?${emp.lastName}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-group<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span>Email<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-control<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>zhangsan@atguigu.com<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${emp!<span class="token punctuation">=</span>null}?${emp.email}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-group<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span>Gender<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-check form-check-inline<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-check-input<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>gender<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>checked</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${emp!<span class="token punctuation">=</span>null}?${emp.gender<span class="token punctuation">=</span><span class="token punctuation">=</span>1}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-check-label<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>男<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-check form-check-inline<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-check-input<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>gender<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>checked</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${emp!<span class="token punctuation">=</span>null}?${emp.gender<span class="token punctuation">=</span><span class="token punctuation">=</span>0}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-check-label<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>女<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-group<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span>department<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--提交的是部门的id--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-control<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>department.id<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name"><span class="token namespace">th:</span>selected</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${emp!<span class="token punctuation">=</span>null}?${dept.id <span class="token punctuation">=</span><span class="token punctuation">=</span> emp.department.id}<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${dept.id}<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>each</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dept:${depts}<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${dept.departmentName}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-group<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span>Birth<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>birth<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-control<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>zhangsan<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${emp!<span class="token punctuation">=</span>null}?${#dates.format(emp.birth, <span class="token punctuation">'</span>yyyy-MM-dd HH:mm<span class="token punctuation">'</span>)}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btn btn-primary<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${emp!<span class="token punctuation">=</span>null}?<span class="token punctuation">'</span>修改<span class="token punctuation">'</span>:<span class="token punctuation">'</span>添加<span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>添加<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span></code></pre><h3 id="8）、CRUD-员工删除"><a href="#8）、CRUD-员工删除" class="headerlink" title="8）、CRUD-员工删除"></a>8）、CRUD-员工删除</h3><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span> <span class="token attr-name"><span class="token namespace">th:</span>each</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>emp:${emps}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${emp.id}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>[[${emp.lastName}]]<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${emp.email}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${emp.gender}<span class="token punctuation">=</span><span class="token punctuation">=</span>0?<span class="token punctuation">'</span>女<span class="token punctuation">'</span>:<span class="token punctuation">'</span>男<span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${emp.department.departmentName}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${#dates.format(emp.birth, <span class="token punctuation">'</span>yyyy-MM-dd HH:mm<span class="token punctuation">'</span>)}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btn btn-sm btn-primary<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@{/emp/}+${emp.id}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>编辑<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name"><span class="token namespace">th:</span>attr</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>del_uri<span class="token punctuation">=</span>@{/emp/}+${emp.id}<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btn btn-sm btn-danger deleteBtn<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>删除<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">".deleteBtn"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//删除当前员工的</span>        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#deleteEmpForm"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">"action"</span><span class="token punctuation">,</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">"del_uri"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h2 id="7、错误处理机制"><a href="#7、错误处理机制" class="headerlink" title="7、错误处理机制"></a>7、错误处理机制</h2><h3 id="1）、SpringBoot默认的错误处理机制"><a href="#1）、SpringBoot默认的错误处理机制" class="headerlink" title="1）、SpringBoot默认的错误处理机制"></a>1）、SpringBoot默认的错误处理机制</h3><p>默认效果：</p><p>​        1）、浏览器，返回一个默认的错误页面</p><p><img src="images/%E6%90%9C%E7%8B%97%E6%88%AA%E5%9B%BE20180226173408.png" alt=""></p><p>  浏览器发送请求的请求头：</p><p><img src="images/%E6%90%9C%E7%8B%97%E6%88%AA%E5%9B%BE20180226180347.png" alt=""></p><p>​        2）、如果是其他客户端，默认响应一个json数据</p><p><img src="images/%E6%90%9C%E7%8B%97%E6%88%AA%E5%9B%BE20180226173527.png" alt=""></p><p>​        <img src="images/%E6%90%9C%E7%8B%97%E6%88%AA%E5%9B%BE20180226180504.png" alt=""></p><p>原理：</p><p>​    可以参照ErrorMvcAutoConfiguration；错误处理的自动配置；</p><pre><code>  给容器中添加了以下组件</code></pre><p>​    1、DefaultErrorAttributes：</p><pre class=" language-java"><code class="language-java">帮我们在页面共享信息；<span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> <span class="token function">getErrorAttributes</span><span class="token punctuation">(</span>RequestAttributes requestAttributes<span class="token punctuation">,</span>            <span class="token keyword">boolean</span> includeStackTrace<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> errorAttributes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashMap</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        errorAttributes<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"timestamp"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">addStatus</span><span class="token punctuation">(</span>errorAttributes<span class="token punctuation">,</span> requestAttributes<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">addErrorDetails</span><span class="token punctuation">(</span>errorAttributes<span class="token punctuation">,</span> requestAttributes<span class="token punctuation">,</span> includeStackTrace<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">addPath</span><span class="token punctuation">(</span>errorAttributes<span class="token punctuation">,</span> requestAttributes<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> errorAttributes<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>​    2、BasicErrorController：处理默认/error请求</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Controller</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"${server.error.path:${error.path:/error}}"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BasicErrorController</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractErrorController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>produces <span class="token operator">=</span> <span class="token string">"text/html"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//产生html类型的数据；浏览器发送的请求来到这个方法处理</span>    <span class="token keyword">public</span> ModelAndView <span class="token function">errorHtml</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span>            HttpServletResponse response<span class="token punctuation">)</span> <span class="token punctuation">{</span>        HttpStatus status <span class="token operator">=</span> <span class="token function">getStatus</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> model <span class="token operator">=</span> Collections<span class="token punctuation">.</span><span class="token function">unmodifiableMap</span><span class="token punctuation">(</span><span class="token function">getErrorAttributes</span><span class="token punctuation">(</span>                request<span class="token punctuation">,</span> <span class="token function">isIncludeStackTrace</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> MediaType<span class="token punctuation">.</span>TEXT_HTML<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        response<span class="token punctuation">.</span><span class="token function">setStatus</span><span class="token punctuation">(</span>status<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//去哪个页面作为错误页面；包含页面地址和页面内容</span>        ModelAndView modelAndView <span class="token operator">=</span> <span class="token function">resolveErrorView</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">,</span> status<span class="token punctuation">,</span> model<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>modelAndView <span class="token operator">==</span> null <span class="token operator">?</span> <span class="token keyword">new</span> <span class="token class-name">ModelAndView</span><span class="token punctuation">(</span><span class="token string">"error"</span><span class="token punctuation">,</span> model<span class="token punctuation">)</span> <span class="token operator">:</span> modelAndView<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@RequestMapping</span>    <span class="token annotation punctuation">@ResponseBody</span>    <span class="token comment" spellcheck="true">//产生json数据，其他客户端来到这个方法处理；</span>    <span class="token keyword">public</span> ResponseEntity<span class="token operator">&lt;</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">>></span> <span class="token function">error</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> body <span class="token operator">=</span> <span class="token function">getErrorAttributes</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span>                <span class="token function">isIncludeStackTrace</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> MediaType<span class="token punctuation">.</span>ALL<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        HttpStatus status <span class="token operator">=</span> <span class="token function">getStatus</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ResponseEntity</span><span class="token operator">&lt;</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">>></span><span class="token punctuation">(</span>body<span class="token punctuation">,</span> status<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>​    3、ErrorPageCustomizer：</p><pre class=" language-java"><code class="language-java">    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${error.path:/error}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String path <span class="token operator">=</span> <span class="token string">"/error"</span><span class="token punctuation">;</span>  系统出现错误以后来到error请求进行处理；（web<span class="token punctuation">.</span>xml注册的错误页面规则）</code></pre><p>​    4、DefaultErrorViewResolver：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> ModelAndView <span class="token function">resolveErrorView</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpStatus status<span class="token punctuation">,</span>            Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> model<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ModelAndView modelAndView <span class="token operator">=</span> <span class="token function">resolve</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>status<span class="token punctuation">)</span><span class="token punctuation">,</span> model<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>modelAndView <span class="token operator">==</span> null <span class="token operator">&amp;&amp;</span> SERIES_VIEWS<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>status<span class="token punctuation">.</span><span class="token function">series</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            modelAndView <span class="token operator">=</span> <span class="token function">resolve</span><span class="token punctuation">(</span>SERIES_VIEWS<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>status<span class="token punctuation">.</span><span class="token function">series</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> model<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> modelAndView<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> ModelAndView <span class="token function">resolve</span><span class="token punctuation">(</span>String viewName<span class="token punctuation">,</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> model<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//默认SpringBoot可以去找到一个页面？  error/404</span>        String errorViewName <span class="token operator">=</span> <span class="token string">"error/"</span> <span class="token operator">+</span> viewName<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//模板引擎可以解析这个页面地址就用模板引擎解析</span>        TemplateAvailabilityProvider provider <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>templateAvailabilityProviders                <span class="token punctuation">.</span><span class="token function">getProvider</span><span class="token punctuation">(</span>errorViewName<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>applicationContext<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>provider <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//模板引擎可用的情况下返回到errorViewName指定的视图地址</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ModelAndView</span><span class="token punctuation">(</span>errorViewName<span class="token punctuation">,</span> model<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//模板引擎不可用，就在静态资源文件夹下找errorViewName对应的页面   error/404.html</span>        <span class="token keyword">return</span> <span class="token function">resolveResource</span><span class="token punctuation">(</span>errorViewName<span class="token punctuation">,</span> model<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>​    步骤：</p><p>​        一但系统出现4xx或者5xx之类的错误；ErrorPageCustomizer就会生效（定制错误的响应规则）；就会来到/error请求；就会被<strong>BasicErrorController</strong>处理；</p><p>​        1）响应页面；去哪个页面是由<strong>DefaultErrorViewResolver</strong>解析得到的；</p><pre class=" language-java"><code class="language-java"><span class="token keyword">protected</span> ModelAndView <span class="token function">resolveErrorView</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span>      HttpServletResponse response<span class="token punctuation">,</span> HttpStatus status<span class="token punctuation">,</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> model<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//所有的ErrorViewResolver得到ModelAndView</span>   <span class="token keyword">for</span> <span class="token punctuation">(</span>ErrorViewResolver resolver <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>errorViewResolvers<span class="token punctuation">)</span> <span class="token punctuation">{</span>      ModelAndView modelAndView <span class="token operator">=</span> resolver<span class="token punctuation">.</span><span class="token function">resolveErrorView</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> status<span class="token punctuation">,</span> model<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>modelAndView <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">return</span> modelAndView<span class="token punctuation">;</span>      <span class="token punctuation">}</span>   <span class="token punctuation">}</span>   <span class="token keyword">return</span> null<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="2）、如果定制错误响应："><a href="#2）、如果定制错误响应：" class="headerlink" title="2）、如果定制错误响应："></a>2）、如果定制错误响应：</h3><h4 id="1）、如何定制错误的页面；"><a href="#1）、如何定制错误的页面；" class="headerlink" title="1）、如何定制错误的页面；"></a><strong>1）、如何定制错误的页面；</strong></h4><p>​            <strong>1）、有模板引擎的情况下；error/状态码;</strong> 【将错误页面命名为  错误状态码.html 放在模板引擎文件夹里面的 error文件夹下】，发生此状态码的错误就会来到  对应的页面；</p><p>​            我们可以使用4xx和5xx作为错误页面的文件名来匹配这种类型的所有错误，精确优先（优先寻找精确的状态码.html）；        </p><p>​            页面能获取的信息；</p><p>​                timestamp：时间戳</p><p>​                status：状态码</p><p>​                error：错误提示</p><p>​                exception：异常对象</p><p>​                message：异常消息</p><p>​                errors：JSR303数据校验的错误都在这里</p><p>​            2）、没有模板引擎（模板引擎找不到这个错误页面），静态资源文件夹下找；</p><p>​            3）、以上都没有错误页面，就是默认来到SpringBoot默认的错误提示页面；</p><h4 id="2）、如何定制错误的json数据；"><a href="#2）、如何定制错误的json数据；" class="headerlink" title="2）、如何定制错误的json数据；"></a>2）、如何定制错误的json数据；</h4><p>​        1）、自定义异常处理&amp;返回定制json数据；</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@ControllerAdvice</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyExceptionHandler</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@ResponseBody</span>    <span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span>UserNotExistException<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Object<span class="token operator">></span> <span class="token function">handleException</span><span class="token punctuation">(</span>Exception e<span class="token punctuation">)</span><span class="token punctuation">{</span>        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Object<span class="token operator">></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"code"</span><span class="token punctuation">,</span><span class="token string">"user.notexist"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"message"</span><span class="token punctuation">,</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> map<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//没有自适应效果...</span></code></pre><p>​        2）、转发到/error进行自适应响应效果处理</p><pre class=" language-java"><code class="language-java"> <span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span>UserNotExistException<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">handleException</span><span class="token punctuation">(</span>Exception e<span class="token punctuation">,</span> HttpServletRequest request<span class="token punctuation">)</span><span class="token punctuation">{</span>        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Object<span class="token operator">></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//传入我们自己的错误状态码  4xx 5xx，否则就不会进入定制错误页面的解析流程</span>        <span class="token comment" spellcheck="true">/**         * Integer statusCode = (Integer) request         .getAttribute("javax.servlet.error.status_code");         */</span>        request<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"javax.servlet.error.status_code"</span><span class="token punctuation">,</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"code"</span><span class="token punctuation">,</span><span class="token string">"user.notexist"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"message"</span><span class="token punctuation">,</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//转发到/error</span>        <span class="token keyword">return</span> <span class="token string">"forward:/error"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h4 id="3）、将我们的定制数据携带出去；"><a href="#3）、将我们的定制数据携带出去；" class="headerlink" title="3）、将我们的定制数据携带出去；"></a>3）、将我们的定制数据携带出去；</h4><p>出现错误以后，会来到/error请求，会被BasicErrorController处理，响应出去可以获取的数据是由getErrorAttributes得到的（是AbstractErrorController（ErrorController）规定的方法）；</p><p>​    1、完全来编写一个ErrorController的实现类【或者是编写AbstractErrorController的子类】，放在容器中；</p><p>​    2、页面上能用的数据，或者是json返回能用的数据都是通过errorAttributes.getErrorAttributes得到；</p><p>​            容器中DefaultErrorAttributes.getErrorAttributes()；默认进行数据处理的；</p><p>自定义ErrorAttributes</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//给容器中加入我们自己定义的ErrorAttributes</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyErrorAttributes</span> <span class="token keyword">extends</span> <span class="token class-name">DefaultErrorAttributes</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> <span class="token function">getErrorAttributes</span><span class="token punctuation">(</span>RequestAttributes requestAttributes<span class="token punctuation">,</span> <span class="token keyword">boolean</span> includeStackTrace<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> map <span class="token operator">=</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">getErrorAttributes</span><span class="token punctuation">(</span>requestAttributes<span class="token punctuation">,</span> includeStackTrace<span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"company"</span><span class="token punctuation">,</span><span class="token string">"atguigu"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> map<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>最终的效果：响应是自适应的，可以通过定制ErrorAttributes改变需要返回的内容，</p><p><img src="images/%E6%90%9C%E7%8B%97%E6%88%AA%E5%9B%BE20180228135513.png" alt=""></p><h2 id="8、配置嵌入式Servlet容器"><a href="#8、配置嵌入式Servlet容器" class="headerlink" title="8、配置嵌入式Servlet容器"></a>8、配置嵌入式Servlet容器</h2><p>SpringBoot默认使用Tomcat作为嵌入式的Servlet容器；</p><p><img src="images/%E6%90%9C%E7%8B%97%E6%88%AA%E5%9B%BE20180301142915.png" alt=""></p><p>问题？</p><h3 id="1）、如何定制和修改Servlet容器的相关配置；"><a href="#1）、如何定制和修改Servlet容器的相关配置；" class="headerlink" title="1）、如何定制和修改Servlet容器的相关配置；"></a>1）、如何定制和修改Servlet容器的相关配置；</h3><p>1、修改和server有关的配置（ServerProperties【也是EmbeddedServletContainerCustomizer】）；</p><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">server.port</span><span class="token punctuation">=</span><span class="token attr-value">8081</span><span class="token attr-name">server.context-path</span><span class="token punctuation">=</span><span class="token attr-value">/crud</span><span class="token attr-name">server.tomcat.uri-encoding</span><span class="token punctuation">=</span><span class="token attr-value">UTF-8</span>//通用的Servlet容器设置server.xxx//Tomcat的设置server.tomcat.xxx</code></pre><p>2、编写一个<strong>EmbeddedServletContainerCustomizer</strong>：嵌入式的Servlet容器的定制器；来修改Servlet容器的配置</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Bean</span>  <span class="token comment" spellcheck="true">//一定要将这个定制器加入到容器中</span><span class="token keyword">public</span> EmbeddedServletContainerCustomizer <span class="token function">embeddedServletContainerCustomizer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">EmbeddedServletContainerCustomizer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//定制嵌入式的Servlet容器相关的规则</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">customize</span><span class="token punctuation">(</span>ConfigurableEmbeddedServletContainer container<span class="token punctuation">)</span> <span class="token punctuation">{</span>            container<span class="token punctuation">.</span><span class="token function">setPort</span><span class="token punctuation">(</span><span class="token number">8083</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="2）、注册Servlet三大组件【Servlet、Filter、Listener】"><a href="#2）、注册Servlet三大组件【Servlet、Filter、Listener】" class="headerlink" title="2）、注册Servlet三大组件【Servlet、Filter、Listener】"></a>2）、注册Servlet三大组件【Servlet、Filter、Listener】</h3><p>由于SpringBoot默认是以jar包的方式启动嵌入式的Servlet容器来启动SpringBoot的web应用，没有web.xml文件。</p><p>注册三大组件用以下方式</p><p>ServletRegistrationBean</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//注册三大组件</span><span class="token annotation punctuation">@Bean</span><span class="token keyword">public</span> ServletRegistrationBean <span class="token function">myServlet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    ServletRegistrationBean registrationBean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServletRegistrationBean</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MyServlet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"/myServlet"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> registrationBean<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>FilterRegistrationBean</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Bean</span><span class="token keyword">public</span> FilterRegistrationBean <span class="token function">myFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    FilterRegistrationBean registrationBean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FilterRegistrationBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    registrationBean<span class="token punctuation">.</span><span class="token function">setFilter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MyFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    registrationBean<span class="token punctuation">.</span><span class="token function">setUrlPatterns</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"/hello"</span><span class="token punctuation">,</span><span class="token string">"/myServlet"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> registrationBean<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>ServletListenerRegistrationBean</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Bean</span><span class="token keyword">public</span> ServletListenerRegistrationBean <span class="token function">myListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    ServletListenerRegistrationBean<span class="token operator">&lt;</span>MyListener<span class="token operator">></span> registrationBean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServletListenerRegistrationBean</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MyListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> registrationBean<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>SpringBoot帮我们自动SpringMVC的时候，自动的注册SpringMVC的前端控制器；DIspatcherServlet；</p><p>DispatcherServletAutoConfiguration中：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>name <span class="token operator">=</span> DEFAULT_DISPATCHER_SERVLET_REGISTRATION_BEAN_NAME<span class="token punctuation">)</span><span class="token annotation punctuation">@ConditionalOnBean</span><span class="token punctuation">(</span>value <span class="token operator">=</span> DispatcherServlet<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> name <span class="token operator">=</span> DEFAULT_DISPATCHER_SERVLET_BEAN_NAME<span class="token punctuation">)</span><span class="token keyword">public</span> ServletRegistrationBean <span class="token function">dispatcherServletRegistration</span><span class="token punctuation">(</span>      DispatcherServlet dispatcherServlet<span class="token punctuation">)</span> <span class="token punctuation">{</span>   ServletRegistrationBean registration <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServletRegistrationBean</span><span class="token punctuation">(</span>         dispatcherServlet<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>serverProperties<span class="token punctuation">.</span><span class="token function">getServletMapping</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//默认拦截： /  所有请求；包静态资源，但是不拦截jsp请求；   /*会拦截jsp</span>    <span class="token comment" spellcheck="true">//可以通过server.servletPath来修改SpringMVC前端控制器默认拦截的请求路径</span>   registration<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span>DEFAULT_DISPATCHER_SERVLET_BEAN_NAME<span class="token punctuation">)</span><span class="token punctuation">;</span>   registration<span class="token punctuation">.</span><span class="token function">setLoadOnStartup</span><span class="token punctuation">(</span>         <span class="token keyword">this</span><span class="token punctuation">.</span>webMvcProperties<span class="token punctuation">.</span><span class="token function">getServlet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getLoadOnStartup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>multipartConfig <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>      registration<span class="token punctuation">.</span><span class="token function">setMultipartConfig</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>multipartConfig<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">return</span> registration<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>2）、SpringBoot能不能支持其他的Servlet容器；</p><h3 id="3）、替换为其他嵌入式Servlet容器"><a href="#3）、替换为其他嵌入式Servlet容器" class="headerlink" title="3）、替换为其他嵌入式Servlet容器"></a>3）、替换为其他嵌入式Servlet容器</h3><p><img src="images/%E6%90%9C%E7%8B%97%E6%88%AA%E5%9B%BE20180302114401.png" alt=""></p><p>默认支持：</p><p>Tomcat（默认使用）</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>   引入web模块默认就是使用嵌入式的Tomcat作为Servlet容器；<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>Jetty</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- 引入web模块 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusions</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-tomcat<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusions</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--引入其他的Servlet容器--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-jetty<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>Undertow</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- 引入web模块 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusions</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-tomcat<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusions</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--引入其他的Servlet容器--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-undertow<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><h3 id="4）、嵌入式Servlet容器自动配置原理；"><a href="#4）、嵌入式Servlet容器自动配置原理；" class="headerlink" title="4）、嵌入式Servlet容器自动配置原理；"></a>4）、嵌入式Servlet容器自动配置原理；</h3><p>EmbeddedServletContainerAutoConfiguration：嵌入式的Servlet容器自动配置？</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@AutoConfigureOrder</span><span class="token punctuation">(</span>Ordered<span class="token punctuation">.</span>HIGHEST_PRECEDENCE<span class="token punctuation">)</span><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@ConditionalOnWebApplication</span><span class="token annotation punctuation">@Import</span><span class="token punctuation">(</span>BeanPostProcessorsRegistrar<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//导入BeanPostProcessorsRegistrar：Spring注解版；给容器中导入一些组件</span><span class="token comment" spellcheck="true">//导入了EmbeddedServletContainerCustomizerBeanPostProcessor：</span><span class="token comment" spellcheck="true">//后置处理器：bean初始化前后（创建完对象，还没赋值赋值）执行初始化工作</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EmbeddedServletContainerAutoConfiguration</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Configuration</span>    <span class="token annotation punctuation">@ConditionalOnClass</span><span class="token punctuation">(</span><span class="token punctuation">{</span> Servlet<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> Tomcat<span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//判断当前是否引入了Tomcat依赖；</span>    <span class="token annotation punctuation">@ConditionalOnMissingBean</span><span class="token punctuation">(</span>value <span class="token operator">=</span> EmbeddedServletContainerFactory<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> search <span class="token operator">=</span> SearchStrategy<span class="token punctuation">.</span>CURRENT<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//判断当前容器没有用户自己定义EmbeddedServletContainerFactory：嵌入式的Servlet容器工厂；作用：创建嵌入式的Servlet容器</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">EmbeddedTomcat</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Bean</span>        <span class="token keyword">public</span> TomcatEmbeddedServletContainerFactory <span class="token function">tomcatEmbeddedServletContainerFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">TomcatEmbeddedServletContainerFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * Nested configuration if Jetty is being used.     */</span>    <span class="token annotation punctuation">@Configuration</span>    <span class="token annotation punctuation">@ConditionalOnClass</span><span class="token punctuation">(</span><span class="token punctuation">{</span> Servlet<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> Server<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> Loader<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>            WebAppContext<span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@ConditionalOnMissingBean</span><span class="token punctuation">(</span>value <span class="token operator">=</span> EmbeddedServletContainerFactory<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> search <span class="token operator">=</span> SearchStrategy<span class="token punctuation">.</span>CURRENT<span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">EmbeddedJetty</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Bean</span>        <span class="token keyword">public</span> JettyEmbeddedServletContainerFactory <span class="token function">jettyEmbeddedServletContainerFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">JettyEmbeddedServletContainerFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * Nested configuration if Undertow is being used.     */</span>    <span class="token annotation punctuation">@Configuration</span>    <span class="token annotation punctuation">@ConditionalOnClass</span><span class="token punctuation">(</span><span class="token punctuation">{</span> Servlet<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> Undertow<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> SslClientAuthMode<span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@ConditionalOnMissingBean</span><span class="token punctuation">(</span>value <span class="token operator">=</span> EmbeddedServletContainerFactory<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> search <span class="token operator">=</span> SearchStrategy<span class="token punctuation">.</span>CURRENT<span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">EmbeddedUndertow</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Bean</span>        <span class="token keyword">public</span> UndertowEmbeddedServletContainerFactory <span class="token function">undertowEmbeddedServletContainerFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">UndertowEmbeddedServletContainerFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>1）、EmbeddedServletContainerFactory（嵌入式Servlet容器工厂）</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">EmbeddedServletContainerFactory</span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">//获取嵌入式的Servlet容器</span>   EmbeddedServletContainer <span class="token function">getEmbeddedServletContainer</span><span class="token punctuation">(</span>         ServletContextInitializer<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> initializers<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><img src="images/%E6%90%9C%E7%8B%97%E6%88%AA%E5%9B%BE20180302144835.png" alt=""></p><p>2）、EmbeddedServletContainer：（嵌入式的Servlet容器）</p><p><img src="images/%E6%90%9C%E7%8B%97%E6%88%AA%E5%9B%BE20180302144910.png" alt=""></p><p>3）、以<strong>TomcatEmbeddedServletContainerFactory</strong>为例</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> EmbeddedServletContainer <span class="token function">getEmbeddedServletContainer</span><span class="token punctuation">(</span>      ServletContextInitializer<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> initializers<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//创建一个Tomcat</span>   Tomcat tomcat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Tomcat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//配置Tomcat的基本环节</span>   File baseDir <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>baseDirectory <span class="token operator">!=</span> null <span class="token operator">?</span> <span class="token keyword">this</span><span class="token punctuation">.</span>baseDirectory         <span class="token operator">:</span> <span class="token function">createTempDir</span><span class="token punctuation">(</span><span class="token string">"tomcat"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   tomcat<span class="token punctuation">.</span><span class="token function">setBaseDir</span><span class="token punctuation">(</span>baseDir<span class="token punctuation">.</span><span class="token function">getAbsolutePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   Connector connector <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Connector</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>protocol<span class="token punctuation">)</span><span class="token punctuation">;</span>   tomcat<span class="token punctuation">.</span><span class="token function">getService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addConnector</span><span class="token punctuation">(</span>connector<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">customizeConnector</span><span class="token punctuation">(</span>connector<span class="token punctuation">)</span><span class="token punctuation">;</span>   tomcat<span class="token punctuation">.</span><span class="token function">setConnector</span><span class="token punctuation">(</span>connector<span class="token punctuation">)</span><span class="token punctuation">;</span>   tomcat<span class="token punctuation">.</span><span class="token function">getHost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setAutoDeploy</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">configureEngine</span><span class="token punctuation">(</span>tomcat<span class="token punctuation">.</span><span class="token function">getEngine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">for</span> <span class="token punctuation">(</span>Connector additionalConnector <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>additionalTomcatConnectors<span class="token punctuation">)</span> <span class="token punctuation">{</span>      tomcat<span class="token punctuation">.</span><span class="token function">getService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addConnector</span><span class="token punctuation">(</span>additionalConnector<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token function">prepareContext</span><span class="token punctuation">(</span>tomcat<span class="token punctuation">.</span><span class="token function">getHost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> initializers<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//将配置好的Tomcat传入进去，返回一个EmbeddedServletContainer；并且启动Tomcat服务器</span>   <span class="token keyword">return</span> <span class="token function">getTomcatEmbeddedServletContainer</span><span class="token punctuation">(</span>tomcat<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>4）、我们对嵌入式容器的配置修改是怎么生效？</p><pre><code>ServerProperties、EmbeddedServletContainerCustomizer</code></pre><p><strong>EmbeddedServletContainerCustomizer</strong>：定制器帮我们修改了Servlet容器的配置？</p><p>怎么修改的原理？</p><p>5）、容器中导入了<strong>EmbeddedServletContainerCustomizerBeanPostProcessor</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//初始化之前</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> Object <span class="token function">postProcessBeforeInitialization</span><span class="token punctuation">(</span>Object bean<span class="token punctuation">,</span> String beanName<span class="token punctuation">)</span>      <span class="token keyword">throws</span> BeansException <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//如果当前初始化的是一个ConfigurableEmbeddedServletContainer类型的组件</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>bean <span class="token keyword">instanceof</span> <span class="token class-name">ConfigurableEmbeddedServletContainer</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token comment" spellcheck="true">//</span>      <span class="token function">postProcessBeforeInitialization</span><span class="token punctuation">(</span><span class="token punctuation">(</span>ConfigurableEmbeddedServletContainer<span class="token punctuation">)</span> bean<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">return</span> bean<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">postProcessBeforeInitialization</span><span class="token punctuation">(</span>            ConfigurableEmbeddedServletContainer bean<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//获取所有的定制器，调用每一个定制器的customize方法来给Servlet容器进行属性赋值；</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>EmbeddedServletContainerCustomizer customizer <span class="token operator">:</span> <span class="token function">getCustomizers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        customizer<span class="token punctuation">.</span><span class="token function">customize</span><span class="token punctuation">(</span>bean<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">private</span> Collection<span class="token operator">&lt;</span>EmbeddedServletContainerCustomizer<span class="token operator">></span> <span class="token function">getCustomizers</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>customizers <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// Look up does not include the parent context</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>customizers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>EmbeddedServletContainerCustomizer<span class="token operator">></span><span class="token punctuation">(</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>beanFactory            <span class="token comment" spellcheck="true">//从容器中获取所有这葛类型的组件：EmbeddedServletContainerCustomizer</span>            <span class="token comment" spellcheck="true">//定制Servlet容器，给容器中可以添加一个EmbeddedServletContainerCustomizer类型的组件</span>            <span class="token punctuation">.</span><span class="token function">getBeansOfType</span><span class="token punctuation">(</span>EmbeddedServletContainerCustomizer<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>                            <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Collections<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>customizers<span class="token punctuation">,</span> AnnotationAwareOrderComparator<span class="token punctuation">.</span>INSTANCE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>customizers <span class="token operator">=</span> Collections<span class="token punctuation">.</span><span class="token function">unmodifiableList</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>customizers<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>customizers<span class="token punctuation">;</span><span class="token punctuation">}</span>ServerProperties也是定制器</code></pre><p>步骤：</p><p>1）、SpringBoot根据导入的依赖情况，给容器中添加相应的EmbeddedServletContainerFactory【TomcatEmbeddedServletContainerFactory】</p><p>2）、容器中某个组件要创建对象就会惊动后置处理器；EmbeddedServletContainerCustomizerBeanPostProcessor；</p><p>只要是嵌入式的Servlet容器工厂，后置处理器就工作；</p><p>3）、后置处理器，从容器中获取所有的<strong>EmbeddedServletContainerCustomizer</strong>，调用定制器的定制方法</p><p>###5）、嵌入式Servlet容器启动原理；</p><p>什么时候创建嵌入式的Servlet容器工厂？什么时候获取嵌入式的Servlet容器并启动Tomcat；</p><p>获取嵌入式的Servlet容器工厂：</p><p>1）、SpringBoot应用启动运行run方法</p><p>2）、refreshContext(context);SpringBoot刷新IOC容器【创建IOC容器对象，并初始化容器，创建容器中的每一个组件】；如果是web应用创建<strong>AnnotationConfigEmbeddedWebApplicationContext</strong>，否则：<strong>AnnotationConfigApplicationContext</strong></p><p>3）、refresh(context);<strong>刷新刚才创建好的ioc容器；</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">refresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> BeansException<span class="token punctuation">,</span> IllegalStateException <span class="token punctuation">{</span>   <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>startupShutdownMonitor<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// Prepare this context for refreshing.</span>      <span class="token function">prepareRefresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// Tell the subclass to refresh the internal bean factory.</span>      ConfigurableListableBeanFactory beanFactory <span class="token operator">=</span> <span class="token function">obtainFreshBeanFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// Prepare the bean factory for use in this context.</span>      <span class="token function">prepareBeanFactory</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">try</span> <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// Allows post-processing of the bean factory in context subclasses.</span>         <span class="token function">postProcessBeanFactory</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// Invoke factory processors registered as beans in the context.</span>         <span class="token function">invokeBeanFactoryPostProcessors</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// Register bean processors that intercept bean creation.</span>         <span class="token function">registerBeanPostProcessors</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// Initialize message source for this context.</span>         <span class="token function">initMessageSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// Initialize event multicaster for this context.</span>         <span class="token function">initApplicationEventMulticaster</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// Initialize other special beans in specific context subclasses.</span>         <span class="token function">onRefresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// Check for listener beans and register them.</span>         <span class="token function">registerListeners</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// Instantiate all remaining (non-lazy-init) singletons.</span>         <span class="token function">finishBeanFactoryInitialization</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// Last step: publish corresponding event.</span>         <span class="token function">finishRefresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">BeansException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isWarnEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            logger<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">"Exception encountered during context initialization - "</span> <span class="token operator">+</span>                  <span class="token string">"cancelling refresh attempt: "</span> <span class="token operator">+</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>         <span class="token comment" spellcheck="true">// Destroy already created singletons to avoid dangling resources.</span>         <span class="token function">destroyBeans</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// Reset 'active' flag.</span>         <span class="token function">cancelRefresh</span><span class="token punctuation">(</span>ex<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// Propagate exception to caller.</span>         <span class="token keyword">throw</span> ex<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">finally</span> <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// Reset common introspection caches in Spring's core, since we</span>         <span class="token comment" spellcheck="true">// might not ever need metadata for singleton beans anymore...</span>         <span class="token function">resetCommonCaches</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>4）、  onRefresh(); web的ioc容器重写了onRefresh方法</p><p>5）、webioc容器会创建嵌入式的Servlet容器；<strong>createEmbeddedServletContainer</strong>();</p><p><strong>6）、获取嵌入式的Servlet容器工厂：</strong></p><p>EmbeddedServletContainerFactory containerFactory = getEmbeddedServletContainerFactory();</p><p>​    从ioc容器中获取EmbeddedServletContainerFactory 组件；<strong>TomcatEmbeddedServletContainerFactory</strong>创建对象，后置处理器一看是这个对象，就获取所有的定制器来先定制Servlet容器的相关配置；</p><p>7）、<strong>使用容器工厂获取嵌入式的Servlet容器</strong>：this.embeddedServletContainer = containerFactory      .getEmbeddedServletContainer(getSelfInitializer());</p><p>8）、嵌入式的Servlet容器创建对象并启动Servlet容器；</p><p><strong>先启动嵌入式的Servlet容器，再将ioc容器中剩下没有创建出的对象获取出来；</strong></p><p><strong>==IOC容器启动创建嵌入式的Servlet容器==</strong></p><h2 id="9、使用外置的Servlet容器"><a href="#9、使用外置的Servlet容器" class="headerlink" title="9、使用外置的Servlet容器"></a>9、使用外置的Servlet容器</h2><p>嵌入式Servlet容器：应用打成可执行的jar</p><p>​        优点：简单、便携；</p><p>​        缺点：默认不支持JSP、优化定制比较复杂（使用定制器【ServerProperties、自定义EmbeddedServletContainerCustomizer】，自己编写嵌入式Servlet容器的创建工厂【EmbeddedServletContainerFactory】）；</p><p>外置的Servlet容器：外面安装Tomcat—应用war包的方式打包；</p><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><p>1）、必须创建一个war项目；（利用idea创建好目录结构）</p><p>2）、将嵌入式的Tomcat指定为provided；</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-tomcat<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>provided<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>3）、必须编写一个<strong>SpringBootServletInitializer</strong>的子类，并调用configure方法</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ServletInitializer</span> <span class="token keyword">extends</span> <span class="token class-name">SpringBootServletInitializer</span> <span class="token punctuation">{</span>   <span class="token annotation punctuation">@Override</span>   <span class="token keyword">protected</span> SpringApplicationBuilder <span class="token function">configure</span><span class="token punctuation">(</span>SpringApplicationBuilder application<span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token comment" spellcheck="true">//传入SpringBoot应用的主程序</span>      <span class="token keyword">return</span> application<span class="token punctuation">.</span><span class="token function">sources</span><span class="token punctuation">(</span>SpringBoot04WebJspApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>4）、启动服务器就可以使用；</p><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>jar包：执行SpringBoot主类的main方法，启动ioc容器，创建嵌入式的Servlet容器；</p><p>war包：启动服务器，<strong>服务器启动SpringBoot应用</strong>【SpringBootServletInitializer】，启动ioc容器；</p><p>servlet3.0（Spring注解版）：</p><p>8.2.4 Shared libraries / runtimes pluggability：</p><p>规则：</p><p>​    1）、服务器启动（web应用启动）会创建当前web应用里面每一个jar包里面ServletContainerInitializer实例：</p><p>​    2）、ServletContainerInitializer的实现放在jar包的META-INF/services文件夹下，有一个名为javax.servlet.ServletContainerInitializer的文件，内容就是ServletContainerInitializer的实现类的全类名</p><p>​    3）、还可以使用@HandlesTypes，在应用启动的时候加载我们感兴趣的类；</p><p>流程：</p><p>1）、启动Tomcat</p><p>2）、org\springframework\spring-web\4.3.14.RELEASE\spring-web-4.3.14.RELEASE.jar!\META-INF\services\javax.servlet.ServletContainerInitializer：</p><p>Spring的web模块里面有这个文件：<strong>org.springframework.web.SpringServletContainerInitializer</strong></p><p>3）、SpringServletContainerInitializer将@HandlesTypes(WebApplicationInitializer.class)标注的所有这个类型的类都传入到onStartup方法的Set&lt;Class&lt;?&gt;&gt;；为这些WebApplicationInitializer类型的类创建实例；</p><p>4）、每一个WebApplicationInitializer都调用自己的onStartup；</p><p><img src="images/%E6%90%9C%E7%8B%97%E6%88%AA%E5%9B%BE20180302221835.png" alt=""></p><p>5）、相当于我们的SpringBootServletInitializer的类会被创建对象，并执行onStartup方法</p><p>6）、SpringBootServletInitializer实例执行onStartup的时候会createRootApplicationContext；创建容器</p><pre class=" language-java"><code class="language-java"><span class="token keyword">protected</span> WebApplicationContext <span class="token function">createRootApplicationContext</span><span class="token punctuation">(</span>      ServletContext servletContext<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//1、创建SpringApplicationBuilder</span>   SpringApplicationBuilder builder <span class="token operator">=</span> <span class="token function">createSpringApplicationBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   StandardServletEnvironment environment <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StandardServletEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   environment<span class="token punctuation">.</span><span class="token function">initPropertySources</span><span class="token punctuation">(</span>servletContext<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>   builder<span class="token punctuation">.</span><span class="token function">environment</span><span class="token punctuation">(</span>environment<span class="token punctuation">)</span><span class="token punctuation">;</span>   builder<span class="token punctuation">.</span><span class="token function">main</span><span class="token punctuation">(</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   ApplicationContext parent <span class="token operator">=</span> <span class="token function">getExistingRootWebApplicationContext</span><span class="token punctuation">(</span>servletContext<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>parent <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"Root context already created (using as parent)."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      servletContext<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span>            WebApplicationContext<span class="token punctuation">.</span>ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>      builder<span class="token punctuation">.</span><span class="token function">initializers</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ParentContextApplicationContextInitializer</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   builder<span class="token punctuation">.</span><span class="token function">initializers</span><span class="token punctuation">(</span>         <span class="token keyword">new</span> <span class="token class-name">ServletContextApplicationContextInitializer</span><span class="token punctuation">(</span>servletContext<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   builder<span class="token punctuation">.</span><span class="token function">contextClass</span><span class="token punctuation">(</span>AnnotationConfigEmbeddedWebApplicationContext<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//调用configure方法，子类重写了这个方法，将SpringBoot的主程序类传入了进来</span>   builder <span class="token operator">=</span> <span class="token function">configure</span><span class="token punctuation">(</span>builder<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//使用builder创建一个Spring应用</span>   SpringApplication application <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>application<span class="token punctuation">.</span><span class="token function">getSources</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> AnnotationUtils         <span class="token punctuation">.</span><span class="token function">findAnnotation</span><span class="token punctuation">(</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Configuration<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>      application<span class="token punctuation">.</span><span class="token function">getSources</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   Assert<span class="token punctuation">.</span><span class="token function">state</span><span class="token punctuation">(</span><span class="token operator">!</span>application<span class="token punctuation">.</span><span class="token function">getSources</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>         <span class="token string">"No SpringApplication sources have been defined. Either override the "</span>               <span class="token operator">+</span> <span class="token string">"configure method or add an @Configuration annotation"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// Ensure error pages are registered</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>registerErrorPageFilter<span class="token punctuation">)</span> <span class="token punctuation">{</span>      application<span class="token punctuation">.</span><span class="token function">getSources</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>ErrorPageFilterConfiguration<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//启动Spring应用</span>   <span class="token keyword">return</span> <span class="token function">run</span><span class="token punctuation">(</span>application<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>7）、Spring的应用就启动并且创建IOC容器</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> ConfigurableApplicationContext <span class="token function">run</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>   StopWatch stopWatch <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StopWatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   stopWatch<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   ConfigurableApplicationContext context <span class="token operator">=</span> null<span class="token punctuation">;</span>   FailureAnalyzers analyzers <span class="token operator">=</span> null<span class="token punctuation">;</span>   <span class="token function">configureHeadlessProperty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   SpringApplicationRunListeners listeners <span class="token operator">=</span> <span class="token function">getRunListeners</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>   listeners<span class="token punctuation">.</span><span class="token function">starting</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">try</span> <span class="token punctuation">{</span>      ApplicationArguments applicationArguments <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultApplicationArguments</span><span class="token punctuation">(</span>            args<span class="token punctuation">)</span><span class="token punctuation">;</span>      ConfigurableEnvironment environment <span class="token operator">=</span> <span class="token function">prepareEnvironment</span><span class="token punctuation">(</span>listeners<span class="token punctuation">,</span>            applicationArguments<span class="token punctuation">)</span><span class="token punctuation">;</span>      Banner printedBanner <span class="token operator">=</span> <span class="token function">printBanner</span><span class="token punctuation">(</span>environment<span class="token punctuation">)</span><span class="token punctuation">;</span>      context <span class="token operator">=</span> <span class="token function">createApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      analyzers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FailureAnalyzers</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">prepareContext</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> environment<span class="token punctuation">,</span> listeners<span class="token punctuation">,</span> applicationArguments<span class="token punctuation">,</span>            printedBanner<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//刷新IOC容器</span>      <span class="token function">refreshContext</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">afterRefresh</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> applicationArguments<span class="token punctuation">)</span><span class="token punctuation">;</span>      listeners<span class="token punctuation">.</span><span class="token function">finished</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>      stopWatch<span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>logStartupInfo<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">new</span> <span class="token class-name">StartupInfoLogger</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>mainApplicationClass<span class="token punctuation">)</span>               <span class="token punctuation">.</span><span class="token function">logStarted</span><span class="token punctuation">(</span><span class="token function">getApplicationLog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> stopWatch<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">return</span> context<span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">handleRunFailure</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> listeners<span class="token punctuation">,</span> analyzers<span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span>ex<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>==启动Servlet容器，再启动SpringBoot应用==</strong></p><h1 id="五、Docker"><a href="#五、Docker" class="headerlink" title="五、Docker"></a>五、Docker</h1><h2 id="1、简介-1"><a href="#1、简介-1" class="headerlink" title="1、简介"></a>1、简介</h2><p><strong>Docker</strong>是一个开源的应用容器引擎；是一个轻量级容器技术；</p><p>Docker支持将软件编译成一个镜像；然后在镜像中各种软件做好配置，将镜像发布出去，其他使用者可以直接使用这个镜像；</p><p>运行中的这个镜像称为容器，容器启动是非常快速的。</p><p><img src="images/%E6%90%9C%E7%8B%97%E6%88%AA%E5%9B%BE20180303145450.png" alt=""></p><p><img src="images/%E6%90%9C%E7%8B%97%E6%88%AA%E5%9B%BE20180303145531.png" alt=""></p><h2 id="2、核心概念"><a href="#2、核心概念" class="headerlink" title="2、核心概念"></a>2、核心概念</h2><p>docker主机(Host)：安装了Docker程序的机器（Docker直接安装在操作系统之上）；</p><p>docker客户端(Client)：连接docker主机进行操作；</p><p>docker仓库(Registry)：用来保存各种打包好的软件镜像；</p><p>docker镜像(Images)：软件打包好的镜像；放在docker仓库中；</p><p>docker容器(Container)：镜像启动后的实例称为一个容器；容器是独立运行的一个或一组应用</p><p><img src="images/%E6%90%9C%E7%8B%97%E6%88%AA%E5%9B%BE20180303165113.png" alt=""></p><p>使用Docker的步骤：</p><p>1）、安装Docker</p><p>2）、去Docker仓库找到这个软件对应的镜像；</p><p>3）、使用Docker运行这个镜像，这个镜像就会生成一个Docker容器；</p><p>4）、对容器的启动停止就是对软件的启动停止；</p><h2 id="3、安装Docker"><a href="#3、安装Docker" class="headerlink" title="3、安装Docker"></a>3、安装Docker</h2><h4 id="1）、安装linux虚拟机"><a href="#1）、安装linux虚拟机" class="headerlink" title="1）、安装linux虚拟机"></a>1）、安装linux虚拟机</h4><p>​    1）、VMWare、VirtualBox（安装）；</p><p>​    2）、导入虚拟机文件centos7-atguigu.ova；</p><p>​    3）、双击启动linux虚拟机;使用  root/ 123456登陆</p><p>​    4）、使用客户端连接linux服务器进行命令操作；</p><p>​    5）、设置虚拟机网络；</p><p>​        桥接网络===选好网卡====接入网线；</p><p>​    6）、设置好网络以后使用命令重启虚拟机的网络</p><pre class=" language-shell"><code class="language-shell">service network restart</code></pre><p>​    7）、查看linux的ip地址</p><pre class=" language-shell"><code class="language-shell">ip addr</code></pre><p>​    8）、使用客户端连接linux；</p><h4 id="2）、在linux虚拟机上安装docker"><a href="#2）、在linux虚拟机上安装docker" class="headerlink" title="2）、在linux虚拟机上安装docker"></a>2）、在linux虚拟机上安装docker</h4><p>步骤：</p><pre class=" language-shell"><code class="language-shell">1、检查内核版本，必须是3.10及以上uname -r2、安装dockeryum install docker3、输入y确认安装4、启动docker[root@localhost ~]# systemctl start docker[root@localhost ~]# docker -vDocker version 1.12.6, build 3e8e77d/1.12.65、开机启动docker[root@localhost ~]# systemctl enable dockerCreated symlink from /etc/systemd/system/multi-user.target.wants/docker.service to /usr/lib/systemd/system/docker.service.6、停止dockersystemctl stop docker</code></pre><h2 id="4、Docker常用命令-amp-操作"><a href="#4、Docker常用命令-amp-操作" class="headerlink" title="4、Docker常用命令&amp;操作"></a>4、Docker常用命令&amp;操作</h2><h3 id="1）、镜像操作"><a href="#1）、镜像操作" class="headerlink" title="1）、镜像操作"></a>1）、镜像操作</h3><table><thead><tr><th>操作</th><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>检索</td><td>docker  search 关键字  eg：docker  search redis</td><td>我们经常去docker  hub上检索镜像的详细信息，如镜像的TAG。</td></tr><tr><td>拉取</td><td>docker pull 镜像名:tag</td><td>:tag是可选的，tag表示标签，多为软件的版本，默认是latest</td></tr><tr><td>列表</td><td>docker images</td><td>查看所有本地镜像</td></tr><tr><td>删除</td><td>docker rmi image-id</td><td>删除指定的本地镜像</td></tr></tbody></table><p><a href="https://hub.docker.com/" target="_blank" rel="noopener">https://hub.docker.com/</a></p><h3 id="2）、容器操作"><a href="#2）、容器操作" class="headerlink" title="2）、容器操作"></a>2）、容器操作</h3><p>软件镜像（QQ安装程序）—-运行镜像—-产生一个容器（正在运行的软件，运行的QQ）；</p><p>步骤：</p><pre class=" language-shell"><code class="language-shell">1、搜索镜像[root@localhost ~]# docker search tomcat2、拉取镜像[root@localhost ~]# docker pull tomcat3、根据镜像启动容器docker run --name mytomcat -d tomcat:latest4、docker ps  查看运行中的容器5、 停止运行中的容器docker stop  容器的id6、查看所有的容器docker ps -a7、启动容器docker start 容器id8、删除一个容器 docker rm 容器id9、启动一个做了端口映射的tomcat[root@localhost ~]# docker run -d -p 8888:8080 tomcat-d：后台运行-p: 将主机的端口映射到容器的一个端口    主机端口:容器内部的端口10、为了演示简单关闭了linux的防火墙service firewalld status ；查看防火墙状态service firewalld stop：关闭防火墙11、查看容器的日志docker logs container-name/container-id更多命令参看https://docs.docker.com/engine/reference/commandline/docker/可以参考每一个镜像的文档</code></pre><h3 id="3）、安装MySQL示例"><a href="#3）、安装MySQL示例" class="headerlink" title="3）、安装MySQL示例"></a>3）、安装MySQL示例</h3><pre class=" language-shell"><code class="language-shell">docker pull mysql</code></pre><p>错误的启动</p><pre class=" language-shell"><code class="language-shell">[root@localhost ~]# docker run --name mysql01 -d mysql42f09819908bb72dd99ae19e792e0a5d03c48638421fa64cce5f8ba0f40f5846mysql退出了[root@localhost ~]# docker ps -aCONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS                           PORTS               NAMES42f09819908b        mysql               "docker-entrypoint.sh"   34 seconds ago      Exited (1) 33 seconds ago                            mysql01538bde63e500        tomcat              "catalina.sh run"        About an hour ago   Exited (143) About an hour ago                       compassionate_goldstinec4f1ac60b3fc        tomcat              "catalina.sh run"        About an hour ago   Exited (143) About an hour ago                       lonely_fermi81ec743a5271        tomcat              "catalina.sh run"        About an hour ago   Exited (143) About an hour ago                       sick_ramanujan//错误日志[root@localhost ~]# docker logs 42f09819908berror: database is uninitialized and password option is not specified   You need to specify one of MYSQL_ROOT_PASSWORD, MYSQL_ALLOW_EMPTY_PASSWORD and MYSQL_RANDOM_ROOT_PASSWORD；这个三个参数必须指定一个</code></pre><p>正确的启动</p><pre class=" language-shell"><code class="language-shell">[root@localhost ~]# docker run --name mysql01 -e MYSQL_ROOT_PASSWORD=123456 -d mysqlb874c56bec49fb43024b3805ab51e9097da779f2f572c22c695305dedd684c5f[root@localhost ~]# docker psCONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS               NAMESb874c56bec49        mysql               "docker-entrypoint.sh"   4 seconds ago       Up 3 seconds        3306/tcp            mysql01</code></pre><p>做了端口映射</p><pre class=" language-shell"><code class="language-shell">[root@localhost ~]# docker run -p 3306:3306 --name mysql02 -e MYSQL_ROOT_PASSWORD=123456 -d mysqlad10e4bc5c6a0f61cbad43898de71d366117d120e39db651844c0e73863b9434[root@localhost ~]# docker psCONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                    NAMESad10e4bc5c6a        mysql               "docker-entrypoint.sh"   4 seconds ago       Up 2 seconds        0.0.0.0:3306->3306/tcp   mysql02</code></pre><p>几个其他的高级操作</p><pre><code>docker run --name mysql03 -v /conf/mysql:/etc/mysql/conf.d -e MYSQL_ROOT_PASSWORD=my-secret-pw -d mysql:tag把主机的/conf/mysql文件夹挂载到 mysqldocker容器的/etc/mysql/conf.d文件夹里面改mysql的配置文件就只需要把mysql配置文件放在自定义的文件夹下（/conf/mysql）docker run --name some-mysql -e MYSQL_ROOT_PASSWORD=my-secret-pw -d mysql:tag --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci指定mysql的一些配置参数</code></pre><h1 id="六、SpringBoot与数据访问"><a href="#六、SpringBoot与数据访问" class="headerlink" title="六、SpringBoot与数据访问"></a>六、SpringBoot与数据访问</h1><h2 id="1、JDBC"><a href="#1、JDBC" class="headerlink" title="1、JDBC"></a>1、JDBC</h2><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-jdbc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">datasource</span><span class="token punctuation">:</span>    <span class="token key atrule">username</span><span class="token punctuation">:</span> root    <span class="token key atrule">password</span><span class="token punctuation">:</span> <span class="token number">123456</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//192.168.15.22<span class="token punctuation">:</span>3306/jdbc    <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> com.mysql.jdbc.Driver</code></pre><p>效果：</p><p>​    默认是用org.apache.tomcat.jdbc.pool.DataSource作为数据源；</p><p>​    数据源的相关配置都在DataSourceProperties里面；</p><p>自动配置原理：</p><p>org.springframework.boot.autoconfigure.jdbc：</p><p>1、参考DataSourceConfiguration，根据配置创建数据源，默认使用Tomcat连接池；可以使用spring.datasource.type指定自定义的数据源类型；</p><p>2、SpringBoot默认可以支持；</p><pre><code>org.apache.tomcat.jdbc.pool.DataSource、HikariDataSource、BasicDataSource、</code></pre><p>3、自定义数据源类型</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Generic DataSource configuration. */</span><span class="token annotation punctuation">@ConditionalOnMissingBean</span><span class="token punctuation">(</span>DataSource<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ConditionalOnProperty</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"spring.datasource.type"</span><span class="token punctuation">)</span><span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Generic</span> <span class="token punctuation">{</span>   <span class="token annotation punctuation">@Bean</span>   <span class="token keyword">public</span> DataSource <span class="token function">dataSource</span><span class="token punctuation">(</span>DataSourceProperties properties<span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token comment" spellcheck="true">//使用DataSourceBuilder创建数据源，利用反射创建响应type的数据源，并且绑定相关属性</span>      <span class="token keyword">return</span> properties<span class="token punctuation">.</span><span class="token function">initializeDataSourceBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>4、<strong>DataSourceInitializer：ApplicationListener</strong>；</p><p>​    作用：</p><p>​        1）、runSchemaScripts();运行建表语句；</p><p>​        2）、runDataScripts();运行插入数据的sql语句；</p><p>默认只需要将文件命名为：</p><pre class=" language-properties"><code class="language-properties">schema-*.sql、data-*.sql默认规则：schema.sql，schema-all.sql；<span class="token attr-name">可以使用</span> <span class="token attr-value">  </span><span class="token attr-name">    schema</span><span class="token punctuation">:</span><span class="token attr-name">      -</span> <span class="token attr-value">classpath:department.sql</span>      指定位置</code></pre><p>5、操作数据库：自动配置了JdbcTemplate操作数据库</p><h2 id="2、整合Druid数据源"><a href="#2、整合Druid数据源" class="headerlink" title="2、整合Druid数据源"></a>2、整合Druid数据源</h2><pre class=" language-java"><code class="language-java">导入druid数据源<span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DruidConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"spring.datasource"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> DataSource <span class="token function">druid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token keyword">return</span>  <span class="token keyword">new</span> <span class="token class-name">DruidDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//配置Druid的监控</span>    <span class="token comment" spellcheck="true">//1、配置一个管理后台的Servlet</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> ServletRegistrationBean <span class="token function">statViewServlet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        ServletRegistrationBean bean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServletRegistrationBean</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StatViewServlet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"/druid/*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>String<span class="token operator">></span> initParams <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        initParams<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"loginUsername"</span><span class="token punctuation">,</span><span class="token string">"admin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        initParams<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"loginPassword"</span><span class="token punctuation">,</span><span class="token string">"123456"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        initParams<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"allow"</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//默认就是允许所有访问</span>        initParams<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"deny"</span><span class="token punctuation">,</span><span class="token string">"192.168.15.21"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bean<span class="token punctuation">.</span><span class="token function">setInitParameters</span><span class="token punctuation">(</span>initParams<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> bean<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//2、配置一个web监控的filter</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> FilterRegistrationBean <span class="token function">webStatFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        FilterRegistrationBean bean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FilterRegistrationBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bean<span class="token punctuation">.</span><span class="token function">setFilter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">WebStatFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>String<span class="token operator">></span> initParams <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        initParams<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"exclusions"</span><span class="token punctuation">,</span><span class="token string">"*.js,*.css,/druid/*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bean<span class="token punctuation">.</span><span class="token function">setInitParameters</span><span class="token punctuation">(</span>initParams<span class="token punctuation">)</span><span class="token punctuation">;</span>        bean<span class="token punctuation">.</span><span class="token function">setUrlPatterns</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"/*"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span>  bean<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="3、整合MyBatis"><a href="#3、整合MyBatis" class="headerlink" title="3、整合MyBatis"></a>3、整合MyBatis</h2><pre class=" language-xml"><code class="language-xml">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis.spring.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.3.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p><img src="images/%E6%90%9C%E7%8B%97%E6%88%AA%E5%9B%BE20180305194443.png" alt=""></p><p>步骤：</p><p>​    1）、配置数据源相关属性（见上一节Druid）</p><p>​    2）、给数据库建表</p><p>​    3）、创建JavaBean</p><h3 id="4）、注解版"><a href="#4）、注解版" class="headerlink" title="4）、注解版"></a>4）、注解版</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//指定这是一个操作数据库的mapper</span><span class="token annotation punctuation">@Mapper</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">DepartmentMapper</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Select</span><span class="token punctuation">(</span><span class="token string">"select * from department where id=#{id}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Department <span class="token function">getDeptById</span><span class="token punctuation">(</span>Integer id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Delete</span><span class="token punctuation">(</span><span class="token string">"delete from department where id=#{id}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">deleteDeptById</span><span class="token punctuation">(</span>Integer id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Options</span><span class="token punctuation">(</span>useGeneratedKeys <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span>keyProperty <span class="token operator">=</span> <span class="token string">"id"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@Insert</span><span class="token punctuation">(</span><span class="token string">"insert into department(departmentName) values(#{departmentName})"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">insertDept</span><span class="token punctuation">(</span>Department department<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Update</span><span class="token punctuation">(</span><span class="token string">"update department set departmentName=#{departmentName} where id=#{id}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">updateDept</span><span class="token punctuation">(</span>Department department<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>问题：</p><p>自定义MyBatis的配置规则；给容器中添加一个ConfigurationCustomizer；</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@org</span><span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Configuration<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyBatisConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> ConfigurationCustomizer <span class="token function">configurationCustomizer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ConfigurationCustomizer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">customize</span><span class="token punctuation">(</span>Configuration configuration<span class="token punctuation">)</span> <span class="token punctuation">{</span>                configuration<span class="token punctuation">.</span><span class="token function">setMapUnderscoreToCamelCase</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java">使用MapperScan批量扫描所有的Mapper接口；<span class="token annotation punctuation">@MapperScan</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"com.atguigu.springboot.mapper"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@SpringBootApplication</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringBoot06DataMybatisApplication</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>SpringBoot06DataMybatisApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="5）、配置文件版"><a href="#5）、配置文件版" class="headerlink" title="5）、配置文件版"></a>5）、配置文件版</h3><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">mybatis</span><span class="token punctuation">:</span>  <span class="token key atrule">config-location</span><span class="token punctuation">:</span> classpath<span class="token punctuation">:</span>mybatis/mybatis<span class="token punctuation">-</span>config.xml 指定全局配置文件的位置  <span class="token key atrule">mapper-locations</span><span class="token punctuation">:</span> classpath<span class="token punctuation">:</span>mybatis/mapper/*.xml  指定sql映射文件的位置</code></pre><p>更多使用参照</p><p><a href="http://www.mybatis.org/spring-boot-starter/mybatis-spring-boot-autoconfigure/" target="_blank" rel="noopener">http://www.mybatis.org/spring-boot-starter/mybatis-spring-boot-autoconfigure/</a></p><h2 id="4、整合SpringData-JPA"><a href="#4、整合SpringData-JPA" class="headerlink" title="4、整合SpringData JPA"></a>4、整合SpringData JPA</h2><h3 id="1）、SpringData简介"><a href="#1）、SpringData简介" class="headerlink" title="1）、SpringData简介"></a>1）、SpringData简介</h3><p><img src="images/%E6%90%9C%E7%8B%97%E6%88%AA%E5%9B%BE20180306105412.png" alt=""></p><h3 id="2）、整合SpringData-JPA"><a href="#2）、整合SpringData-JPA" class="headerlink" title="2）、整合SpringData JPA"></a>2）、整合SpringData JPA</h3><p>JPA:ORM（Object Relational Mapping）；</p><p>1）、编写一个实体类（bean）和数据表进行映射，并且配置好映射关系；</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//使用JPA注解配置映射关系</span><span class="token annotation punctuation">@Entity</span> <span class="token comment" spellcheck="true">//告诉JPA这是一个实体类（和数据表映射的类）</span><span class="token annotation punctuation">@Table</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"tbl_user"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//@Table来指定和哪个数据表对应;如果省略默认表名就是user；</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Id</span> <span class="token comment" spellcheck="true">//这是一个主键</span>    <span class="token annotation punctuation">@GeneratedValue</span><span class="token punctuation">(</span>strategy <span class="token operator">=</span> GenerationType<span class="token punctuation">.</span>IDENTITY<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//自增主键</span>    <span class="token keyword">private</span> Integer id<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"last_name"</span><span class="token punctuation">,</span>length <span class="token operator">=</span> <span class="token number">50</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//这是和数据表对应的一个列</span>    <span class="token keyword">private</span> String lastName<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Column</span> <span class="token comment" spellcheck="true">//省略默认列名就是属性名</span>    <span class="token keyword">private</span> String email<span class="token punctuation">;</span></code></pre><p>2）、编写一个Dao接口来操作实体类对应的数据表（Repository）</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//继承JpaRepository来完成对数据库的操作</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserRepository</span> <span class="token keyword">extends</span> <span class="token class-name">JpaRepository</span><span class="token operator">&lt;</span>User<span class="token punctuation">,</span>Integer<span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><p>3）、基本的配置JpaProperties</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>   <span class="token key atrule">jpa</span><span class="token punctuation">:</span>    <span class="token key atrule">hibernate</span><span class="token punctuation">:</span><span class="token comment" spellcheck="true">#     更新或者创建数据表结构</span>      <span class="token key atrule">ddl-auto</span><span class="token punctuation">:</span> update<span class="token comment" spellcheck="true">#    控制台显示SQL</span>    <span class="token key atrule">show-sql</span><span class="token punctuation">:</span> <span class="token boolean important">true</span></code></pre><h1 id="七、启动配置原理"><a href="#七、启动配置原理" class="headerlink" title="七、启动配置原理"></a>七、启动配置原理</h1><p>几个重要的事件回调机制</p><p>配置在META-INF/spring.factories</p><p><strong>ApplicationContextInitializer</strong></p><p><strong>SpringApplicationRunListener</strong></p><p>只需要放在ioc容器中</p><p><strong>ApplicationRunner</strong></p><p><strong>CommandLineRunner</strong></p><p>启动流程：</p><h2 id="1、创建SpringApplication对象"><a href="#1、创建SpringApplication对象" class="headerlink" title="1、创建SpringApplication对象"></a><strong>1、创建SpringApplication对象</strong></h2><pre class=" language-java"><code class="language-java"><span class="token function">initialize</span><span class="token punctuation">(</span>sources<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">initialize</span><span class="token punctuation">(</span>Object<span class="token punctuation">[</span><span class="token punctuation">]</span> sources<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//保存主配置类</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>sources <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> sources<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>sources<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>sources<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//判断当前是否一个web应用</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>webEnvironment <span class="token operator">=</span> <span class="token function">deduceWebEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//从类路径下找到META-INF/spring.factories配置的所有ApplicationContextInitializer；然后保存起来</span>    <span class="token function">setInitializers</span><span class="token punctuation">(</span><span class="token punctuation">(</span>Collection<span class="token punctuation">)</span> <span class="token function">getSpringFactoriesInstances</span><span class="token punctuation">(</span>        ApplicationContextInitializer<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//从类路径下找到ETA-INF/spring.factories配置的所有ApplicationListener</span>    <span class="token function">setListeners</span><span class="token punctuation">(</span><span class="token punctuation">(</span>Collection<span class="token punctuation">)</span> <span class="token function">getSpringFactoriesInstances</span><span class="token punctuation">(</span>ApplicationListener<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//从多个配置类中找到有main方法的主配置类</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>mainApplicationClass <span class="token operator">=</span> <span class="token function">deduceMainApplicationClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><img src="images/%E6%90%9C%E7%8B%97%E6%88%AA%E5%9B%BE20180306145727.png" alt=""></p><p><img src="images/%E6%90%9C%E7%8B%97%E6%88%AA%E5%9B%BE20180306145855.png" alt=""></p><h2 id="2、运行run方法"><a href="#2、运行run方法" class="headerlink" title="2、运行run方法"></a>2、运行run方法</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> ConfigurableApplicationContext <span class="token function">run</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>   StopWatch stopWatch <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StopWatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   stopWatch<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   ConfigurableApplicationContext context <span class="token operator">=</span> null<span class="token punctuation">;</span>   FailureAnalyzers analyzers <span class="token operator">=</span> null<span class="token punctuation">;</span>   <span class="token function">configureHeadlessProperty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//获取SpringApplicationRunListeners；从类路径下META-INF/spring.factories</span>   SpringApplicationRunListeners listeners <span class="token operator">=</span> <span class="token function">getRunListeners</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//回调所有的获取SpringApplicationRunListener.starting()方法</span>   listeners<span class="token punctuation">.</span><span class="token function">starting</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">try</span> <span class="token punctuation">{</span>       <span class="token comment" spellcheck="true">//封装命令行参数</span>      ApplicationArguments applicationArguments <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultApplicationArguments</span><span class="token punctuation">(</span>            args<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//准备环境</span>      ConfigurableEnvironment environment <span class="token operator">=</span> <span class="token function">prepareEnvironment</span><span class="token punctuation">(</span>listeners<span class="token punctuation">,</span>            applicationArguments<span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token comment" spellcheck="true">//创建环境完成后回调SpringApplicationRunListener.environmentPrepared()；表示环境准备完成</span>      Banner printedBanner <span class="token operator">=</span> <span class="token function">printBanner</span><span class="token punctuation">(</span>environment<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//创建ApplicationContext；决定创建web的ioc还是普通的ioc</span>      context <span class="token operator">=</span> <span class="token function">createApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      analyzers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FailureAnalyzers</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//准备上下文环境;将environment保存到ioc中；而且applyInitializers()；</span>       <span class="token comment" spellcheck="true">//applyInitializers()：回调之前保存的所有的ApplicationContextInitializer的initialize方法</span>       <span class="token comment" spellcheck="true">//回调所有的SpringApplicationRunListener的contextPrepared()；</span>       <span class="token comment" spellcheck="true">//</span>      <span class="token function">prepareContext</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> environment<span class="token punctuation">,</span> listeners<span class="token punctuation">,</span> applicationArguments<span class="token punctuation">,</span>            printedBanner<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//prepareContext运行完成以后回调所有的SpringApplicationRunListener的contextLoaded（）；</span>       <span class="token comment" spellcheck="true">//s刷新容器；ioc容器初始化（如果是web应用还会创建嵌入式的Tomcat）；Spring注解版</span>       <span class="token comment" spellcheck="true">//扫描，创建，加载所有组件的地方；（配置类，组件，自动配置）</span>      <span class="token function">refreshContext</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//从ioc容器中获取所有的ApplicationRunner和CommandLineRunner进行回调</span>       <span class="token comment" spellcheck="true">//ApplicationRunner先回调，CommandLineRunner再回调</span>      <span class="token function">afterRefresh</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> applicationArguments<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//所有的SpringApplicationRunListener回调finished方法</span>      listeners<span class="token punctuation">.</span><span class="token function">finished</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>      stopWatch<span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>logStartupInfo<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">new</span> <span class="token class-name">StartupInfoLogger</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>mainApplicationClass<span class="token punctuation">)</span>               <span class="token punctuation">.</span><span class="token function">logStarted</span><span class="token punctuation">(</span><span class="token function">getApplicationLog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> stopWatch<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>       <span class="token comment" spellcheck="true">//整个SpringBoot应用启动完成以后返回启动的ioc容器；</span>      <span class="token keyword">return</span> context<span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">handleRunFailure</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> listeners<span class="token punctuation">,</span> analyzers<span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span>ex<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="3、事件监听机制"><a href="#3、事件监听机制" class="headerlink" title="3、事件监听机制"></a>3、事件监听机制</h2><p>配置在META-INF/spring.factories</p><p><strong>ApplicationContextInitializer</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloApplicationContextInitializer</span> <span class="token keyword">implements</span> <span class="token class-name">ApplicationContextInitializer</span><span class="token operator">&lt;</span>ConfigurableApplicationContext<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">initialize</span><span class="token punctuation">(</span>ConfigurableApplicationContext applicationContext<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"ApplicationContextInitializer...initialize..."</span><span class="token operator">+</span>applicationContext<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>SpringApplicationRunListener</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloSpringApplicationRunListener</span> <span class="token keyword">implements</span> <span class="token class-name">SpringApplicationRunListener</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//必须有的构造器</span>    <span class="token keyword">public</span> <span class="token function">HelloSpringApplicationRunListener</span><span class="token punctuation">(</span>SpringApplication application<span class="token punctuation">,</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">starting</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"SpringApplicationRunListener...starting..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">environmentPrepared</span><span class="token punctuation">(</span>ConfigurableEnvironment environment<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Object o <span class="token operator">=</span> environment<span class="token punctuation">.</span><span class="token function">getSystemProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"os.name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"SpringApplicationRunListener...environmentPrepared.."</span><span class="token operator">+</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">contextPrepared</span><span class="token punctuation">(</span>ConfigurableApplicationContext context<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"SpringApplicationRunListener...contextPrepared..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">contextLoaded</span><span class="token punctuation">(</span>ConfigurableApplicationContext context<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"SpringApplicationRunListener...contextLoaded..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">finished</span><span class="token punctuation">(</span>ConfigurableApplicationContext context<span class="token punctuation">,</span> Throwable exception<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"SpringApplicationRunListener...finished..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>配置（META-INF/spring.factories）</p><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">org.springframework.context.ApplicationContextInitializer</span><span class="token punctuation">=</span><span class="token attr-value">\com.atguigu.springboot.listener.HelloApplicationContextInitializer</span><span class="token attr-name">org.springframework.boot.SpringApplicationRunListener</span><span class="token punctuation">=</span><span class="token attr-value">\com.atguigu.springboot.listener.HelloSpringApplicationRunListener</span></code></pre><p>只需要放在ioc容器中</p><p><strong>ApplicationRunner</strong></p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloApplicationRunner</span> <span class="token keyword">implements</span> <span class="token class-name">ApplicationRunner</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span>ApplicationArguments args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"ApplicationRunner...run...."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>CommandLineRunner</strong></p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloCommandLineRunner</span> <span class="token keyword">implements</span> <span class="token class-name">CommandLineRunner</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"CommandLineRunner...run..."</span><span class="token operator">+</span> Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h1 id="八、自定义starter"><a href="#八、自定义starter" class="headerlink" title="八、自定义starter"></a>八、自定义starter</h1><p>starter：</p><p>​    1、这个场景需要使用到的依赖是什么？</p><p>​    2、如何编写自动配置</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span>  <span class="token comment" spellcheck="true">//指定这个类是一个配置类</span><span class="token annotation punctuation">@ConditionalOnXXX</span>  <span class="token comment" spellcheck="true">//在指定条件成立的情况下自动配置类生效</span><span class="token annotation punctuation">@AutoConfigureAfter</span>  <span class="token comment" spellcheck="true">//指定自动配置类的顺序</span><span class="token annotation punctuation">@Bean</span>  <span class="token comment" spellcheck="true">//给容器中添加组件</span><span class="token annotation punctuation">@ConfigurationPropertie</span>结合相关xxxProperties类来绑定相关的配置<span class="token annotation punctuation">@EnableConfigurationProperties</span> <span class="token comment" spellcheck="true">//让xxxProperties生效加入到容器中</span>自动配置类要能加载将需要启动就加载的自动配置类，配置在META<span class="token operator">-</span>INF<span class="token operator">/</span>spring<span class="token punctuation">.</span>factoriesorg<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>EnableAutoConfiguration<span class="token operator">=</span>\org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>admin<span class="token punctuation">.</span>SpringApplicationAdminJmxAutoConfiguration<span class="token punctuation">,</span>\org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>aop<span class="token punctuation">.</span>AopAutoConfiguration<span class="token punctuation">,</span>\</code></pre><p>​    3、模式：</p><p>启动器只用来做依赖导入；</p><p>专门来写一个自动配置模块；</p><p>启动器依赖自动配置；别人只需要引入启动器（starter）</p><p>mybatis-spring-boot-starter；自定义启动器名-spring-boot-starter</p><p>步骤：</p><p>1）、启动器模块</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">></span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.atguigu.starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>atguigu-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--启动器--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--引入自动配置模块--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.atguigu.starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>atguigu-spring-boot-starter-autoconfigurer<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>0.0.1-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">></span></span></code></pre><p>2）、自动配置模块</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>   <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">></span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.atguigu.starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>atguigu-spring-boot-starter-autoconfigurer<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>0.0.1-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>packaging</span><span class="token punctuation">></span></span>jar<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>packaging</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>atguigu-spring-boot-starter-autoconfigurer<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">></span></span>Demo project for Spring Boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-parent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.5.10.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>relativePath</span><span class="token punctuation">/></span></span> <span class="token comment" spellcheck="true">&lt;!-- lookup parent from repository --></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project.build.sourceEncoding</span><span class="token punctuation">></span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project.build.sourceEncoding</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project.reporting.outputEncoding</span><span class="token punctuation">></span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project.reporting.outputEncoding</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>java.version</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>java.version</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>      <span class="token comment" spellcheck="true">&lt;!--引入spring-boot-starter；所有starter的基本配置--></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">></span></span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>starter<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>context<span class="token punctuation">.</span>properties<span class="token punctuation">.</span>ConfigurationProperties<span class="token punctuation">;</span><span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"atguigu.hello"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloProperties</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String prefix<span class="token punctuation">;</span>    <span class="token keyword">private</span> String suffix<span class="token punctuation">;</span>    <span class="token keyword">public</span> String <span class="token function">getPrefix</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> prefix<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setPrefix</span><span class="token punctuation">(</span>String prefix<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>prefix <span class="token operator">=</span> prefix<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getSuffix</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> suffix<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setSuffix</span><span class="token punctuation">(</span>String suffix<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>suffix <span class="token operator">=</span> suffix<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>starter<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloService</span> <span class="token punctuation">{</span>    HelloProperties helloProperties<span class="token punctuation">;</span>    <span class="token keyword">public</span> HelloProperties <span class="token function">getHelloProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> helloProperties<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setHelloProperties</span><span class="token punctuation">(</span>HelloProperties helloProperties<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>helloProperties <span class="token operator">=</span> helloProperties<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">sayHellAtguigu</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> helloProperties<span class="token punctuation">.</span><span class="token function">getPrefix</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"-"</span> <span class="token operator">+</span>name <span class="token operator">+</span> helloProperties<span class="token punctuation">.</span><span class="token function">getSuffix</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>starter<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Autowired<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>condition<span class="token punctuation">.</span>ConditionalOnWebApplication<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>context<span class="token punctuation">.</span>properties<span class="token punctuation">.</span>EnableConfigurationProperties<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Bean<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@ConditionalOnWebApplication</span> <span class="token comment" spellcheck="true">//web应用才生效</span><span class="token annotation punctuation">@EnableConfigurationProperties</span><span class="token punctuation">(</span>HelloProperties<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloServiceAutoConfiguration</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    HelloProperties helloProperties<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> HelloService <span class="token function">helloService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        HelloService service <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HelloService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        service<span class="token punctuation">.</span><span class="token function">setHelloProperties</span><span class="token punctuation">(</span>helloProperties<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> service<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h1 id="更多SpringBoot整合示例"><a href="#更多SpringBoot整合示例" class="headerlink" title="更多SpringBoot整合示例"></a>更多SpringBoot整合示例</h1><p><a href="https://github.com/spring-projects/spring-boot/tree/master/spring-boot-samples" target="_blank" rel="noopener">https://github.com/spring-projects/spring-boot/tree/master/spring-boot-samples</a></p>]]></content>
      
      
      <categories>
          
          <category> backend </category>
          
      </categories>
      
      
        <tags>
            
            <tag> backend </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mobicents ss7</title>
      <link href="/2020/04/02/mobicents-ss7/"/>
      <url>/2020/04/02/mobicents-ss7/</url>
      
        <content type="html"><![CDATA[<p>1、提供通过CLI配置SS7协议栈</p><p>2、打包map层以下为服务暴露给JNDI接口，进而可以在任意应用中使用</p><p>3、依赖关系：ss7应用–&gt;ss7服务–&gt;JBoss应用服务+JBOSS_HOME系统属性设置</p><p>   JBOSS_HOME 配置OK–&gt;部署ss7服务、shell脚本和shell库</p><p>4、JBOSS环境必须先安装，用于支撑Mobicents从源安装服务</p><p>5、</p>]]></content>
      
      
      <categories>
          
          <category> signaling </category>
          
      </categories>
      
      
        <tags>
            
            <tag> signaling </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>澳门</title>
      <link href="/2020/03/31/ao-men/"/>
      <url>/2020/03/31/ao-men/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/pasted-389.png" alt=""><br><img src="/images/pasted-390.png" alt=""><br><img src="/images/pasted-391.png" alt=""><br><img src="/images/pasted-392.png" alt=""><br><img src="/images/pasted-393.png" alt=""><br><img src="/images/pasted-394.png" alt=""><br><img src="/images/pasted-395.png" alt=""><br><img src="/images/pasted-396.png" alt=""><br><img src="/images/pasted-397.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> Traval </category>
          
          <category> Domestic </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Traval </tag>
            
            <tag> Domestic </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>香港</title>
      <link href="/2020/03/31/xiang-gang/"/>
      <url>/2020/03/31/xiang-gang/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/pasted-380.png" alt=""><br><img src="/images/pasted-381.png" alt=""><br><img src="/images/pasted-382.png" alt=""><br><img src="/images/pasted-383.png" alt=""><br><img src="/images/pasted-384.png" alt=""><br><img src="/images/pasted-385.png" alt=""><br><img src="/images/pasted-386.png" alt=""><br><img src="/images/pasted-387.png" alt=""><br><img src="/images/pasted-388.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> Traval </category>
          
          <category> Domestic </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Traval </tag>
            
            <tag> Domestic </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IPSEC隧道原理</title>
      <link href="/2020/03/27/ipsec-sui-dao-yuan-li/"/>
      <url>/2020/03/27/ipsec-sui-dao-yuan-li/</url>
      
        <content type="html"><![CDATA[<p>IPSEC 英文全称 Internet Protocol Security。IPSEC有两种封装模式：传输模式和隧道模式，常用的是隧道模式。二种模式最根本的区别就是：传输模式没有对原始报文的IP包头进行加密，只对TCP和DATA部分加密，隧道模式生成新的IP包头作为封装后加密后报文的IP头部，这样完全地对原始IP数据报进行认证和加密，可以隐藏用户私有的IP地址。</p><p>建立一个IPSec 隧道需要满足哪些条件？</p><p>1、网络可达：例如A和B之间要建立隧道，那么A的IP地址和B的IP地址要相互可达。A能访问B，B也能访问A，因为隧道是单向的。</p><p>2、定义数据流：决定哪些数据流需要通过IPsec隧道传输</p><p>3、配置IPSec的proposal：配置数据流经过IPSec 隧道时候使用的安全协议、加密算法、封装模式等</p><p>4、将proposal应用到IPSec的安全策略里面</p><p>5、将IPSec安全策略应用到某个具体接口<br>为了解决IP端到端应用在NAT环境下遇到的问题，网络协议的设计者们创造了各种武器来进行应对。但遗憾的是，这里每一种方法都不完美，还需要在内部主机、应用程序或者NAT网关上增加额外的处理。</p><p>应用层网关(ALG)是解决NAT对应用层协议无感知的一个最常用方法，已经被NAT设备厂商广泛采用，成为NAT设备的一个必需功能。因为NAT不感知应用协议，所以有必要额外为每个应用协议定制协议分析功能，这样NAT网关就能理解并支持特定的协议。ALG与NAT形成互动关系，在一个NAT网关检测到新的连接请求时，需要判断是否为已知的应用类型，这通常是基于连接的传输层端口信息来识别的。在识别为已知应用时，再调用相应功能对报文的深层内容进行检查，当发现任何形式表达的IP地址和端口时，将会把这些信息同步转换，并且为这个新连接创建一个附加的转换表项。这样，当报文到达公网侧的目的主机时，应用层协议中携带的信息就是NAT网关提供的地址和端口。一旦公网侧主机开始发送数据或建立连接到此端口，NAT网关就可以根据关联表信息进行转换，再把数据转发到私网侧的主机。很多应用层协议实现不限于一个初始连接(通常为信令或控制通道)加一个数据连接，可能是一个初始连接对应很多后续的新连接。比较特别的协议，在一次协商中会产生一组相关连接，比如RTP/RTCP协议规定，一个RTP通道建立后占用连续的两个端口，一个服务于数据，另一个服务于控制消息。此时，就需要ALG分配连续的端口为应用服务。ALG能成功解决大部分协议的NAT穿越需求，但是这个方法也有很大的限制。因为应用协议的数量非常多而且在不断发展变化之中，添加到设备中的ALG功能都是为特定协议的特定规范版本而开发的，协议的创新和演进要求NAT设备制造商必须跟踪这些协议的最近标准，同时兼容旧标准。尽管有如Linux这种开放平台允许动态加载新的ALG特性，但是管理成本仍然很高，网络维护人员也不能随时了解用户都需要什么应用。因此为每个应用协议开发ALG代码并跟踪最新标准是不可行的，ALG只能解决用户最常用的需求。此外，出于安全性需要，有些应用类型报文从源端发出就已经加密，这种报文在网络中间无法进行分析，所以ALG无能为力。</p><p>探针技术STUN和TURN<br>所谓探针技术，是通过在所有参与通信的实体上安装探测插件，以检测网络中是否存在NAT网关，并对不同NAT模型实施不同穿越方法的一种技术。STUN服务器被部署在公网上，用于接收来自通信实体的探测请求，服务器会记录收到请求的报文地址和端口，并填写到回送的响应报文中。客户端根据接收到的响应消息中记录的地址和端口与本地选择的地址和端口进行比较，就能识别出是否存在NAT网关。如果存在NAT网关，客户端会使用之前的地址和端口向服务器的另外一个IP发起请求，重复前面的探测。然后再比较两次响应返回的结果判断出NAT工作的模式。由前述的一对多转换模型得知，除对称型NAT以外的模型，NAT网关对内部主机地址端口的映射都是相对固定的，所以比较容易实现NAT穿越。而对称型NAT为每个连接提供一个映射，使得转换后的公网地址和端口对不可预测。此时TURN可以与STUN绑定提供穿越NAT的服务，即在公网服务器上提供一个“地址端口对”，所有此“地址端口对”接收到的数据会经由探测建立的连接转发到内网主机上。TURN分配的这个映射“地址端口对”会通过STUN响应发给内部主机，后者将此信息放入建立连接的信令中通知通信的对端。这种探针技术是一种通用方法，不用在NAT设备上为每种应用协议开发功能，相对于ALG方式有一定普遍性。但是TURN中继服务会成为通信瓶颈。而且在客户端中增加探针功能要求每个应用都要增加代码才能支持。</p><p>中间件技术</p><p>这也是一种通过开发通用方法解决NAT穿越问题的努力。与前者不同之处是，NAT网关是这一解决方案的参与者。与ALG的不同在于，客户端会参与网关公网映射信息的维护，此时NAT网关只要理解客户端的请求并按照要求去分配转换表，不需要自己去分析客户端的应用层数据。其中UPnP就是这样一种方法。UPnP中文全称为通用即插即用，是一个通用的网络终端与网关的通信协议，具备信息发布和管理控制的能力。其中，网关映射请求可以为客户动态添加映射表项。此时，NAT不再需要理解应用层携带的信息，只转换IP地址和端口信息。而客户端通过控制消息或信令发到公网侧的信息中，直接携带公网映射的IP地址和端口，接收端可以按照此信息建立数据连接。NAT网关在收到数据或连接请求时，按照UPnP建立的表项只转换地址和端口信息，不关心内容，再将数据转发到内网。这种方案需要网关、内部主机和应用程序都支持UPnP技术，且组网允许内部主机和NAT网关之间可以直接交换UPnP信令才能实施。</p><p>中继代理技术</p><p>准确说它不是NAT穿越技术，而是NAT旁路技术。简单说，就是在NAT网关所在的位置旁边放置一个应用服务器，这个服务器在内部网络和外部公网分别有自己的网络连接。客户端特定的应用产生网络请求时，将定向发送到应用代理服务器。应用代理服务器根据代理协议解析客户端的请求，再从服务器的公网侧发起一个新的请求，把客户端请求的内容中继到外部网络上，返回的相应反方向中继。这项技术和ALG有很大的相似性，它要求为每个应用类型部署中继代理业务，中间服务器要理解这些请求。</p><p>特定协议的自穿越技术</p><p>在所有方法中最复杂也最可靠的就是自己解决自己的问题。比如IKE和IPsec技术，在设计时就考虑了到如何穿越NAT的问题。因为这个协议是一个自加密的协议并且具有报文防修改的鉴别能力，其他通用方法爱莫能助。因为实际应用的NAT网关基本都是NAPT方式，所有通过传输层协议承载的报文可以顺利通过NAT。IKE和IPsec采用的方案就是用UDP在报文外面再加一层封装，而内部的报文就不再受到影响。IKE中还专门增加了NAT网关是否存在的检查能力以及绕开NAT网关检测IKE协议的方法。</p>]]></content>
      
      
      <categories>
          
          <category> networkArchitecture </category>
          
      </categories>
      
      
        <tags>
            
            <tag> networkArchitecture </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>M3UA协议</title>
      <link href="/2020/03/26/m3ua-xie-yi/"/>
      <url>/2020/03/26/m3ua-xie-yi/</url>
      
        <content type="html"><![CDATA[<h2 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h2><p><img src="/images/pasted-319.png" alt=""></p><p><img src="/images/pasted-320.png" alt=""></p><p><img src="/images/pasted-321.png" alt=""></p><h2 id="二、m3ua消息"><a href="#二、m3ua消息" class="headerlink" title="二、m3ua消息"></a>二、m3ua消息</h2><p><img src="/images/pasted-322.png" alt=""></p><p><img src="/images/pasted-323.png" alt=""></p><p><img src="/images/pasted-324.png" alt=""></p><p><img src="/images/pasted-325.png" alt=""><br><img src="/images/pasted-350.png" alt="路由"></p><p><img src="/images/pasted-352.png" alt="信息流"><br><img src="/images/pasted-351.png" alt="路由配置图"></p><h2 id="三、M3UA消息流程"><a href="#三、M3UA消息流程" class="headerlink" title="三、M3UA消息流程"></a>三、M3UA消息流程</h2><p><img src="/images/pasted-326.png" alt=""></p><p><img src="/images/pasted-327.png" alt="upload successful"></p><p><img src="/images/pasted-328.png" alt="upload successful"></p><p><img src="/images/pasted-329.png" alt="upload successful"></p>]]></content>
      
      
      <categories>
          
          <category> signaling </category>
          
      </categories>
      
      
        <tags>
            
            <tag> signaling </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SCTP协议</title>
      <link href="/2020/03/26/sctp-xie-yi/"/>
      <url>/2020/03/26/sctp-xie-yi/</url>
      
        <content type="html"><![CDATA[<p>RFC2960规范    <a href="/download/rfc2960(SCTP).pdf"">rfc2960(SCTP).pdf 点击下载</a><br>RFC3309补充规范    <a href="/download/rfc3309(SCTP补充).pdf"">rfc3309(SCTP补充).pdf 点击下载</a><br>RFC2960规范    <a href="/download/rfc3286(SCTP).pdf"">rfc3286(SCTP).pdf 点击下载</a></p><h2 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h2><p>流控制传输协议（SCTP，Stream Control Transmission Protocol）是一种在网络连接两端之间同时传输多个数据流的协议。SCTP提供的服务于UDP和TCP类似。<br>SCTP提供的服务于UDP和TCP类似。SCTP在RFC2960中详细说明，并有RFC3309加以更新。RFC 3286给出了SCTP的简要介绍。SCTP在客户和服务器之间提供关联（association），并像TCP那样给应用提供可靠性、排序、流量控制以及全双工的数据传输。SCTP中使用“关联”一词替代“连接”是为了避免这样的内涵：一个连接只涉及两个IP地址间的通信。一个关联指代两个系统之间的一次通信，它可能因为SCTP支持多宿而涉及不止两个地址。<br>与TCP不同的是，SCTP是面向消息的（message-oriented）。它提供各个记录的按序递送服务。与UDP一样，由发送端写入的每一条记录的长度随数据一道传递给接收端应用。<br>SCTP能给在所连接的端点之间提供多个流，每个流各自可靠地按序递送消息。一个流上某个消息的丢失不会阻塞同一关联其他流上消息的投递。这种做法与TCP正好相反，就TCP而言，在单一字节流中任何位置的字节丢失都将在阻塞该连接上其后所有数据的递送，直到该丢失被修复为止。<br>SCTP还提供多宿特性，使得单个SCTP端点能够支持多个IP地址。该特性可以增强应对网络故障的健壮性。一个端点可能有多个冗余的连接，每个网络又可能有各自接入因特网基础设施的连接。当该端点与另一个端点建立一个关联之后，如果它的某个网络或某个跨域因特网的通路发生故障，SCTP就可以通过切换到使用已与该关联的另一个地址来避免发生的故障。</p><p><img src="/images/pasted-306.png" alt="服务的需求"></p><h2 id="二、SCTP功能与偶连"><a href="#二、SCTP功能与偶连" class="headerlink" title="二、SCTP功能与偶连"></a>二、SCTP功能与偶连</h2><p><img src="/images/pasted-307.png" alt=""></p><h3 id="2-1-主机和端点"><a href="#2-1-主机和端点" class="headerlink" title="2.1 主机和端点"></a>2.1 主机和端点</h3><p>一个主机可以有多个端点<br>一个端点可以包括多个传送地址</p><h3 id="2-2-工作模型"><a href="#2-2-工作模型" class="headerlink" title="2.2 工作模型"></a>2.2 工作模型</h3><p><img src="/images/pasted-308.png" alt="工作模型"></p><h3 id="2-3-偶连"><a href="#2-3-偶连" class="headerlink" title="2.3 偶连"></a>2.3 偶连</h3><h4 id="建立连接"><a href="#建立连接" class="headerlink" title="建立连接"></a>建立连接</h4><p>不同于TCP，SCTP通过四次握手来完成连接的建立：<br>1、连接发起者（一般为客户端）SCTP发送一个INIT消息（初始化）。该消息包括了连接发起者的IP地址清单、初始序列号、用于标识本耦联中所有报文的起始标记、客户请求的外出流的数目以及客户能够支持的外来流的数目<br>2、对端（服务器）发送一个INITACK消息确认连接发起者的INIT消息，其中含有服务器的IP地址清单、初始序列号、起始标记、服务器请求的外出流的数目、服务器能够支持的外来流的数目以及一个状态cookie，状态cookie包含服务器用于确信本耦联有效所需的所有状态，cookie是经过数字签名的，因而可以确保其有效性<br>3、客户以一个COOKIEECHO消息返回服务器的状态cookie，除COOKIEECHO外，该消息可能在同一个报文中捆绑一个用户数据<br>4、服务器以一个COOKIEACK消息确认客户返回的cookie是正确的，到此时该耦联就建立成功了。该消息也可能在同一个报文中捆绑一个用户数据。</p><p><img src="/images/pasted-316.png" alt="upload successful"><br>在一次SCTP四次握手中，INIT消息的接收端不必保存任何状态信息或者分配任何资源，这样就可防范SYNFlooding等DoS攻击。它在发送INIT-ACK消息时，采用了一种机制——“状态Cookie”，该Cookie具有发送端要建立自己状态所需的全部信息。<br>用于建立连接的INIT ACK只能在COOKIE WATI状态收到，在其它状态收到该报文时都会直接丢弃，类似的，COOKIE ACK只能在COOKIE ECHOED状态接收。<br>在常规的握手中，主动发起方的本地tag在发起握手时产生，主动发起方的对端tag在收到INIT ACK时产生。而连接的被动方的本地tag和对端tag都在收到INIT时产生，但是最终要到收到了COOKIE ECO后才确定并保存下来。<br>SCTP产生一个状态Cookie的过程如下：<br>1、使用收到的INIT和发出的INIT-ACK块中的信息创建一个关联的TCB（传输控制块）。<br>2、在TCB中，将当前日期设为创建日期，将协议参数“有效Cookie时间”设为生存期间。<br>3、根据TCB，收集重建TCB所需的最小信息子集，将该子集和密钥产生一个MAC（信息认证编码）。<br>4、结合上述最小信息子集和MAC产生状态Cookie。<br>5、在发送完INITACK（包含状态Cookie参数）后，发送方必须删除TCB以及任何与新关联有关的本地资源。<br>INIT和INIT-ACK都必须包含建立初始状态所需的参数：一组IP地址，保证可靠传输的初始序列号，每个被接收的SCTP报文中必须含有的验证标签，每一端请求发出的流数目和每一端能支持接收的流数目。交换完这些消息之后，INIT的发送端以COOKIE-ECHO消息的方式发送回状态Cookie。接收端根据所接收到的COOKIE-ECHO中的状态Cookie，完整地重建自己的状态，并回送COOKIE-ACK来确认关联已建立。<br>因此对于SCTP，即使接收再多的INIT消息,接收端也没有任何资源的消耗：它既不分配任何系统资源，也不保存此次新关联的状态，它只是把相应重建状态所用的状态Cookie作为参数，包含在每一个回送的INIT-ACK消息中，最后该状态Cookie会被COOKIE-ECHO消息发送回来。<br>类似于TCP，SCTP也多由客户端执行主动打开，而服务器执行被动打开。</p><h4 id="断开连接"><a href="#断开连接" class="headerlink" title="断开连接"></a>断开连接</h4><p><img src="/images/pasted-317.png" alt="upload successful"></p><h4 id="同时打开连接"><a href="#同时打开连接" class="headerlink" title="同时打开连接"></a>同时打开连接</h4><p>RFC规定，如果SCTP在COOKIE-WAIT或者COOKIE-ECHOED状态接收到INIT报文。则：<br>INIT报文的接收者产生一个INIT-ACK，该INIT-ACK使用的本端参数和自己发送的那个INIT报文的相同<br>1、执行状态COOKIE的计算过程，产生一个状态COOKIE<br>2、不允许修改SCTP的状态<br>3、状态COOKIE相关的TCB不能删除<br>4、不关闭T1-init定时器<br>如果SCTP在非COOKIE-WAIT状态接收到了INIT-ACK，则丢弃它。<br>同时断开连接<br>极少数情况下，耦联的双发可能同时执行主动关闭，即同时进入发送SHUTWODN并进入SHUTDOWN-SENT状态。在这种情况下关闭的流程为：<br>1、两端都发送SHUTWODN并进入SHUTDOWN-SENT状态<br>2、两端都收到对方的SHUTDOWN消息，并发送SHUTDOWN-ACK，然后进入SHUTDOWN-ACK-SENT状态<br>3、两端都收到对方的SHUTDOWN-ACK，并发送SHUTDOWN-COMPLETE，然后就进入close状态<br><img src="/images/pasted-311.png" alt=""></p><h4 id="状态变化图"><a href="#状态变化图" class="headerlink" title="状态变化图"></a>状态变化图</h4><p>SCTP的状态迁移图如下所示。<br><img src="/images/pasted-312.png" alt=""></p><h3 id="2-4-通路"><a href="#2-4-通路" class="headerlink" title="2.4 通路"></a>2.4 通路</h3><p><img src="/images/pasted-313.png" alt=""></p><h2 id="三、SCTP消息"><a href="#三、SCTP消息" class="headerlink" title="三、SCTP消息"></a>三、SCTP消息</h2><p><img src="/images/pasted-314.png" alt=""></p><p><img src="/images/pasted-315.png" alt=""></p><h2 id="四、SCTP信令流程"><a href="#四、SCTP信令流程" class="headerlink" title="四、SCTP信令流程"></a>四、SCTP信令流程</h2><p>1、偶联的建立、终止（详见2.3）<br>2、数据传递和证实<br>3、拥塞控制机制</p>]]></content>
      
      
      <categories>
          
          <category> signaling </category>
          
      </categories>
      
      
        <tags>
            
            <tag> signaling </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sigtran协议簇</title>
      <link href="/2020/03/26/sigtran-xie-yi-cu/"/>
      <url>/2020/03/26/sigtran-xie-yi-cu/</url>
      
        <content type="html"><![CDATA[<h2 id="一、sigtran定义"><a href="#一、sigtran定义" class="headerlink" title="一、sigtran定义"></a>一、sigtran定义</h2><p>什么是SIGTRAN？SIGTRAN是Signaling Transport的缩写。SIGTRAN协议是IETF的信令传送工作组建立的一套在IP网络上传送PSTN信令的传输控制协议。SIGTRAN定义了一个比较完善的SIGTRAN协议堆栈，分为IP协议层、信令传输层、信令传输适配层和信令应用层。每层所含内容如下：<br>IP协议层：IP<br>信令传输层：SCTP<br>信令传输适配层：SUA、M3UA、M2UA、M2PA、IUA<br>信令应用层：TCAP、TUP、ISUP、SCCP、MTP3、Q931/QSIG</p><p>不同的信令应用层需要不同的信令传输适配层，但IP协议层和信令传输层是共享的和相同的。信令传输适配层与信令应用层的对应关系如下：</p><p>SUA对应TCAP<br>M3UA对应TUP、ISUP、SCCP、TCAP<br>M2UA/M2PA对应MTP3、ISUP<br>IUA对应Q931/QSIG、ISUP</p><h2 id="二、整体功能"><a href="#二、整体功能" class="headerlink" title="二、整体功能"></a>二、整体功能</h2><p>下面我们通过一个例子来理解SIGTRAN的作用。小王需要从上海通过海运运输一些东西去深圳。小王需要先将货物包装在纸盒或者木盒中，然后使用汽车把装着货物的盒子运输到货运公司。货运公司会将货物装载到一个集装箱中，然后通过轮船运到深圳的港口。货运公司从集装箱中分出小王的货物，再发给收货人。<br>从上面的例子可以看出，货运公司负责使用海运运输小王的货物。在运输过程中，货运公司对货物进行了封装和解封装，但是并不会对货物进行处理。这正是对应了SIGTRAN 的特点。<br>SIGTRAN有两个主要功能：适配和传输。与此对应，SIGTRAN协议栈包含两层协议：传输协议和适配协议。<br>传输协议使用流控制传输协议SCTP。SCTP是在TCP协议的基础上发展而来，是一种提供了可靠、高效、有序的数据传输协议。与TCP相比，SCTP具有以下特点：<br>SCTP具有更高的安全性。<br>SCTP支持多宿主，IP网络的源地址和目的地址都只有一个，而SCTP在此基础上做了改进，源地址和目的地址都允许多个地址，一个端点可以由多于一个IP地址组成，使得网络可靠性增加。<br>SCTP支持多流传送消息，TCP只支持一个流。打个比方，TCP相当于一条高速公路，但每个方向只有一条车道，如果这条车道出现拥塞，其他数据包就只有等待了。而SCTP在每个方向上都采用多条通道，提高数据传输效率。<br>适配协议包含M3UA（MTP3 User Adaptation，MTP3用户适配层）、M2UA（MTP2 User Adaptation，MTP2用户适配层）、IUA（ISDN Q.921 User Adaptation，ISDN Q.921用户适配层）、M2PA（MTP2 Peer Adaptation，MTP第二层的用户对等适配层）、SUA（SCCP User Adaptation，SCCP用户适配层）等。比如说ISUP协议原来是在MTP3上面传送的，ISUP和MTP3之间有明确的层间接口。现在没有MTP3了，采用M3UA来替代，那么M3UA就要把这个层间接口原封不动的继承下来，不能让ISUP感觉到底层协议有变化，因此M3UA要很好地去适配ISUP消息，不能让它感觉到跟原来有任何不同的地方。<br>如图1所示，No.7用户层消息，比如一个IAM消息，在七号信令网络中采用MTP封装后，才能传送到信令网关。信令网关解封装MTP-1、MTP-2和MTP-3后看到此IAM消息。信令网关并不处理IAM消息，而是通过节点互通功能将此消息原封不动的封装进M3UA，外面再封装SCTP和IP，然后送给IP网络。IP网络中的设备解封装IP、SCTP和M3UA，终于看到了七号信令网络送来的IAM消息。<br>在图1可以看出，信令网关负责信令从MTP解封装七号信令的用户层消息，然后通过SIGTRAN再封装，反之亦然。<br>综上所述，SIGTRAN协议的作用是实现七号信令在IP网络中的适配与传输，它支持标准的原语接口，不需要对现有的SS7信令应用部分（如TUP、ISUP、MAP等）进行任何处理。它利用标准的IP传送协议作为低层传送，并通过增加自身的功能来满足SS7信令的传送要求，是NGN中重要的传输控制协议之一。<br><img src="/images/pasted-305.png" alt="图1 互通示例图"></p><h2 id="三、协议"><a href="#三、协议" class="headerlink" title="三、协议"></a>三、协议</h2><p>（1）SCTP协议（主要涉及）</p><p>SCTP<br>由IETF提出，是一个面向连接的传输层协议，采用了类似TCP的流量控制和拥塞控制算法，通过自身的证实与重发机制来保证用户数据在两个SCTP端点间可靠传送。相对于TCP等其他传输协议，SCTP传输时延小，可避免某些大数据对其他数据的阻塞，具有更高的可靠性和安全性。</p><p>（2）M3UA协议（主要涉及）</p><p>M3UA是MTP第三级用户适配层协议，提供信令点编码和IP地址的转换。用于在软交换与信令网关之间实现七号信令协议的传送，支持在IP网上传送MTP第三级的用户消息，包括ISUP、TUP和SCCP消息，TCAP消息作为SCCP的净荷可由M3UA透明传送。</p><p>（3）M2UA/M2PA协议</p><p>M2UA/M2PA是MTP第二级用户对等层间的适配层协议。</p><p>（4）IUA协议</p><p>IUA是ISDN Q.931用户适配层协议。</p><p>（5）SUA协议</p><p>SUA是SCCP用户适配层协议。SUA与M3UA不同，它直接实现了TCAP over IP功能。</p><p>SIGTRAN支持PSTN信令应用的标准原语接口，利用标准的IP传送协议作为低层传送信令，是NGN中重要的传输控制协议之一。</p>]]></content>
      
      
      <categories>
          
          <category> signaling </category>
          
      </categories>
      
      
        <tags>
            
            <tag> signaling </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BICC信令国标</title>
      <link href="/2020/03/26/bicc-xin-ling-guo-biao/"/>
      <url>/2020/03/26/bicc-xin-ling-guo-biao/</url>
      
        <content type="html"><![CDATA[<p><a href="/download/第1部分：BICC的功能.pdf"">第1部分：BICC的功能.pdf 点击下载</a></p><p><a href="/download/第2部分：BICC的消息、参数的基本功能和格式.pdf"">第2部分：BICC的消息、参数的基本功能和格式.pdf 点击下载</a></p><p><a href="/download/第3部分：BICC的程序.pdf"">第3部分：BICC的程序 .pdf 点击下载</a></p><p><a href="/download/第4部分BICC的应用传送机制(APM)、隧道和IP承载控制协议.pdf"">第4部分BICC的应用传送机制(APM)、隧道和IP承载控制协议.pdf 点击下载</a></p>]]></content>
      
      
      <categories>
          
          <category> signaling </category>
          
      </categories>
      
      
        <tags>
            
            <tag> signaling </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>进行宏观行业把控的几个要点</title>
      <link href="/2020/03/25/jin-xing-hong-guan-xing-ye-ba-kong-de-ji-ge-yao-dian/"/>
      <url>/2020/03/25/jin-xing-hong-guan-xing-ye-ba-kong-de-ji-ge-yao-dian/</url>
      
        <content type="html"><![CDATA[<h2 id="一、梳理"><a href="#一、梳理" class="headerlink" title="一、梳理"></a>一、梳理</h2><p>梳理清晰自身优势以及产品有哪些</p><h2 id="二、看行业发展、提高实力"><a href="#二、看行业发展、提高实力" class="headerlink" title="二、看行业发展、提高实力"></a>二、看行业发展、提高实力</h2><h2 id="三、发展空间与限制分析"><a href="#三、发展空间与限制分析" class="headerlink" title="三、发展空间与限制分析"></a>三、发展空间与限制分析</h2><h2 id="四、五看三定（华为）"><a href="#四、五看三定（华为）" class="headerlink" title="四、五看三定（华为）"></a>四、五看三定（华为）</h2><p>1、看趋势和方向：这个产品未来会是什么形态，产品生命周期有多长，未来3年、5年会是什么样的格局，什么企业在这块方向上已经在布局；</p><p>2、看行业和市场：产品在这个行业里的上下游是情况是什么样的？行业上下游的依赖情况，以及行业环境造成对产品是有哪些挑战和机会点？ 产品在行业内的市场规模有多大，我们的定位是什么？</p><p>3、看用户和需求：用户使用产品的场景故事是什么样的？用户当前什么什么方法来解决他们的需求？我们提供的产品和他们原来的方法有什么区别，提供的产品能力能解决多大的痛点（有多痛）、痒点（有多爽）；</p><p>4、看竞争对手：市场上的竞争对手有哪些？分为短中长期、眼前和潜在对手（包括可能跨界对手）分析。对手怎么解决用户什么核心问题，他们的优缺点是什么？ 为什么他们要这么做？为什么他们会留下这些缺点？我们怎么避免这些缺点？我们怎么在他们优势上超越他们？</p><p>5、看自己：如果我们自己来做，哪些是自研，哪些是合作？大概的产品开发周期多长？整体开发成本是多少？未来3年内我们运营成本是多少？哪些是我们的竞争力核心？哪些是我们的难点，需要补齐哪些短板？</p><p>6、定方向：我们的大方向大战略是什么？</p><p>7、定目标：产品最终要做成什么样形态？解决什么问题？</p><p>8、定路标：在什么时间节点，做出什么能力，最终在什么时间点完成。</p><h2 id="五、低成本试错"><a href="#五、低成本试错" class="headerlink" title="五、低成本试错"></a>五、低成本试错</h2><h2 id="六、做行业内最懂的人"><a href="#六、做行业内最懂的人" class="headerlink" title="六、做行业内最懂的人"></a>六、做行业内最懂的人</h2>]]></content>
      
      
      <categories>
          
          <category> read </category>
          
          <category> essay </category>
          
      </categories>
      
      
        <tags>
            
            <tag> read </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Beers</title>
      <link href="/2020/03/25/beers/"/>
      <url>/2020/03/25/beers/</url>
      
        <content type="html"><![CDATA[<h2 id="1、慕尼黑扎啤"><a href="#1、慕尼黑扎啤" class="headerlink" title="1、慕尼黑扎啤"></a>1、慕尼黑扎啤</h2><p><img src="/images/pasted-224.png" alt="慕尼黑黑黄啤"></p><h2 id="2、越南——saigon"><a href="#2、越南——saigon" class="headerlink" title="2、越南——saigon"></a>2、越南——saigon</h2><p><img src="/images/pasted-225.png" alt=""></p><h2 id="3、越南——saigon-special"><a href="#3、越南——saigon-special" class="headerlink" title="3、越南——saigon special"></a>3、越南——saigon special</h2><p><img src="/images/pasted-226.png" alt=""></p><h2 id="4、印尼的茅台"><a href="#4、印尼的茅台" class="headerlink" title="4、印尼的茅台"></a>4、印尼的茅台</h2><p><img src="/images/pasted-227.png" alt=""></p><h2 id="5、印尼——bintang"><a href="#5、印尼——bintang" class="headerlink" title="5、印尼——bintang"></a>5、印尼——bintang</h2><p><img src="/images/pasted-228.png" alt=""></p><p><img src="/images/pasted-229.png" alt=""></p><h2 id="6、希腊——fix-hellas"><a href="#6、希腊——fix-hellas" class="headerlink" title="6、希腊——fix hellas"></a>6、希腊——fix hellas</h2><p><img src="/images/pasted-230.png" alt=""></p><h2 id="7、荷兰——vedett-extra-blond"><a href="#7、荷兰——vedett-extra-blond" class="headerlink" title="7、荷兰——vedett extra blond"></a>7、荷兰——vedett extra blond</h2><p>![(/images/pasted-231.png)</p><p><img src="/images/pasted-234.png" alt=""></p><h2 id="8、荷兰——jupiler"><a href="#8、荷兰——jupiler" class="headerlink" title="8、荷兰——jupiler"></a>8、荷兰——jupiler</h2><p><img src="/images/pasted-232.png" alt=""></p><h2 id="9、荷兰——喜力"><a href="#9、荷兰——喜力" class="headerlink" title="9、荷兰——喜力"></a>9、荷兰——喜力</h2><p><img src="/images/pasted-233.png" alt=""></p><h2 id="10、比利时——affligem-9度麦芽度）"><a href="#10、比利时——affligem-9度麦芽度）" class="headerlink" title="10、比利时——affligem(9度麦芽度）"></a>10、比利时——affligem(9度麦芽度）</h2><p><img src="/images/pasted-235.png" alt=""></p><h2 id="11、圣托里尼——mythos"><a href="#11、圣托里尼——mythos" class="headerlink" title="11、圣托里尼——mythos"></a>11、圣托里尼——mythos</h2><p><img src="/images/pasted-236.png" alt=""></p><h2 id="12、米克诺斯——beplina"><a href="#12、米克诺斯——beplina" class="headerlink" title="12、米克诺斯——beplina"></a>12、米克诺斯——beplina</h2><p><img src="/images/pasted-237.png" alt=""></p><h2 id="13、圣托里尼——yellow-donkey"><a href="#13、圣托里尼——yellow-donkey" class="headerlink" title="13、圣托里尼——yellow donkey"></a>13、圣托里尼——yellow donkey</h2><p><img src="/images/pasted-238.png" alt=""></p><p><img src="/images/pasted-239.png" alt=""></p><h2 id="14、雅典的四罐"><a href="#14、雅典的四罐" class="headerlink" title="14、雅典的四罐"></a>14、雅典的四罐</h2><p><img src="/images/pasted-240.png" alt="upload successful"></p><h2 id="15、德国——博龙与传教士"><a href="#15、德国——博龙与传教士" class="headerlink" title="15、德国——博龙与传教士"></a>15、德国——博龙与传教士</h2><p><img src="/images/pasted-246.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> Traval </category>
          
          <category> FindBeers </category>
          
      </categories>
      
      
        <tags>
            
            <tag> FindBeers </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sip客户端收不到200 OK信令</title>
      <link href="/2020/03/19/sip-ke-hu-duan-shuo-bu-dao-200-ok-xin-ling/"/>
      <url>/2020/03/19/sip-ke-hu-duan-shuo-bu-dao-200-ok-xin-ling/</url>
      
        <content type="html"><![CDATA[<h2 id="一、问题"><a href="#一、问题" class="headerlink" title="一、问题"></a>一、问题</h2><p>在向服务器发送INVITE信令时，媒体协商后收不到server的200 OK信令，进而无法进行下一步逻辑处理，导致server一直发送200 OK信令</p><p><img src="/images/pasted-186.png" alt="无法接受导致无法处理"></p><h2 id="二、分析"><a href="#二、分析" class="headerlink" title="二、分析"></a>二、分析</h2><p>javax.sip.AUTOMATIC_DIALOG_SUPPORT 默认为开启，开启后遇到200由协议栈自动应答</p><p><img src="/images/pasted-199.png" alt=""></p><h2 id="二、解决"><a href="#二、解决" class="headerlink" title="二、解决"></a>二、解决</h2><p><img src="/images/pasted-187.png" alt="修改权限"></p><p><img src="/images/pasted-188.png" alt="验证确认收到200 OK信令"></p>]]></content>
      
      
      <categories>
          
          <category> signaling </category>
          
      </categories>
      
      
        <tags>
            
            <tag> signaling </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sip信令请求与应答包头的处理</title>
      <link href="/2020/03/18/sip-xin-ling-qing-qiu-yu-ying-da-bao-tou-de-chu-li/"/>
      <url>/2020/03/18/sip-xin-ling-qing-qiu-yu-ying-da-bao-tou-de-chu-li/</url>
      
        <content type="html"><![CDATA[<p>1、应答中的 From 头域必须和请求中的 From 头域相等。</p><p>2、应答中的 Call-ID 头域必须和请求中的 Call-ID 头域相等。</p><p>3、应答中的 Cseq 头域必须和请求中的 Cseq 头域相等。</p><p>4、应答中的 Via 头域必须和请求中的 Via 头域相等，而且顺序也必须相等。</p><p>5、如果请求中包含了 To tag ，那么应答中的 To 头域必须和请求中的 To 头域相等。</p><p>6、如果请求中的 To 头域并不包含 Tag,  那么应答中的 To 头域的 URI 必须和请求中的 TO 头域的 URI 相等；</p><p>7、此外， UAS 还必须增加一个 Tag 到 To 头域上（ 100 （ trying ）应答是一个例外，在 100 中可能已经存在了一个 tag ）。这就提供了一个 UAS 正在应答的标志，也许就是对话 ID 的一部分。对同一个请求来说，它的应答必须有相同的 tag 标志，包括终结应答和临时应答（同样 100 （ trying ）除外）。</p><p><img src="/images/pasted-166.png" alt="实际包头对比确实一样"></p>]]></content>
      
      
      <categories>
          
          <category> signaling </category>
          
      </categories>
      
      
        <tags>
            
            <tag> signaling </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SIP信令应答码</title>
      <link href="/2020/03/18/sip-xin-ling-ying-da-ma/"/>
      <url>/2020/03/18/sip-xin-ling-ying-da-ma/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/pasted-164.png" alt="应答码"></p>]]></content>
      
      
      <categories>
          
          <category> signaling </category>
          
      </categories>
      
      
        <tags>
            
            <tag> signaling </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sip、RTP、sdp相关rfc规范下载</title>
      <link href="/2020/03/18/rfc3261-sip-xin-ling-jiao-hu-gui-fan-xia-zai/"/>
      <url>/2020/03/18/rfc3261-sip-xin-ling-jiao-hu-gui-fan-xia-zai/</url>
      
        <content type="html"><![CDATA[<p><a href="/download/rfc3261.pdf"">rfc3261点击下载</a><br><a href="/download/RFC4773.pdf"">rfc4773点击下载</a><br><a href="/download/RFC4566.pdf"">rfc4566点击下载</a><br><a href="/download/RFC3551.pdf"">rfc3551点击下载</a><br><a href="/download/RFC2617.pdf"">rfc2617点击下载</a></p>]]></content>
      
      
      <categories>
          
          <category> signaling </category>
          
      </categories>
      
      
        <tags>
            
            <tag> signaling </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sip信令notify消息捕捉问题</title>
      <link href="/2020/03/17/sip-xin-ling-notify-xiao-xi-bu-zhuo-wen-ti/"/>
      <url>/2020/03/17/sip-xin-ling-notify-xiao-xi-bu-zhuo-wen-ti/</url>
      
        <content type="html"><![CDATA[<h2 id="一、报错描述"><a href="#一、报错描述" class="headerlink" title="一、报错描述"></a>一、报错描述</h2><p>在成功向sip server发送register后，server会发送notify消息</p><p><img src="/images/pasted-162.png" alt=""></p><h2 id="二、分析"><a href="#二、分析" class="headerlink" title="二、分析"></a>二、分析</h2><p>client监听端口捕捉不到notify消息，导致没法正确处理<br>1、经查看RFC3261标准，发现一个UA每次注册必须要用同一个callid</p><p><img src="/images/pasted-168.png" alt="same callid in one transaction"></p><p><img src="/images/pasted-169.png" alt="需要用相同的callid更新注册周期"></p><p><img src="/images/pasted-170.png" alt="两次注册间的callid不一样"></p><p><img src="/images/pasted-163.png" alt="很多老外也遇到这个问题（11年前。。。）"></p><h2 id="三、解决（ing）"><a href="#三、解决（ing）" class="headerlink" title="三、解决（ing）"></a>三、解决（ing）</h2><p>时间短任务重，目前没有影响，悬而未决中。。。</p>]]></content>
      
      
      <categories>
          
          <category> signaling </category>
          
      </categories>
      
      
        <tags>
            
            <tag> signaling </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sip信令Invite请求错误码96:mandatory_ie_missing</title>
      <link href="/2020/03/17/sip-xin-ling-invite-qing-qiu-cuo-wu-ma-96-mandatory-ie-missing/"/>
      <url>/2020/03/17/sip-xin-ling-invite-qing-qiu-cuo-wu-ma-96-mandatory-ie-missing/</url>
      
        <content type="html"><![CDATA[<h2 id="一、报错"><a href="#一、报错" class="headerlink" title="一、报错"></a>一、报错</h2><p><img src="/images/pasted-160.png" alt=""></p><h2 id="二、分析"><a href="#二、分析" class="headerlink" title="二、分析"></a>二、分析</h2><p>与正常信令流程对比，发现确实codelist</p><p><img src="/images/pasted-161.png" alt="确实codelist"></p><p>通过查看RFC3261规范，需要专门增加编解码格式</p><p><img src="/images/pasted-165.png" alt="rfc3261规范"></p><p><img src="/images/pasted-171.png" alt="mandatory(强制)"></p><p><img src="/images/pasted-172.png" alt="媒体类型"></p><h2 id="三、解决"><a href="#三、解决" class="headerlink" title="三、解决"></a>三、解决</h2><p><img src="/images/pasted-174.png" alt="添加content type支持"></p><h2 id="四、验证"><a href="#四、验证" class="headerlink" title="四、验证"></a>四、验证</h2><p>修改之后再次交互，发现已经正常，并且呼叫已经路由到了被叫。</p><p><img src="/images/pasted-175.png" alt="success"></p><p><img src="/images/pasted-176.png" alt="呼叫已经到了被叫"></p>]]></content>
      
      
      <categories>
          
          <category> signaling </category>
          
      </categories>
      
      
        <tags>
            
            <tag> signaling </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于java的sip信令注册流程梳理</title>
      <link href="/2020/03/17/ji-yu-java-de-sip-xin-ling-zhu-ce-liu-cheng-shu-li/"/>
      <url>/2020/03/17/ji-yu-java-de-sip-xin-ling-zhu-ce-liu-cheng-shu-li/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/pasted-157.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> signaling </category>
          
          <category> backend </category>
          
      </categories>
      
      
        <tags>
            
            <tag> signaling </tag>
            
            <tag> backend </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于java的sip信令消息初始化梳理</title>
      <link href="/2020/03/17/ji-yu-java-de-sip-xin-ling-xiao-xi-chu-shi-hua-shu-li/"/>
      <url>/2020/03/17/ji-yu-java-de-sip-xin-ling-xiao-xi-chu-shi-hua-shu-li/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/pasted-156.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> signaling </category>
          
          <category> backend </category>
          
      </categories>
      
      
        <tags>
            
            <tag> signaling </tag>
            
            <tag> backend </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SIP—SipProvider梳理</title>
      <link href="/2020/03/16/sip-sipprovider-shu-li/"/>
      <url>/2020/03/16/sip-sipprovider-shu-li/</url>
      
        <content type="html"><![CDATA[<h2 id="一、SipProvider"><a href="#一、SipProvider" class="headerlink" title="一、SipProvider"></a>一、SipProvider</h2><p>1、通用ClientTransaction.sendRequest()</p><p>2、stateful：ServerTransaction.sendResponse(Response)</p><p>3、dialog stateful：Dialog.sendRequest(ClientTransaction)<br>Dialog.sendAck(Request)</p><p>4、stateless:sendResponse(Response)<br>sendRequest(Request)</p>]]></content>
      
      
      <categories>
          
          <category> signaling </category>
          
      </categories>
      
      
        <tags>
            
            <tag> signaling </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SIP—SipListener梳理</title>
      <link href="/2020/03/16/sip-siplistener-shu-li/"/>
      <url>/2020/03/16/sip-siplistener-shu-li/</url>
      
        <content type="html"><![CDATA[<h2 id="一、SipListener"><a href="#一、SipListener" class="headerlink" title="一、SipListener"></a>一、SipListener</h2><p>1、建立应用与sip协议栈之间的沟通桥梁</p><p>2、捕捉sip信令交互事件，用于后续处理</p><p>3、划分：request/response/timeout/ioexception/transaction/dialogterminate</p><p>4、一个sip协议栈有一个SipListener,且只允许一个SipListener注册，一个SipListener允许注册到多个sip协议栈</p><p>5、request消息（transaction）有状态和无状态的发送途径：SipProvider、ClientTransaction.sendRequest()</p><p>6、 response消息可以通过ServerTransaction.sendResponse(Response) 回复</p><p>7、request消息（dialog）回复： Dialog.sendRequest(ClientTransaction)</p><h2 id="二、方法"><a href="#二、方法" class="headerlink" title="二、方法"></a>二、方法</h2><p>1、void processTransactionTerminated(TransactionTerminatedEvent transactionTerminatedEvent)</p><p>2、void processIOException(IOExceptionEvent exceptionEvent)</p><p>3、void processRequest(RequestEvent requestEvent)</p><p>3.1 消息处理：</p><p>1）在servertransaction为null时，如果应用程序决定有状态地响应请求，则必须从SipProvider.getNewServerTransaction（Request）方法请求新的服务器事务，并使用此服务器事务根据请求的内容发送响应。</p><p>2）在servertransaction不为null时，应用基于request消息操作</p><p>3.2 UAS行为：</p><p>1）回复2XX是接受，同时会建立一个会话session</p><p>2）回复3xx/4XX/5xx/6xx表示不接受，含义不同；</p><p>3）回复1xx代表建议client继续呼叫（临时回复）</p><p>3.3 有状态代理：</p><p>3.3.1 处理每次收到的request必须重新建立一个transaction</p><p>3.3.2 代理前转步骤：<br>1）拷贝一份request<br>2）更新request URI<br>3) 更新Max-Forwards header<br>4）选择性添加记录路由头<br>5）选择性添加包头<br>6）Postprocess 路由信息<br>7）提取下一跳地址、端口和协议<br>8）加穿越头<br>9）必要时添加内容长度标题<br>10） ClientTransaction.sendRequest()基于这个前转一个新request<br>11）基于 processResponse(ResponseEvent)处理所有收到的响应<br>12）不发100（Trying）响应给非invite请求</p><p>3.3.3 可以fork多个request到不通的远端，必须要用stateful协议</p><p>3.4 无状态代理（requestEvent.getServerTransaction() == null）</p><p>3.4.1 无状态代理对transaction没有任何感知</p><p>3.4.2 处理请求步骤：<br>1）验证请求<br>2）预处理路由信息<br>3）确定请求的单个目标<br>4）基于 SipProvider.sendRequest(Request)转request到目标地址<br>5）不对cancel请求进行处理</p><p>4、void processResponse(ResponseEvent responseEvent)</p><p>4.1 响应处理</p><p>4.1.1 response可能与存在的request应用不相干</p><p>4.1.2 如果responseEvent.getClientTransaction() == null,则不相干，并被认为是偏离消息，用SipProvider.sendResponse(Response)处理；<br>不等于Null,则基于response消息进行处理</p><p>4.1.3 UAC处理行为：</p><p>1）要回ACK给所有最终收到的响应</p><p>2）response在300~699之间，ACK为transaction层发起的结束</p><p>3）response是2XX，ACK为UAC应用发起的结束，同时建立UAC和UAS之间的链接</p><p>4.2 stateful代理处理步骤：<br>1）找响应上下文<br>2）移除掉via头字段<br>3）添加response内容到respongse消息中<br>4）检查是否可以直接前转发送<br>5）选择最佳response（没看懂）</p><p>5、void processTimeout(TimeoutEvent timeoutEvent)<br>超时</p>]]></content>
      
      
      <categories>
          
          <category> signaling </category>
          
      </categories>
      
      
        <tags>
            
            <tag> signaling </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SIP—ListeningPoint梳理</title>
      <link href="/2020/03/16/sip-listeningpoint-shu-li/"/>
      <url>/2020/03/16/sip-listeningpoint-shu-li/</url>
      
        <content type="html"><![CDATA[<p>1、监听网络端口<br>2、默认端口5060、5061<br>3、支持SCTP、TCP、TLS、UDP<br>4、    getIPAddress()：获取侦听点IP地址<br>5、    getPort()：获取侦听端口<br>6、    getSentBy()<br>7、    getTransport()<br>8、    setSentBy(String sentBy)：设定sentby string</p><p><img src="/images/pasted-116.png" alt="实例"></p>]]></content>
      
      
      <categories>
          
          <category> signaling </category>
          
          <category> backend </category>
          
      </categories>
      
      
        <tags>
            
            <tag> signaling </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SIP信令流程梳理</title>
      <link href="/2020/03/16/sip-xin-ling-liu-cheng-shu-li/"/>
      <url>/2020/03/16/sip-xin-ling-liu-cheng-shu-li/</url>
      
        <content type="html"><![CDATA[<h2 id="一、注册"><a href="#一、注册" class="headerlink" title="一、注册"></a>一、注册</h2><p><img src="/images/pasted-113.png" alt="sip注册流程"></p><h2 id="二、基本通话流程"><a href="#二、基本通话流程" class="headerlink" title="二、基本通话流程"></a>二、基本通话流程</h2><p><img src="/images/pasted-114.png" alt="基本通话流程"></p><h2 id="三、被叫未摘机主叫挂机"><a href="#三、被叫未摘机主叫挂机" class="headerlink" title="三、被叫未摘机主叫挂机"></a>三、被叫未摘机主叫挂机</h2><p><img src="/images/pasted-115.png" alt="主叫挂机"></p>]]></content>
      
      
      <categories>
          
          <category> signaling </category>
          
      </categories>
      
      
        <tags>
            
            <tag> signaling </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Sip-Dialog示例</title>
      <link href="/2020/03/15/sip-dialog-shi-li/"/>
      <url>/2020/03/15/sip-dialog-shi-li/</url>
      
        <content type="html"><![CDATA[<h2 id="一、dialog"><a href="#一、dialog" class="headerlink" title="一、dialog"></a>一、dialog</h2><p>1、端到端的dialog连接<br>2、有状态机，如下：<br>Invite Dialog States:<br>Null –&gt; Early –&gt; Confirmed –&gt; Terminated</p><p>Other Dialog-creating Requests Dialog States (ie. SUBSCRIBE):<br>Null –&gt; Confirmed –&gt; Terminated.</p><h2 id="二、方法"><a href="#二、方法" class="headerlink" title="二、方法"></a>二、方法</h2><p>1、    createAck(long cseq)<br>2、  createPrack(Response relResponse)<br>3、    createReliableProvisionalResponse(int statusCode)<br>4、    createRequest(String method)<br>5、    delete()<br>6、    getApplicationData()<br>7、    getCallId()<br>8、    getDialogId()<br>9、    getLocalParty()<br>10、    getLocalSeqNumber()<br>11、    getLocalTag()<br>12、    getRemoteParty()<br>13、    getRemoteSeqNumber()<br>14、    getRemoteTag()<br>15、    getRemoteTarget()<br>16、    getRouteSet()<br>17、    getState()<br>18、    incrementLocalSequenceNumber()<br>19、    isSecure()<br>20、    isServer()<br>21、    sendAck(Request ackRequest)<br>22、    sendReliableProvisionalResponse(Response relResponse)<br>23、    sendRequest(ClientTransaction clientTransaction)<br>24、    setApplicationData(Object applicationData)<br>25、    terminateOnBye(boolean terminateFlag)</p><h2 id="三、实例"><a href="#三、实例" class="headerlink" title="三、实例"></a>三、实例</h2><p>待补充</p>]]></content>
      
      
      <categories>
          
          <category> signaling </category>
          
          <category> backend </category>
          
      </categories>
      
      
        <tags>
            
            <tag> signaling </tag>
            
            <tag> backend </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sip-ClientTransaction示例</title>
      <link href="/2020/03/13/sip-clienttransaction-shi-li/"/>
      <url>/2020/03/13/sip-clienttransaction-shi-li/</url>
      
        <content type="html"><![CDATA[<h2 id="一、ClientTransaction"><a href="#一、ClientTransaction" class="headerlink" title="一、ClientTransaction"></a>一、ClientTransaction</h2><p>1、客户端向sip服务器发请求<br>2、客户端匹配sip服务器的响应及激活后续信令交互<br>3、由SipProvider.getNewClientTransaction(Request)产生<br>4、根据响应选择下一步操作（开发）<br>5、超时响应<br>6、客户端的一个任务需要一系列ClientTransaction<br>7、事务ID必须唯一，由from/to/callid/cia/cseq等经过算法计算得来<br>8、更多详细定义参考RFC-3261</p><h2 id="二、信令交互举例"><a href="#二、信令交互举例" class="headerlink" title="二、信令交互举例"></a>二、信令交互举例</h2><p>Invite Transaction:<br>Calling –&gt; Proceeding –&gt; Completed –&gt; Terminated</p><p>Non-Invite Transaction:<br>Trying –&gt; Proceeding –&gt; Completed –&gt; Terminated</p><h2 id="三、方法"><a href="#三、方法" class="headerlink" title="三、方法"></a>三、方法</h2><p>1、createAck(): 被绊了</p><p>2、createCancel()：从与该客户端事务关联的请求创建cancel信令，调用后发送到server</p><p>3、sendRequest()：发送事务内的request，调用后发送到server</p><p>4、继承方法<br>getApplicationData, getBranchId, getDialog, getRequest, getRetransmitTimer, getState, setApplicationData, setRetransmitTimer, terminate</p><h2 id="四、实例"><a href="#四、实例" class="headerlink" title="四、实例"></a>四、实例</h2><p><img src="/images/pasted-110.png" alt="获取branchID和发送request"></p>]]></content>
      
      
      <categories>
          
          <category> signaling </category>
          
          <category> backend </category>
          
      </categories>
      
      
        <tags>
            
            <tag> signaling </tag>
            
            <tag> backend </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jain-sip-ri/javax.sip*sip信令交互应用梳理</title>
      <link href="/2020/03/13/jain-sip-ri-javax-sdp-javax-sip-kuang-jia-shu-li/"/>
      <url>/2020/03/13/jain-sip-ri-javax-sdp-javax-sip-kuang-jia-shu-li/</url>
      
        <content type="html"><![CDATA[<p>pre:<br>sip信令是VOIP、NGN、IMS以及5G网络都应用的随路信令，开发电信网元稳定性是首要因素，现梳理jain-sip，以便系统性掌握，用于指导后续开发与实践。</p><p>logs:<br>2020.03.13: 首次更新</p><h2 id="一、jain-sip-ri组成"><a href="#一、jain-sip-ri组成" class="headerlink" title="一、jain-sip-ri组成"></a>一、jain-sip-ri组成</h2><p>1、为android开发提供支撑<br>2、为测试提供支撑<br>3、为java开发提供支撑（主要分析）</p><h2 id="二、框架梳理（更新ing）"><a href="#二、框架梳理（更新ing）" class="headerlink" title="二、框架梳理（更新ing）"></a>二、框架梳理（更新ing）</h2><h3 id="2-1-javax-sdp"><a href="#2-1-javax-sdp" class="headerlink" title="2.1 javax.sdp"></a>2.1 javax.sdp</h3><p>简介：目前判定用于信令交互后的媒体RTP包对接，优先级排后</p><h3 id="2-2-javax-sip"><a href="#2-2-javax-sip" class="headerlink" title="2.2 javax.sip"></a>2.2 javax.sip</h3><p>简介：提供开发所用主叫的API接口，着重学习掌握这里</p><p>Interface ：</p><p>1、ClientTransaction ：用于向server发送transaction请求。<a href="https://cyfreeman.github.io/2020/03/13/sip-clienttransaction-shi-li/" title="用法和实例">用法和实例传送</a></p><p>2、Dialog：端到端电话的sip流程。<a href="https://cyfreeman.github.io/2020/03/15/sip-dialog-shi-li/" title="用法和实例">用法和实例传送</a></p><p>3、ListeningPoint：监听IP端口，一般调取response信令<a href="https://cyfreeman.github.io/2020/03/16/sip-listeningpoint-shu-li/" title="用法和实例">用法和实例传送</a></p><p>4、ServerTransaction：server处理Client的sip信令及响应<a href="https://cyfreeman.github.io/2020/03/13/sip-clienttransaction-shi-li/" title="用法和实例">用法和实例传送</a></p><p>5、SipListener：为应用与sip协议栈提供衔接<a href="https://cyfreeman.github.io/2020/03/16/sip-siplistener-shu-li/" title="用法和实例">用法和实例传送</a></p><p>6、SipProvider：基于sip协议栈传送消息实体<a href="https://cyfreeman.github.io/2020/03/16/sip-sipprovider-shu-li//" title="用法和实例">用法和实例传送</a></p><p>7、SipStack：sip信令协议栈<a href="https://cyfreeman.github.io/2020/03/13/sip-clienttransaction-shi-li/" title="用法和实例">用法和实例传送</a></p><p>8、Transaction：事务——sip信令的基本组成<a href="https://cyfreeman.github.io/2020/03/13/sip-clienttransaction-shi-li/" title="用法和实例">用法和实例传送</a></p><h3 id="2-3-javax-sip-address"><a href="#2-3-javax-sip-address" class="headerlink" title="2.3 javax.sip.address"></a>2.3 javax.sip.address</h3><p>简介：用于sip信令路由寻址</p><p>Interface ：</p><pre class=" language-bash"><code class="language-bash"></code></pre><p>Class ：</p><pre class=" language-bash"><code class="language-bash"></code></pre><p>Exception ：</p><pre class=" language-bash"><code class="language-bash"></code></pre><h3 id="2-4-javax-sip-header"><a href="#2-4-javax-sip-header" class="headerlink" title="2.4 javax.sip.header"></a>2.4 javax.sip.header</h3><p>简介：封装信令头字段</p><p>Interface ：</p><pre class=" language-bash"><code class="language-bash"></code></pre><p>Class ：</p><pre class=" language-bash"><code class="language-bash"></code></pre><p>Exception ：</p><pre class=" language-bash"><code class="language-bash"></code></pre><h3 id="2-5-javax-sip-message"><a href="#2-5-javax-sip-message" class="headerlink" title="2.5 javax.sip.message"></a>2.5 javax.sip.message</h3><p>简介：封装sip消息体</p><p>Interface ：</p><pre class=" language-bash"><code class="language-bash"></code></pre><p>Class ：</p><pre class=" language-bash"><code class="language-bash"></code></pre><p>Exception ：</p><pre class=" language-bash"><code class="language-bash"></code></pre>]]></content>
      
      
      <categories>
          
          <category> signaling </category>
          
          <category> backend </category>
          
      </categories>
      
      
        <tags>
            
            <tag> signaling </tag>
            
            <tag> backend </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Sip注册同一个信令交互被分解问题</title>
      <link href="/2020/03/13/sip-zhu-ce-tong-yi-ge-xin-ling-jiao-hu-bei-fen-jie-wen-ti/"/>
      <url>/2020/03/13/sip-zhu-ce-tong-yi-ge-xin-ling-jiao-hu-bei-fen-jie-wen-ti/</url>
      
        <content type="html"><![CDATA[<h2 id="1、现象"><a href="#1、现象" class="headerlink" title="1、现象"></a>1、现象</h2><p>正常的信令交互如下图所示</p><p><img src="/images/pasted-106.png" alt="正常的流程"></p><p>一个信令交互被分解为两个<br><img src="/images/pasted-107.png" alt="一个信令交互被分解"></p><h2 id="2、分析"><a href="#2、分析" class="headerlink" title="2、分析"></a>2、分析</h2><p>经查资料，显示sip事物transaction代表一次sip事务，包括第一个请求到最终一个请求过程。</p><p><img src="/images/pasted-108.png" alt="查资料截图"></p><p>理论上叫transactionID，但是经过查找并未发现该字眼字段，经过对正常与异常信令进行对比发现，branchID即标志一个信令交互流程，如下图所示：</p><p><img src="/images/pasted-109.png" alt="branchID"></p><h2 id="3、解决"><a href="#3、解决" class="headerlink" title="3、解决"></a>3、解决</h2><p>用同一个transactionID发送请求与响应解决了该问题</p><p><img src="/images/pasted-159.png" alt="捕捉transaction"><br><img src="/images/pasted-158.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> signaling </category>
          
      </categories>
      
      
        <tags>
            
            <tag> signaling </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>freeswitch 修改 rtp 端口范围</title>
      <link href="/2020/03/13/freeswitch-xiu-gai-rtp-duan-kou-fan-wei/"/>
      <url>/2020/03/13/freeswitch-xiu-gai-rtp-duan-kou-fan-wei/</url>
      
        <content type="html"><![CDATA[<pre class=" language-bash"><code class="language-bash"><span class="token function">cd</span> freeswitch/conf/autoload_configsvim switch.conf.xml </code></pre><p><img src="/images/pasted-95.png" alt="修改"></p>]]></content>
      
      
      <categories>
          
          <category> signaling </category>
          
      </categories>
      
      
        <tags>
            
            <tag> signaling </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于java的sip客户端注册流程梳理</title>
      <link href="/2020/03/12/ji-yu-java-de-sip-ke-hu-duan-zhu-ce-liu-cheng-shu-li/"/>
      <url>/2020/03/12/ji-yu-java-de-sip-ke-hu-duan-zhu-ce-liu-cheng-shu-li/</url>
      
        <content type="html"><![CDATA[<h2 id="pre"><a href="#pre" class="headerlink" title="pre"></a>pre</h2><p>今天实现了基于sip信令的码号注册成功，梳理一下关键点和流程。</p><h2 id="一、Value"><a href="#一、Value" class="headerlink" title="一、Value"></a>一、Value</h2><pre class=" language-bash"><code class="language-bash">//基本信息username:注册到sip server的账号server  ：sip server的IP地址password：待注册账号的密码，需要sip server配置认可//建立sip信令SipFactory sipFactory：加载使用sip apiSipStack sipStack：为sip信令交互创建transactionID、提供收发信息IOSipProvider sipProvider：由sipStack创建，向server发送msgMessageFactory messageFactory：创建sip消息体HeaderFactory headerFactory：创建sip消息头AddressFactory addressFactory：创建地址信息ListeningPoint listeningPoint：sip消息监听地址设置Properties properties：sip消息其他属性配置ClientTransaction inviteTid：将request封装事物IP发送到sip serverRequest request：sip请求体Response response：sip server的响应体//自定义填充信息部分proxy：信令转发代理，非中转不需要填sipIPlocalIPsipport：本地端口rport：监听端口protocol <span class="token operator">=</span> <span class="token string">"UDP"</span>tag <span class="token operator">=</span> <span class="token punctuation">(</span>new Random<span class="token punctuation">(</span><span class="token punctuation">))</span>.nextInt<span class="token punctuation">(</span><span class="token punctuation">)</span>：标签，组成消息头ContactHeader contactHeader：联系消息头</code></pre><h2 id="二、初始化"><a href="#二、初始化" class="headerlink" title="二、初始化"></a>二、初始化</h2><pre class=" language-bash"><code class="language-bash">    public void init<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        try <span class="token punctuation">{</span>            // Get the local IP address.            localIP <span class="token operator">=</span> InetAddress.getLocalHost<span class="token punctuation">(</span><span class="token punctuation">)</span>.getHostAddress<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            // Create the SIP factory and <span class="token keyword">set</span> the path name.            sipFactory <span class="token operator">=</span> SipFactory.getInstance<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            sipFactory.setPathName<span class="token punctuation">(</span><span class="token string">"gov.nist"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            // Create and <span class="token keyword">set</span> the SIP stack properties.            properties <span class="token operator">=</span> new Properties<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            properties.setProperty<span class="token punctuation">(</span><span class="token string">"javax.sip.STACK_NAME"</span>, <span class="token string">"stack"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            properties.setProperty<span class="token punctuation">(</span><span class="token string">"gov.nist.javax.sip.TRACE_LEVEL"</span>, <span class="token string">"32"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            if<span class="token punctuation">(</span>proxy <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                properties.setProperty<span class="token punctuation">(</span><span class="token string">"javax.sip.OUTBOUND_PROXY"</span>, sipIP + <span class="token string">':'</span> + sipport + <span class="token string">'/'</span> + protocol<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            properties.setProperty<span class="token punctuation">(</span><span class="token string">"gov.nist.javax.sip.LOG_MESSAGE_CONTENT"</span>, <span class="token string">"true"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            properties.setProperty<span class="token punctuation">(</span><span class="token string">"gov.nist.javax.sip.DEBUG_LOG"</span>,  <span class="token string">"mss-jsip-debuglog.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            properties.setProperty<span class="token punctuation">(</span><span class="token string">"gov.nist.javax.sip.SERVER_LOG"</span>,<span class="token string">"mss-jsip-messages.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            // Create the SIP stack.            sipStack <span class="token operator">=</span> sipFactory.createSipStack<span class="token punctuation">(</span>this.properties<span class="token punctuation">)</span><span class="token punctuation">;</span>            // Create the SIP message factory.            messageFactory <span class="token operator">=</span> sipFactory.createMessageFactory<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            // Create the SIP header factory.            headerFactory <span class="token operator">=</span> sipFactory.createHeaderFactory<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            // Create the SIP address factory.            addressFactory <span class="token operator">=</span> sipFactory.createAddressFactory<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            // Create the SIP listening point and bind it to the local IP            // address, port and protocol.            listeningPoint <span class="token operator">=</span> sipStack.createListeningPoint<span class="token punctuation">(</span>localIP, rport, protocol<span class="token punctuation">)</span><span class="token punctuation">;</span>            // Create the SIP provider.            sipProvider <span class="token operator">=</span> sipStack.createSipProvider<span class="token punctuation">(</span>listeningPoint<span class="token punctuation">)</span><span class="token punctuation">;</span>            // Add our application as a SIP listener.            sipProvider.addSipListener<span class="token punctuation">(</span>this<span class="token punctuation">)</span><span class="token punctuation">;</span>            // Display the local IP address and port <span class="token keyword">in</span> the text area.        <span class="token punctuation">}</span> catch <span class="token punctuation">(</span>Exception e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e.printStackTrace<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            // If an error occurs, display an error message box and exit.            System.exit<span class="token punctuation">(</span>-1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><h2 id="三、注册"><a href="#三、注册" class="headerlink" title="三、注册"></a>三、注册</h2><pre class=" language-bash"><code class="language-bash">    public void register<span class="token punctuation">(</span>Response response<span class="token punctuation">)</span> <span class="token punctuation">{</span>        try <span class="token punctuation">{</span>//            cseq++<span class="token punctuation">;</span>            current_process <span class="token operator">=</span> cseq + <span class="token string">"REGISTER"</span><span class="token punctuation">;</span>            ArrayList viaHeaders <span class="token operator">=</span> new ArrayList<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ViaHeader viaHeader <span class="token operator">=</span> headerFactory.createViaHeader<span class="token punctuation">(</span>localIP,                    rport, <span class="token string">"udp"</span>, null<span class="token punctuation">)</span><span class="token punctuation">;</span>            viaHeader.setRPort<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            viaHeaders.add<span class="token punctuation">(</span>viaHeader<span class="token punctuation">)</span><span class="token punctuation">;</span>            // The <span class="token string">"Max-Forwards"</span> header.            MaxForwardsHeader maxForwardsHeader <span class="token operator">=</span> headerFactory.createMaxForwardsHeader<span class="token punctuation">(</span>70<span class="token punctuation">)</span><span class="token punctuation">;</span>            // The <span class="token string">"Call-Id"</span> header.            CallIdHeader callIdHeader <span class="token operator">=</span> sipProvider.getNewCallId<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            // The <span class="token string">"CSeq"</span> header.            @SuppressWarnings<span class="token punctuation">(</span><span class="token string">"deprecation"</span><span class="token punctuation">)</span>            CSeqHeader cSeqHeader <span class="token operator">=</span> headerFactory.createCSeqHeader<span class="token punctuation">(</span>cseq,Request.REGISTER<span class="token punctuation">)</span><span class="token punctuation">;</span>            Address fromAddress <span class="token operator">=</span> addressFactory.createAddress<span class="token punctuation">(</span><span class="token string">"sip:"</span>                    + username + <span class="token string">'@'</span> + server<span class="token punctuation">)</span><span class="token punctuation">;</span>            FromHeader fromHeader <span class="token operator">=</span> headerFactory.createFromHeader<span class="token punctuation">(</span>                    fromAddress, String.valueOf<span class="token punctuation">(</span>this.tag<span class="token punctuation">))</span><span class="token punctuation">;</span>            // The <span class="token string">"To"</span> header.            ToHeader toHeader <span class="token operator">=</span> headerFactory.createToHeader<span class="token punctuation">(</span>fromAddress , null<span class="token punctuation">)</span><span class="token punctuation">;</span>            // Create the contact address used <span class="token keyword">for</span> all SIP messages.            contactAddress <span class="token operator">=</span> addressFactory.createAddress<span class="token punctuation">(</span><span class="token string">"sip:"</span> + username + <span class="token string">"@"</span>+ localIP +<span class="token string">":"</span>+rport+ <span class="token string">";"</span>+ <span class="token string">"transport=UDP"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            // Create the contact header used <span class="token keyword">for</span> all SIP messages.            contactHeader <span class="token operator">=</span> headerFactory.createContactHeader<span class="token punctuation">(</span>contactAddress<span class="token punctuation">)</span><span class="token punctuation">;</span>            URI requestURI <span class="token operator">=</span> addressFactory.createURI<span class="token punctuation">(</span><span class="token string">"sip:"</span> + server<span class="token punctuation">)</span><span class="token punctuation">;</span>            request <span class="token operator">=</span> messageFactory.createRequest<span class="token punctuation">(</span>requestURI, Request.REGISTER,callIdHeader, cSeqHeader, fromHeader, toHeader, viaHeaders, maxForwardsHeader<span class="token punctuation">)</span><span class="token punctuation">;</span>            request.addHeader<span class="token punctuation">(</span>contactHeader<span class="token punctuation">)</span><span class="token punctuation">;</span>//      System.out.println<span class="token punctuation">(</span>request.toString<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token punctuation">;</span>            if<span class="token punctuation">(</span>response <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>                System.out.println<span class="token punctuation">(</span>response.toString<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>response.getStatusCode<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> 401<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    AuthorizationHeader authHeader <span class="token operator">=</span> makeAuthHeader<span class="token punctuation">(</span>headerFactory, response, request, username, password<span class="token punctuation">)</span><span class="token punctuation">;</span>                    request.addHeader<span class="token punctuation">(</span>authHeader<span class="token punctuation">)</span><span class="token punctuation">;</span>                    inviteTid <span class="token operator">=</span> sipProvider.getNewClientTransaction<span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>                    // send the request out.                    inviteTid.sendRequest<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span> <span class="token punctuation">{</span>                inviteTid <span class="token operator">=</span> sipProvider.getNewClientTransaction<span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>                // send the request out.                inviteTid.sendRequest<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>//      dialog <span class="token operator">=</span> inviteTid.getDialog<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System.out.println<span class="token punctuation">(</span>request.toString<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token punctuation">;</span>            // Send the request statelessly through the SIP provider.//          this.sipProvider.sendRequest<span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>            // Display the message <span class="token keyword">in</span> the text area.//      logger.debug<span class="token punctuation">(</span><span class="token string">"Request sent:\n"</span> + request.toString<span class="token punctuation">(</span><span class="token punctuation">)</span> + <span class="token string">"\n\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> catch <span class="token punctuation">(</span>Exception e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            // If an error occurred, display the error.            e.printStackTrace<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>//      logger.debug<span class="token punctuation">(</span><span class="token string">"Request sent failed: "</span> + e.getMessage<span class="token punctuation">(</span><span class="token punctuation">)</span> + <span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><h2 id="四、鉴权"><a href="#四、鉴权" class="headerlink" title="四、鉴权"></a>四、鉴权</h2><pre class=" language-bash"><code class="language-bash">    private AuthorizationHeader makeAuthHeader<span class="token punctuation">(</span>HeaderFactory headerFactory2,  Response response, Request request, String username2,                                               String password2<span class="token punctuation">)</span> throws ParseException <span class="token punctuation">{</span>        // TODO Auto-generated method stub        // Authenticate header with challenge we need to reply to        WWWAuthenticateHeader ah_c <span class="token operator">=</span>  <span class="token punctuation">(</span>WWWAuthenticateHeader<span class="token punctuation">)</span>response.getHeader<span class="token punctuation">(</span>WWWAuthenticateHeader.NAME<span class="token punctuation">)</span><span class="token punctuation">;</span>        // Authorization header we will build with response to challenge        AuthorizationHeader ah_r <span class="token operator">=</span>    headerFactory.createAuthorizationHeader<span class="token punctuation">(</span>ah_c.getScheme<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token punctuation">;</span>        // assemble data we need to create response string        URI request_uri <span class="token operator">=</span> request.getRequestURI<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String request_method <span class="token operator">=</span> request.getMethod<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String nonce  <span class="token operator">=</span> ah_c.getNonce<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String algrm  <span class="token operator">=</span> ah_c.getAlgorithm<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String realm  <span class="token operator">=</span> ah_c.getRealm<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        MessageDigest mdigest<span class="token punctuation">;</span>        try <span class="token punctuation">{</span>            mdigest <span class="token operator">=</span> MessageDigest.getInstance<span class="token punctuation">(</span>algrm<span class="token punctuation">)</span><span class="token punctuation">;</span>            // A1            String A1 <span class="token operator">=</span> username + <span class="token string">":"</span> + realm + <span class="token string">":"</span> + password<span class="token punctuation">;</span>            String HA1 <span class="token operator">=</span> toHexString<span class="token punctuation">(</span>mdigest.digest<span class="token punctuation">(</span>A1.getBytes<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            // A2            String A2 <span class="token operator">=</span> request_method.toUpperCase<span class="token punctuation">(</span><span class="token punctuation">)</span> + <span class="token string">":"</span> + request_uri <span class="token punctuation">;</span>            String HA2 <span class="token operator">=</span> toHexString<span class="token punctuation">(</span>mdigest.digest<span class="token punctuation">(</span>A2.getBytes<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            // KD            String KD <span class="token operator">=</span> HA1 + <span class="token string">":"</span> + nonce + <span class="token string">":"</span> + HA2<span class="token punctuation">;</span>            String responsenew <span class="token operator">=</span> toHexString<span class="token punctuation">(</span>mdigest.digest<span class="token punctuation">(</span>KD.getBytes<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ah_r.setUsername<span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>            ah_r.setRealm<span class="token punctuation">(</span>realm<span class="token punctuation">)</span><span class="token punctuation">;</span>            ah_r.setNonce<span class="token punctuation">(</span>nonce<span class="token punctuation">)</span><span class="token punctuation">;</span>            ah_r.setURI<span class="token punctuation">(</span>request_uri<span class="token punctuation">)</span><span class="token punctuation">;</span>            ah_r.setAlgorithm<span class="token punctuation">(</span>algrm<span class="token punctuation">)</span><span class="token punctuation">;</span>            ah_r.setResponse<span class="token punctuation">(</span>responsenew<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> catch <span class="token punctuation">(</span>NoSuchAlgorithmException e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            // TODO Auto-generated catch block            e.printStackTrace<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> ah_r<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> signaling </category>
          
          <category> backend </category>
          
      </categories>
      
      
        <tags>
            
            <tag> signaling </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sip码号注册鉴权失败</title>
      <link href="/2020/03/12/sip-bian-yi-bao-cuo/"/>
      <url>/2020/03/12/sip-bian-yi-bao-cuo/</url>
      
        <content type="html"><![CDATA[<h2 id="鉴权失败"><a href="#鉴权失败" class="headerlink" title="鉴权失败"></a>鉴权失败</h2><pre class=" language-bash"><code class="language-bash">REGISTER sip:10.17.33.223 SIP/2.0Call-ID: d944cbb3e057911913ee89c7e8d63ba3@10.8.11.68CSeq: 21 REGISTERFrom: <span class="token operator">&lt;</span>sip:username@10.17.33.223<span class="token operator">></span><span class="token punctuation">;</span>tag<span class="token operator">=</span>1394664510To: <span class="token operator">&lt;</span>sip:username@10.17.33.223<span class="token operator">></span>Via: SIP/2.0/UDP 10.8.11.68:52216<span class="token punctuation">;</span>rport<span class="token punctuation">;</span>branch<span class="token operator">=</span>z9hG4bK-363034-444cdda481fef0cca553fe8b49612732Max-Forwards: 70Contact: <span class="token operator">&lt;</span>sip:1020@10.8.11.68:52216<span class="token punctuation">;</span>transport<span class="token operator">=</span>UDP<span class="token operator">></span>Content-Length: 0SIP/2.0 401 UnauthorizedVia: SIP/2.0/UDP 10.8.11.68:52216<span class="token punctuation">;</span>rport<span class="token operator">=</span>52216<span class="token punctuation">;</span>branch<span class="token operator">=</span>z9hG4bK-363034-444cdda481fef0cca553fe8b49612732From: <span class="token operator">&lt;</span>sip:username@10.17.33.223<span class="token operator">></span><span class="token punctuation">;</span>tag<span class="token operator">=</span>1394664510To: <span class="token operator">&lt;</span>sip:username@10.17.33.223<span class="token operator">></span><span class="token punctuation">;</span>tag<span class="token operator">=</span>9U0SFm16B9gycCall-ID: d944cbb3e057911913ee89c7e8d63ba3@10.8.11.68CSeq: 21 REGISTERUser-Agent: FreeSWITCH-mod_sofia/1.10.2-release~64bitAllow: INVITE,ACK,BYE,CANCEL,OPTIONS,MESSAGE,INFO,UPDATE,REGISTER,REFER,NOTIFY,PUBLISH,SUBSCRIBESupported: timer,path,replacesWWW-Authenticate: Digest realm<span class="token operator">=</span><span class="token string">"10.17.33.223"</span>,nonce<span class="token operator">=</span><span class="token string">"6a36fa28-8d61-4bd4-bfde-7cdaa14f3d36"</span>,algorithm<span class="token operator">=</span>MD5,qop<span class="token operator">=</span><span class="token string">"auth"</span>Content-Length: 0REGISTER sip:10.17.33.223 SIP/2.0Call-ID: 8376f2ed62ec7622353d3d5fae0bc2ff@10.8.11.68CSeq: 22 REGISTERFrom: <span class="token operator">&lt;</span>sip:username@10.17.33.223<span class="token operator">></span><span class="token punctuation">;</span>tag<span class="token operator">=</span>1394664510To: <span class="token operator">&lt;</span>sip:username@10.17.33.223<span class="token operator">></span>Via: SIP/2.0/UDP 10.8.11.68:52216<span class="token punctuation">;</span>rport<span class="token punctuation">;</span>branch<span class="token operator">=</span>z9hG4bK-363034-9db7b43da3b5d27dcf8a07c1c611b89dMax-Forwards: 70Contact: <span class="token operator">&lt;</span>sip:1020@10.8.11.68:52216<span class="token punctuation">;</span>transport<span class="token operator">=</span>UDP<span class="token operator">></span>Authorization: Digest username<span class="token operator">=</span><span class="token string">"1020"</span>,realm<span class="token operator">=</span><span class="token string">"10.17.33.223"</span>,nonce<span class="token operator">=</span><span class="token string">"6a36fa28-8d61-4bd4-bfde-7cdaa14f3d36"</span>,uri<span class="token operator">=</span><span class="token string">"sip:10.17.33.223"</span>,algorithm<span class="token operator">=</span>MD5,response<span class="token operator">=</span><span class="token string">"553a2b907a0769e3a1f57430f7163987"</span>Content-Length: 0SIP/2.0 403 ForbiddenVia: SIP/2.0/UDP 10.8.11.68:52216<span class="token punctuation">;</span>rport<span class="token operator">=</span>52216<span class="token punctuation">;</span>branch<span class="token operator">=</span>z9hG4bK-363034-9db7b43da3b5d27dcf8a07c1c611b89dFrom: <span class="token operator">&lt;</span>sip:username@10.17.33.223<span class="token operator">></span><span class="token punctuation">;</span>tag<span class="token operator">=</span>1394664510To: <span class="token operator">&lt;</span>sip:username@10.17.33.223<span class="token operator">></span><span class="token punctuation">;</span>tag<span class="token operator">=</span>a5SjHFja9H7grCall-ID: 8376f2ed62ec7622353d3d5fae0bc2ff@10.8.11.68CSeq: 22 REGISTERUser-Agent: FreeSWITCH-mod_sofia/1.10.2-release~64bitAllow: INVITE,ACK,BYE,CANCEL,OPTIONS,MESSAGE,INFO,UPDATE,REGISTER,REFER,NOTIFY,PUBLISH,SUBSCRIBESupported: timer,path,replacesContent-Length: 0</code></pre><h2 id="定位问题"><a href="#定位问题" class="headerlink" title="定位问题"></a>定位问题</h2><p>抓包显示找不到该用户：<br>2020-03-12 07:00:51.918859 [WARNING] sofia_reg.c:2929 Can’t find user [<a href="mailto:1020@10.17.33.223">1020@10.17.33.223</a>] from 10.8.11.68</p><p><img src="/images/pasted-84.png" alt="显示找不到用户"></p><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>freeswitch默认账户1000~1019，用1020测试并未配置该用户，改用1019成功注册！</p><p><img src="/images/pasted-85.png" alt="successful"></p>]]></content>
      
      
      <categories>
          
          <category> signaling </category>
          
      </categories>
      
      
        <tags>
            
            <tag> signaling </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sip编译报错gov.nist.javax.sip.SipStackImpl could not be instantiated. Ensure the Path Name has been set.</title>
      <link href="/2020/03/11/sip-bian-yi-bao-cuo-gov.nist.javax.sip.sipstackimpl-could-not-be-instantiated.ensure-the-path-name-has-been-set./"/>
      <url>/2020/03/11/sip-bian-yi-bao-cuo-gov.nist.javax.sip.sipstackimpl-could-not-be-instantiated.ensure-the-path-name-has-been-set./</url>
      
        <content type="html"><![CDATA[<h2 id="报错："><a href="#报错：" class="headerlink" title="报错："></a>报错：</h2><pre class=" language-bash"><code class="language-bash">javax.sip.PeerUnavailableException: The Peer SIP Stack: gov.nist.javax.sip.SipStackImpl could not be instantiated. Ensure the Path Name has been set.    at javax.sip.SipFactory.createStack<span class="token punctuation">(</span>SipFactory.java:324<span class="token punctuation">)</span>    at javax.sip.SipFactory.createSipStack<span class="token punctuation">(</span>SipFactory.java:152<span class="token punctuation">)</span></code></pre><h2 id="解决："><a href="#解决：" class="headerlink" title="解决："></a>解决：</h2><p>添加log4j到pom.xml</p><pre class=" language-bash"><code class="language-bash">        <span class="token operator">&lt;</span><span class="token operator">!</span>-- https://mvnrepository.com/artifact/log4j/log4j --<span class="token operator">></span>        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>log4j<span class="token operator">&lt;</span>/groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>log4j<span class="token operator">&lt;</span>/artifactId<span class="token operator">></span>            <span class="token operator">&lt;</span>version<span class="token operator">></span>1.2.17<span class="token operator">&lt;</span>/version<span class="token operator">></span>        <span class="token operator">&lt;</span>/dependency<span class="token operator">></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> signaling </category>
          
          <category> backend </category>
          
      </categories>
      
      
        <tags>
            
            <tag> backend </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决freeswitch语音文件加载慢问题</title>
      <link href="/2020/03/10/jie-jue-freeswitch-yu-yin-wen-jian-xia-zai-man-wen-ti/"/>
      <url>/2020/03/10/jie-jue-freeswitch-yu-yin-wen-jian-xia-zai-man-wen-ti/</url>
      
        <content type="html"><![CDATA[<p>make -j cd-sounds-install<br>make -j cd-moh-install<br>总是下载的很慢，有时间的话可以等待，我一般晚上下班回家前执行，第二天来就弄好了，如果急的话，也可以从windows下载，再通过XFTP等工具挪到服务器，chmod一下权限即可直接安装。</p><p><img src="/images/pasted-81.png" alt="存放目录"></p>]]></content>
      
      
      <categories>
          
          <category> media </category>
          
      </categories>
      
      
        <tags>
            
            <tag> media </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>服务器被国外IP恶意扫描处理方法</title>
      <link href="/2020/03/10/fu-wu-qi-bei-guo-wai-ip-e-yi-sao-miao-chu-li-fang-fa/"/>
      <url>/2020/03/10/fu-wu-qi-bei-guo-wai-ip-e-yi-sao-miao-chu-li-fang-fa/</url>
      
        <content type="html"><![CDATA[<p>服务器遇到被荷兰某ip疯狂扫描，最初采取添加黑名单方式，添加了几百个，貌似对方会变换IP继续攻击<br>可以启用fail2ban  尝试3次失败的ip ban掉的方法来屏蔽<br><img src="/images/pasted-80.png" alt="被荷兰某IP疯狂扫描"></p>]]></content>
      
      
      <categories>
          
          <category> networkArchitecture </category>
          
      </categories>
      
      
        <tags>
            
            <tag> network </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux编译安装制定安装路径（freeswitch为例））</title>
      <link href="/2020/03/10/linux-bian-yi-an-zhuang-zhi-ding-an-zhuang-lu-jing-freeswitch-wei-li/"/>
      <url>/2020/03/10/linux-bian-yi-an-zhuang-zhi-ding-an-zhuang-lu-jing-freeswitch-wei-li/</url>
      
        <content type="html"><![CDATA[<h2 id="problem："><a href="#problem：" class="headerlink" title="problem："></a>problem：</h2><p>请问怎么指定freeswitch的安装目录？</p><h2 id="solved："><a href="#solved：" class="headerlink" title="solved："></a>solved：</h2><p>./configure –prefix=”your prefer path….”</p><p>example：./configure –prefix=/opt/fscy，后续安装会安装到/opt/fscy目录下。</p><h2 id="analyse"><a href="#analyse" class="headerlink" title="analyse"></a>analyse</h2><p>说明一下–prefix参数的作用，其主要用在编译安装源代码应用中的./configure环节。</p><p>1、源码安装一般包括几个步骤：配置（configure），编译（make），安装（make install）。</p><p>2、其中configure是一个可执行脚本，在源码目录中执行可以完成自动的配置工作，即./configure。</p><p>3、在实际的安装过程中，我们可以增加–prefix参数，这样可以将要安装的应用安装到指定的目录中，如，我们要安装git应用，在配置环节可以使用如下命令：</p><p>./configure –prefix=/usr/local/git<br>之后再执行make &amp; make install命令就可以将git安装到了/usr/local/git目录中，这样做的好处就是方便以后的维护。</p>]]></content>
      
      
      <categories>
          
          <category> backend </category>
          
      </categories>
      
      
        <tags>
            
            <tag> backend </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo一篇文章归属多个categories设置</title>
      <link href="/2020/03/09/hexo-yi-pian-wen-zhang-gui-shu-duo-ge-categories-she-zhi/"/>
      <url>/2020/03/09/hexo-yi-pian-wen-zhang-gui-shu-duo-ge-categories-she-zhi/</url>
      
        <content type="html"><![CDATA[<p>在categories下归属子目录前后加[]，不加的话默认media的路径为/signalinng/media</p><p><img src="/images/pasted-79.png" alt="示意"></p>]]></content>
      
      
      <categories>
          
          <category> frontend </category>
          
      </categories>
      
      
        <tags>
            
            <tag> frontend </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决freeswitch黄金30S，nat穿透问题</title>
      <link href="/2020/03/09/jie-jue-freeswitch-huang-jin-30s-nat-chuan-tou-wen-ti/"/>
      <url>/2020/03/09/jie-jue-freeswitch-huang-jin-30s-nat-chuan-tou-wen-ti/</url>
      
        <content type="html"><![CDATA[<h2 id="一、问题背景"><a href="#一、问题背景" class="headerlink" title="一、问题背景"></a>一、问题背景</h2><p>配置：<br>freeswitch服务器内网ip：10网段，公网ip120网段<br>sip终端：手机zoiper、windows linphone</p><p>错误表现：能够呼通，有信令往来，但是通了以后没有话音媒体，等30s后自动挂断</p><h2 id="二、问题分析"><a href="#二、问题分析" class="headerlink" title="二、问题分析"></a>二、问题分析</h2><p>1、用wireshark对抓包进行分析，显示信令是完整的，排除信令沟通过程问题<br>2、在fs_cli执行sofia status查看网络状态，显示如下：<br>其中10.17.33.223为内网网段，120位公网网段，</p><p><img src="/images/pasted-75.png" alt="信令交互网段"><br><img src="/images/pasted-72.png" alt="查看网络状态"><br>从信令协商过程可以看出，用的IP为内网IP，但是internal 和external配置的都是公网ip，故确定修复思路：讲internal profile的ip改为内网ip10网段。</p><p><img src="/images/pasted-73.png" alt="sip信令交互"></p><h2 id="三、修复问题"><a href="#三、修复问题" class="headerlink" title="三、修复问题"></a>三、修复问题</h2><p>修改vars.xml<br>将external_rtp_ip和external_sip_ip的赋值修改为$${local_ip_v4}<br><img src="/images/pasted-74.png" alt="修改vars.xml"><br>执行fs_cli：reloadxml、reload sofia<br>再次查看sofia status，发现已经成功修改<br><img src="/images/pasted-76.png" alt="upload successful"></p><h2 id="四、验证与问题回顾分析"><a href="#四、验证与问题回顾分析" class="headerlink" title="四、验证与问题回顾分析"></a>四、验证与问题回顾分析</h2><p>1、再次拨打电话，已经可以呼通，问题解决<br>2、问题分析回顾<br>sip信令的invite请求是由客户端发起，而客户端注册的ip地址是10网段内网Ip,请求道服务器后，服务器随即认可该客户端Ip，在信令交互结束后，通过120公网端口发送媒体，这时客户端从未与120公网网段有过信令交互，回送rtp媒体流时，无法穿透120公网的nat，导致问题媒体不通。</p><p><img src="/images/pasted-78.png" alt="客户端注册码号"><br><img src="/images/pasted-77.png" alt="手绘网络示意图"></p>]]></content>
      
      
      <categories>
          
          <category> signaling </category>
          
          <category> networkArchitecture </category>
          
          <category> media </category>
          
      </categories>
      
      
        <tags>
            
            <tag> signaling </tag>
            
            <tag> media </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>批判性思维的形成与实践</title>
      <link href="/2020/03/06/pi-pan-xing-si-wei-de-yang-cheng/"/>
      <url>/2020/03/06/pi-pan-xing-si-wei-de-yang-cheng/</url>
      
        <content type="html"><![CDATA[<h2 id="一、来源"><a href="#一、来源" class="headerlink" title="一、来源"></a>一、来源</h2><p>《批判性思维工具》——当我们要发怒时，先给自己3秒钟时间，思考下发怒的根因到底是什么，是对方的错误还是自己的小气心理，即使是别人的错误，放过别人的过错等于放过自己。</p><h2 id="二、态度"><a href="#二、态度" class="headerlink" title="二、态度"></a>二、态度</h2><p>2019年最大的认知迭代应该是接受了，每个人，做每件事，做的每一个决定，都是偏于利己的，否则社会也不会进步，我讲这句话绝非是批判性的，而是从客观端正的角度出发，某些事物也并不是非黑即白，举个例子，我们周围很多人走进社会以后存在两种反差的心态，一辈子那么短何必努力奋斗呢，安逸一点不好吗；一辈子那么短，不努力奋斗如何遇到更好的自己呢；请看两种心态的前提都是“一辈子那么短”，结论却截然相反，这便是一种利己的自我暗示的结果，只不过所谓的利己是自己认为而已，满足自己短期（安逸）或长期（努力奋斗）目标，不存在对与错。</p><h2 id="三、结论"><a href="#三、结论" class="headerlink" title="三、结论"></a>三、结论</h2><p>在三十而立的年纪，任何一种选择安逸都是为自己的懒惰寻找理由，毕业至今4年整，行动方向偏理论多一些，于某天顿悟，没有实践的理论轻飘飘的浮在表面，目标方向大致正确即可，但是决不可没有目标与方向，现定下实践方针鞭策自己：做好计划、放下怀疑、勇于实践、持续改进。</p><p>希望在2020年底有新的认知，反哺个人规划制定，以上！</p><p><img src="/images/pasted-22.png" alt="强烈推荐的一本好书"></p>]]></content>
      
      
      <categories>
          
          <category> read </category>
          
          <category> essay </category>
          
      </categories>
      
      
        <tags>
            
            <tag> read </tag>
            
            <tag> 成长 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《程序员的自我修养》</title>
      <link href="/2020/03/06/cheng-xu-yuan-de-zi-wo-xiu-yang/"/>
      <url>/2020/03/06/cheng-xu-yuan-de-zi-wo-xiu-yang/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> read </category>
          
          <category> summary </category>
          
      </categories>
      
      
        <tags>
            
            <tag> read </tag>
            
            <tag> programer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>大堡礁-汉密尔顿岛</title>
      <link href="/2020/03/06/da-bao-jiao/"/>
      <url>/2020/03/06/da-bao-jiao/</url>
      
        <content type="html"><![CDATA[<h2 id="一、扬帆起航"><a href="#一、扬帆起航" class="headerlink" title="一、扬帆起航"></a>一、扬帆起航</h2><p>提前一天定了紫色帆船的票，出海前往白天堂沙滩，乘风破浪前行大概2、3个小时到达白天堂沙滩</p><p><img src="/images/pasted-53.png" alt="出海"></p><p><img src="/images/pasted-59.png" alt="帆船"><br>老外在水里玩排球，所有人都穿有全身的防水服，为了防止污染海水，景色绝对是很美的，由于没有经验，这次被晒伤后，至今没有再白回来。<br><img src="/images/pasted-54.png" alt="白天堂沙滩"><br><img src="/images/pasted-60.png" alt="返程"></p><h2 id="二、大堡礁"><a href="#二、大堡礁" class="headerlink" title="二、大堡礁"></a>二、大堡礁</h2><p> 回到酒店皮肤被晒的火辣辣的痛，还掉皮，去汉密尔顿小镇买了芦荟膏，跟老婆两个人互相涂，睡觉不敢翻身，第二天一早早早起床赶船去大堡礁。<br> 开船大概3小时，到地方后有个游玩的大平台，上去做浮潜和深浅，有个简易的潜水艇，可以看水下的珊瑚礁，说实话体验一般，想看心形礁需要坐直升飞机。</p><p><img src="/images/pasted-55.png" alt="背后就是大堡礁"></p><p><img src="/images/pasted-56.png" alt="坐在潜水艇里拍的珊瑚"></p><h2 id="三、汉密尔顿岛"><a href="#三、汉密尔顿岛" class="headerlink" title="三、汉密尔顿岛"></a>三、汉密尔顿岛</h2><p>当天晚上飞到汉密尔顿岛，岛上自然风光很漂亮，酒店很贵，大概一晚要2000RMB左右，着实是肉痛，可以租两人电动车环岛游，跟老婆两个人大概用了4小时环岛一圈，很多地方景色很壮观。</p><p><img src="/images/pasted-58.png" alt="偷拍司机"><br><img src="/images/pasted-57.png" alt="岛上一角"></p><h2 id="心得"><a href="#心得" class="headerlink" title="心得"></a>心得</h2><p>大堡礁值得一去，估计这辈子只会去这一次，毕竟世界那么大。</p>]]></content>
      
      
      <categories>
          
          <category> Traval </category>
          
          <category> Oceania </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Traval </tag>
            
            <tag> Oceania </tag>
            
            <tag> Great Barrier Reef </tag>
            
            <tag> hamilton island </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>慕尼黑</title>
      <link href="/2020/03/06/mu-ni-hei-kao-zhu-zhou/"/>
      <url>/2020/03/06/mu-ni-hei-kao-zhu-zhou/</url>
      
        <content type="html"><![CDATA[<h2 id="一、慕尼黑烤猪肘"><a href="#一、慕尼黑烤猪肘" class="headerlink" title="一、慕尼黑烤猪肘"></a>一、慕尼黑烤猪肘</h2><p>慕尼黑算是德国的高科技城市，在这见了个朋友，就读慕尼黑工业大学，不收学费，但是对慕尼黑印象最深的还是烤猪肘和黑啤酒，德国人喜欢吃猪肉，而且划分两个派别，南烤北煮。<br>一人一个，一定要去最正宗的几家餐厅，还有吹拉弹唱助兴，一人一个烤猪肘配一大杯黑啤，一个下图大的烤猪肘很便宜，大概人民币80多。<br><img src="/images/pasted-47.png" alt="慕尼黑烤猪肘"></p><p><img src="/images/pasted-49.png" alt="HB餐厅内的乐队"></p><h2 id="二、黑啤酒"><a href="#二、黑啤酒" class="headerlink" title="二、黑啤酒"></a>二、黑啤酒</h2><p>我以前很少喝黑啤，喜欢的人一直喜欢，不喜欢的人一次就够，我老婆属于一次就够那种，而且她觉得黑啤上头，我倒是很喜欢，有点类似苦丁茶回甘的那种口感。<br><img src="/images/pasted-48.png" alt="我喝黑啤，老婆喝黄啤！"><br><img src="/images/pasted-50.png" alt="餐厅内推销的甜甜圈"></p><h2 id="三、街边表演"><a href="#三、街边表演" class="headerlink" title="三、街边表演"></a>三、街边表演</h2><p>很投入的街边表演。<br><img src="/images/pasted-51.png" alt="很投入的表演"></p><h2 id="四、心得"><a href="#四、心得" class="headerlink" title="四、心得"></a>四、心得</h2><p>离开慕尼黑后，一直想念烤猪肘，自己没时间尝试，不知道在国内开一家这样的店会不会很火，等退休了可以尝试一下。<br><img src="/images/pasted-52.png" alt="博龙"></p>]]></content>
      
      
      <categories>
          
          <category> Traval </category>
          
          <category> Europe </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Traval </tag>
            
            <tag> Europe </tag>
            
            <tag> Munich </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>凡尔赛宫</title>
      <link href="/2020/03/06/fan-er-sai-gong/"/>
      <url>/2020/03/06/fan-er-sai-gong/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>凡尔赛宫（法語：Château de Versailles）位于法国巴黎西南郊外伊夫林省省会凡尔赛镇。1682年至1789年是法国的王宫及政治中心；在20世纪以后对公众开放，成为世界知名景点和人类文化遗产。</p><p>凡尔赛宫的建筑风格在17～18世纪的欧洲引起风潮，引起俄国、奥地利等国君主的羡慕仿效。彼得一世在圣彼得堡郊外修建的彼得大帝夏宫、玛丽亚·特蕾西亚在维也纳修建的美泉宫、腓特烈二世和腓特烈·威廉二世在波茨坦修建的无忧宫、以及巴伐利亚国王路德维希二世修建的海伦基姆湖宫都仿照了凡尔赛宫的宫殿和花园。</p><p><img src="/images/pasted-69.png" alt="卖油画都"></p><h2 id="一、正门"><a href="#一、正门" class="headerlink" title="一、正门"></a>一、正门</h2><p>从巴黎坐地铁就可以到凡尔赛宫，出了地铁走路大概15分钟</p><p><img src="/images/pasted-61.png" alt="正门"></p><h2 id="二、宫内"><a href="#二、宫内" class="headerlink" title="二、宫内"></a>二、宫内</h2><p>大部分景观都是油画，除了地面，其他三面墙壁都是壁画，看的不是很懂，大概讲述王室的故事和权威。<br><img src="/images/pasted-62.png" alt="壁画1"></p><p><img src="/images/pasted-63.png" alt="壁画2"></p><p><img src="/images/pasted-64.png" alt="顶棚"></p><p><img src="/images/pasted-65.png" alt="雕塑"></p><h2 id="三、后花园"><a href="#三、后花园" class="headerlink" title="三、后花园"></a>三、后花园</h2><p>修葺的很好，从宫殿出来是中心花园，左侧有个落差，可以俯瞰整个花园，正后方是左右对称的大花园，一眼望过去很整齐、壮观。</p><p><img src="/images/pasted-66.png" alt="正后花园"></p><p><img src="/images/pasted-67.png" alt="左侧后花园"></p><p><img src="/images/pasted-68.png" alt="中心后花园"></p><h2 id="心得"><a href="#心得" class="headerlink" title="心得"></a>心得</h2><p>论苍茫大地，谁主沉浮？<br>数风流人物，还看今朝。</p>]]></content>
      
      
      <categories>
          
          <category> Traval </category>
          
          <category> Europe </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Traval </tag>
            
            <tag> Europe </tag>
            
            <tag> Palais de Versailles </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>莫奈花园</title>
      <link href="/2020/03/06/mo-nai-hua-yuan/"/>
      <url>/2020/03/06/mo-nai-hua-yuan/</url>
      
        <content type="html"><![CDATA[<h2 id="一、关于莫奈"><a href="#一、关于莫奈" class="headerlink" title="一、关于莫奈"></a>一、关于莫奈</h2><p>克劳德·莫奈（Claude Monet，1840年11月14日－1926年12月5日），法国画家，被誉为“印象派领导者”，是印象派代表人物和创始人之一。<br>莫奈是法国最重要的画家之一，印象派的理论和实践大部分都有他的推广。莫奈擅长光与影的实验与表现技法。他最重要的风格是改变了阴影和轮廓线的画法，在莫奈的画作中看不到非常明确的阴影，也看不到突显或平涂式的轮廓线。光和影的色彩描绘是莫奈绘画的最大特色。<br>2019年5月14日，法国印象派画家克劳德·莫奈的作品《干草堆》在纽约苏富比拍卖行以破纪录的1.107亿美元（1美元约合人民币6.87元）高价拍出。这是莫奈作品拍卖价格的最高纪录，也是印象派画作拍卖最高纪录。</p><h2 id="二、莫奈花园"><a href="#二、莫奈花园" class="headerlink" title="二、莫奈花园"></a>二、莫奈花园</h2><p>到了巴黎才知道有莫奈这么个画家，莫奈在这里完成了他的著名作品《睡莲》系列和《日本桥》系列。</p><p><img src="/images/pasted-189.png" alt="莫奈的住房"></p><p><img src="/images/pasted-190.png" alt="住房正面"></p><p><img src="/images/pasted-191.png" alt="室内的油画"></p><p><img src="/images/pasted-192.png" alt="陈列"></p><p><img src="/images/pasted-193.png" alt="陈列2"></p><p><img src="/images/pasted-194.png" alt="住房正面的花棚"></p><p><img src="/images/pasted-195.png" alt="果树"></p><p><img src="/images/pasted-196.png" alt="莫奈花园内的水榭"></p><p><img src="/images/pasted-197.png" alt="庭院"></p><p><img src="/images/pasted-198.png" alt="花园一角"></p>]]></content>
      
      
      <categories>
          
          <category> Traval </category>
          
          <category> Europe </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Traval </tag>
            
            <tag> Europe </tag>
            
            <tag> Jardin Monet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>苏黎世</title>
      <link href="/2020/03/06/su-li-shi/"/>
      <url>/2020/03/06/su-li-shi/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/pasted-177.png" alt=""></p><p><img src="/images/pasted-180.png" alt=""></p><p><img src="/images/pasted-179.png" alt=""></p><p><img src="/images/pasted-178.png" alt=""></p><p><img src="/images/pasted-181.png" alt=""></p><p><img src="/images/pasted-182.png" alt=""></p><p><img src="/images/pasted-183.png" alt=""></p><p><img src="/images/pasted-184.png" alt=""></p><p><img src="/images/pasted-185.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> Traval </category>
          
          <category> Europe </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Traval </tag>
            
            <tag> Europe </tag>
            
            <tag> Zurich </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>威尼斯水城</title>
      <link href="/2020/03/06/wei-ni-si-shui-cheng/"/>
      <url>/2020/03/06/wei-ni-si-shui-cheng/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/pasted-296.png" alt="upload successful"><br><img src="/images/pasted-297.png" alt="upload successful"><br><img src="/images/pasted-298.png" alt="upload successful"><br><img src="/images/pasted-299.png" alt="upload successful"><br><img src="/images/pasted-300.png" alt="upload successful"><br><img src="/images/pasted-301.png" alt="upload successful"><br><img src="/images/pasted-302.png" alt="upload successful"><br><img src="/images/pasted-303.png" alt="upload successful"></p>]]></content>
      
      
      <categories>
          
          <category> Traval </category>
          
          <category> Europe </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Traval </tag>
            
            <tag> Europe </tag>
            
            <tag> Venice water city </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>五渔村</title>
      <link href="/2020/03/06/wu-yu-cun/"/>
      <url>/2020/03/06/wu-yu-cun/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/pasted-287.png" alt="upload successful"><br><img src="/images/pasted-288.png" alt="upload successful"><br><img src="/images/pasted-289.png" alt="upload successful"><br><img src="/images/pasted-290.png" alt="upload successful"><br><img src="/images/pasted-291.png" alt="upload successful"><br><img src="/images/pasted-292.png" alt="upload successful"><br><img src="/images/pasted-293.png" alt="upload successful"><br><img src="/images/pasted-294.png" alt="upload successful"><br><img src="/images/pasted-295.png" alt="upload successful"></p>]]></content>
      
      
      <categories>
          
          <category> Traval </category>
          
          <category> Europe </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Traval </tag>
            
            <tag> Cinque Terre </tag>
            
            <tag> Europe </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>米克诺斯</title>
      <link href="/2020/03/06/mi-ke-nuo-si/"/>
      <url>/2020/03/06/mi-ke-nuo-si/</url>
      
        <content type="html"><![CDATA[<h2 id="一、米克诺斯"><a href="#一、米克诺斯" class="headerlink" title="一、米克诺斯"></a>一、米克诺斯</h2><p>米克诺斯岛位于广阔的爱琴海海域，五光十色的岛屿风光美不胜收，犹如爱琴海上一颗璀璨明亮的珍珠。岛上最具特色的是其独特风格的建筑房屋，洁白如羽毛的白墙和五彩鲜艳的门窗、阳台，形成十分鲜明的对比，独具一番风味。穿梭在幽静的小巷中，更有鲜艳的花朵点缀其中，十分富有诗意。岛上还有几座洁白神圣的教堂、博物馆，你可以前往参观，感受希腊浓郁的宗教气息和民俗文化；<br>米克诺斯岛上的小镇自然叫做米克诺斯镇，小巷里弄到处都是各式各样的小玩艺，游客如果带足银两，血拼一场收获绝不会少。由于米克诺斯岛并不大，建议租车环岛，这样省时更省力。除了游玩，米克诺斯岛还有更happy的节目，它真正驰名的时”天体海滩”和”夜生活”。蜚声世界的”天堂海滩”，就在米克诺斯岛上哦。不论是同性恋还是异性恋，这都是个彻底解放自己的好机会，身材好不好？没有关系，把握机会体验天体营的快感，才是米克诺斯的最大收获。<br>米克诺斯(又译作密克诺斯)是希腊爱琴海上的一个小岛，因旅游业而闻名，是基克拉泽斯群岛之一。米科诺斯岛面积86平方公里，常住居民约6,200 (2002年)。全岛主要由花岗岩构成，最高点海拔364米。岛上的淡水供应主要来自海水淡化。</p><h2 id="二、景色"><a href="#二、景色" class="headerlink" title="二、景色"></a>二、景色</h2><p><img src="/images/pasted-217.png" alt="upload successful"></p><p><img src="/images/pasted-218.png" alt="upload successful"></p><p><img src="/images/pasted-219.png" alt="upload successful"></p><p><img src="/images/pasted-220.png" alt="upload successful"></p><p><img src="/images/pasted-221.png" alt="upload successful"></p><p><img src="/images/pasted-222.png" alt="upload successful"></p>]]></content>
      
      
      <categories>
          
          <category> Traval </category>
          
          <category> Europe </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Traval </tag>
            
            <tag> Europe </tag>
            
            <tag> mykonos </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>飞翔的荷兰人</title>
      <link href="/2020/03/06/a-mu-si-te-dan/"/>
      <url>/2020/03/06/a-mu-si-te-dan/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/pasted-330.png" alt=""><br><img src="/images/pasted-331.png" alt=""><br><img src="/images/pasted-332.png" alt=""><br><img src="/images/pasted-333.png" alt=""><br><img src="/images/pasted-336.png" alt=""><br><img src="/images/pasted-337.png" alt=""><br><img src="/images/pasted-338.png" alt=""><br><img src="/images/pasted-339.png" alt=""><br><img src="/images/pasted-340.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> Traval </category>
          
          <category> Europe </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Traval </tag>
            
            <tag> Europe </tag>
            
            <tag> Netherlands </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>圣托里尼</title>
      <link href="/2020/03/06/sheng-tuo-li-ni/"/>
      <url>/2020/03/06/sheng-tuo-li-ni/</url>
      
        <content type="html"><![CDATA[<h2 id="一、圣托里尼"><a href="#一、圣托里尼" class="headerlink" title="一、圣托里尼"></a>一、圣托里尼</h2><p>圣托里尼（希腊文：Σαντορίνη）是在希腊大陆东南200公里的爱琴海上由一群火山组成的岛环，位于北纬 36.40° —东经 25.40°。圣托里尼岛环上最大的一个岛也叫圣托里尼岛，别名锡拉岛（Θήρα）。圣托里尼岛位于基克拉泽斯群岛的最南端，面积约73平方公里，人口约一万四千余人，多为希腊人。“圣托里尼”是十三世纪时威尼斯人所命名的，起源于圣·爱莲（義大利語：Santa Irene）；在此前这个岛称为锡拉岛、卡利斯提（Καλλίστη，在古希臘語意為“最美”）或斯特隆基里（Στρογγύλη）。岛上建筑蓝白相间，衬以蔚蓝大海，美不胜收，是著名旅游胜地。</p><p>3600多年前这里发生一次几千年来最猛烈的火山爆發，留下一个大火山口和几百米厚的火山灰，可能间接地促成克里特島的米诺斯文明的消亡。</p><h2 id="二、最好喝的啤酒——驴牌"><a href="#二、最好喝的啤酒——驴牌" class="headerlink" title="二、最好喝的啤酒——驴牌"></a>二、最好喝的啤酒——驴牌</h2><p><img src="/images/pasted-209.png" alt="黄驴啤酒"></p><h2 id="三、蓝顶教堂与海景"><a href="#三、蓝顶教堂与海景" class="headerlink" title="三、蓝顶教堂与海景"></a>三、蓝顶教堂与海景</h2><p><img src="/images/pasted-210.png" alt="岸边的蓝顶教堂"></p><p><img src="/images/pasted-211.png" alt=""></p><p><img src="/images/pasted-212.png" alt="白房子与海岸线"></p><p><img src="/images/pasted-213.png" alt="沙滩，好多裸晒的"></p><p><img src="/images/pasted-214.png" alt=""></p><p><img src="/images/pasted-215.png" alt=""></p><p><img src="/images/pasted-216.png" alt=""></p><h2 id="四、结语"><a href="#四、结语" class="headerlink" title="四、结语"></a>四、结语</h2><p>世界上美景太多了，圣托里尼是地中海上最惬意的一个小岛，驴牌啤酒是我喝过最好喝的啤酒，只有当地特供。</p>]]></content>
      
      
      <categories>
          
          <category> Traval </category>
          
          <category> Europe </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Traval </tag>
            
            <tag> Europe </tag>
            
            <tag> Santorini </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>雅典卫城</title>
      <link href="/2020/03/06/ya-dian-wei-cheng/"/>
      <url>/2020/03/06/ya-dian-wei-cheng/</url>
      
        <content type="html"><![CDATA[<h2 id="一、Acropolis"><a href="#一、Acropolis" class="headerlink" title="一、Acropolis"></a>一、Acropolis</h2><p>雅典卫城（Acropolis），是希腊最杰出的古建筑群，是综合性的公共建筑，为宗教政治的中心地。雅典卫城面积约有3公顷（3万平方米，其东西长约280米，南北最宽约130米，），位于雅典市中心的卫城山丘上，始建于公元前580年。卫城中最早的建筑是雅典娜神庙和其他宗教建筑。雅典卫城，也称为雅典的阿克罗波利斯，希腊语为“阿克罗波利斯”，原意为“高处的城市”或“高丘上的城邦”。</p><h2 id="二、来历"><a href="#二、来历" class="headerlink" title="二、来历"></a>二、来历</h2><p>雅典的城名来自智慧女神雅典娜的名字。在古希腊神话中，人<br>雅典卫城图片<br>雅典卫城图片(29张)<br> 们在爱琴海边建立了一座新城，雅典娜希望成为这座城的保护神，海神波塞冬也想获得新城的归属权，他们互不相让，于是争夺起来。<br>后来，神王宙斯裁定，谁能给人类一件最有用的东西，该城就归属谁。波塞冬用三叉戟敲了敲岩石，从里面跑出了一匹象征战争的战马。而雅典娜用长矛一击岩石，石头上立即迅速地生长出一株枝叶繁茂、果实累累的橄榄树。橄榄树象征着和平和丰收，人们欢呼起来。于是，雅典娜成为了新城的保护神。人们用她的名字将城命名为雅典。并将橄榄树栽满雅典各处。 </p><h2 id="三、主要建筑点"><a href="#三、主要建筑点" class="headerlink" title="三、主要建筑点"></a>三、主要建筑点</h2><p><img src="/images/pasted-200.png" alt="俯瞰"></p><p><img src="/images/pasted-201.png" alt="阿迪库斯剧场"></p><p><img src="/images/pasted-202.png" alt="庙门"></p><p><img src="/images/pasted-203.png" alt="帕特农神庙"></p><p><img src="/images/pasted-204.png" alt="庙门内部看"></p><p><img src="/images/pasted-205.png" alt="女生浮廊"></p><p><img src="/images/pasted-207.png" alt="酒神剧场"></p><p><img src="/images/pasted-208.png" alt="神庙俯瞰"></p><p><img src="/images/pasted-223.png" alt="跑步被抓的地方"></p>]]></content>
      
      
      <categories>
          
          <category> Traval </category>
          
          <category> Europe </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Traval </tag>
            
            <tag> Europe </tag>
            
            <tag> Athens </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>阿尔卑斯山少女峰与因特拉肯</title>
      <link href="/2020/03/06/rui-shi/"/>
      <url>/2020/03/06/rui-shi/</url>
      
        <content type="html"><![CDATA[<h2 id="一、少女峰"><a href="#一、少女峰" class="headerlink" title="一、少女峰"></a>一、少女峰</h2><p>少女峰（Jungfrau）是位于瑞士伯尔尼高地，阿尔卑斯山区的著名山峰，海拔4,158米（13,642英尺）。俯瞰劳特布伦嫩(Lauterbrunnen)谷地，位于因特拉肯(Interlaken)旅游地东南18公里处。这座风景秀丽的山峰把伯恩州和瓦莱(Valais)州隔开，是伯恩阿尔卑斯山的一部分。</p><h2 id="二、旅拍"><a href="#二、旅拍" class="headerlink" title="二、旅拍"></a>二、旅拍</h2><p><img src="/images/pasted-250.png" alt=""></p><p><img src="/images/pasted-251.png" alt=""></p><p><img src="/images/pasted-252.png" alt=""><br><img src="/images/pasted-253.png" alt=""><br><img src="/images/pasted-254.png" alt=""><br><img src="/images/pasted-255.png" alt=""><br><img src="/images/pasted-256.png" alt=""><br><img src="/images/pasted-257.png" alt=""><br><img src="/images/pasted-258.png" alt="upload successful"></p>]]></content>
      
      
      <categories>
          
          <category> Traval </category>
          
          <category> Europe </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Traval </tag>
            
            <tag> Europe </tag>
            
            <tag> Switzerland </tag>
            
            <tag> Alps </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>新天鹅堡</title>
      <link href="/2020/03/06/de-guo/"/>
      <url>/2020/03/06/de-guo/</url>
      
        <content type="html"><![CDATA[<h2 id="一、新天鹅堡"><a href="#一、新天鹅堡" class="headerlink" title="一、新天鹅堡"></a>一、新天鹅堡</h2><p>新天鹅堡（英语：New Swan Stone Castle、德语：Schloss Neuschwanstein）全名新天鹅石城堡，是19世纪晚期的建筑，位于德国巴伐利亚西南方，邻近年代较早的高天鹅堡（Schloss Hohenschwangau，又称旧天鹅堡），距离菲森（Fussen）镇约4公里，离德国与奥地利边界不远。</p><h2 id="二、旅拍"><a href="#二、旅拍" class="headerlink" title="二、旅拍"></a>二、旅拍</h2><p><img src="/images/pasted-241.png" alt=""></p><p><img src="/images/pasted-242.png" alt=""></p><p><img src="/images/pasted-243.png" alt=""></p><p><img src="/images/pasted-244.png" alt=""></p><p><img src="/images/pasted-245.png" alt=""></p><p><img src="/images/pasted-247.png" alt=""></p><p><img src="/images/pasted-248.png" alt=""></p><p><img src="/images/pasted-249.png" alt=""></p><p>德国是一个努力追赶的国家，德国人民现在很爱和平。</p>]]></content>
      
      
      <categories>
          
          <category> Traval </category>
          
          <category> Europe </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Traval </tag>
            
            <tag> Europe </tag>
            
            <tag> Neuschwanstein Castle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>罗马假日</title>
      <link href="/2020/03/06/yi-da-li/"/>
      <url>/2020/03/06/yi-da-li/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/pasted-278.png" alt="upload successful"><br><img src="/images/pasted-279.png" alt="upload successful"><br><img src="/images/pasted-280.png" alt="upload successful"><br><img src="/images/pasted-281.png" alt="upload successful"><br><img src="/images/pasted-282.png" alt="upload successful"><br><img src="/images/pasted-283.png" alt="upload successful"><br><img src="/images/pasted-284.png" alt="upload successful"><br><img src="/images/pasted-285.png" alt="upload successful"><br><img src="/images/pasted-286.png" alt="upload successful"></p>]]></content>
      
      
      <categories>
          
          <category> Traval </category>
          
          <category> Europe </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Traval </tag>
            
            <tag> Europe </tag>
            
            <tag> Italy </tag>
            
            <tag> Rome </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Paris</title>
      <link href="/2020/03/06/fa-guo/"/>
      <url>/2020/03/06/fa-guo/</url>
      
        <content type="html"><![CDATA[<h2 id="一、卢浮宫"><a href="#一、卢浮宫" class="headerlink" title="一、卢浮宫"></a>一、卢浮宫</h2><p><img src="/images/pasted-260.png" alt="upload successful"></p><p><img src="/images/pasted-261.png" alt="upload successful"><br><img src="/images/pasted-262.png" alt="upload successful"><br><img src="/images/pasted-263.png" alt="upload successful"><br><img src="/images/pasted-264.png" alt="upload successful"><br><img src="/images/pasted-265.png" alt="upload successful"><br><img src="/images/pasted-266.png" alt="upload successful"><br><img src="/images/pasted-267.png" alt="upload successful"><br><img src="/images/pasted-268.png" alt="upload successful"><br><img src="/images/pasted-269.png" alt="upload successful"></p><p><img src="/images/pasted-270.png" alt="upload successful"></p><h2 id="二、埃菲尔铁塔"><a href="#二、埃菲尔铁塔" class="headerlink" title="二、埃菲尔铁塔"></a>二、埃菲尔铁塔</h2><p><img src="/images/pasted-271.png" alt="upload successful"><br><img src="/images/pasted-273.png" alt="upload successful"><br><img src="/images/pasted-274.png" alt="upload successful"></p><h2 id="三、凯旋门"><a href="#三、凯旋门" class="headerlink" title="三、凯旋门"></a>三、凯旋门</h2><p><img src="/images/pasted-272.png" alt="upload successful"></p><h2 id="四、协和广场"><a href="#四、协和广场" class="headerlink" title="四、协和广场"></a>四、协和广场</h2><p><img src="/images/pasted-275.png" alt="upload successful"></p><h2 id="五、巴黎圣母院"><a href="#五、巴黎圣母院" class="headerlink" title="五、巴黎圣母院"></a>五、巴黎圣母院</h2><p><img src="/images/pasted-276.png" alt="upload successful"></p><h2 id="塞纳河"><a href="#塞纳河" class="headerlink" title="塞纳河"></a>塞纳河</h2><p><img src="/images/pasted-277.png" alt="upload successful"></p>]]></content>
      
      
      <categories>
          
          <category> Traval </category>
          
          <category> Europe </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Traval </tag>
            
            <tag> Europe </tag>
            
            <tag> Paris </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>巴厘岛</title>
      <link href="/2020/03/06/ba-li-dao/"/>
      <url>/2020/03/06/ba-li-dao/</url>
      
        <content type="html"><![CDATA[<h2 id="一、神鹰广场、padangpadang-beach、蓝点海滩、乌鲁瓦图情人崖、金巴兰海滩"><a href="#一、神鹰广场、padangpadang-beach、蓝点海滩、乌鲁瓦图情人崖、金巴兰海滩" class="headerlink" title="一、神鹰广场、padangpadang beach、蓝点海滩、乌鲁瓦图情人崖、金巴兰海滩"></a>一、神鹰广场、padangpadang beach、蓝点海滩、乌鲁瓦图情人崖、金巴兰海滩</h2><p><img src="/images/pasted-353.png" alt=""><br><img src="/images/pasted-354.png" alt=""><br><img src="/images/pasted-355.png" alt=""><br><img src="/images/pasted-356.png" alt=""><br><img src="/images/pasted-357.png" alt=""><br><img src="/images/pasted-358.png" alt=""><br><img src="/images/pasted-359.png" alt=""><br><img src="/images/pasted-360.png" alt=""><br><img src="/images/pasted-361.png" alt=""></p><h2 id="二、蓝梦岛"><a href="#二、蓝梦岛" class="headerlink" title="二、蓝梦岛"></a>二、蓝梦岛</h2><p><img src="/images/pasted-362.png" alt=""><br><img src="/images/pasted-363.png" alt=""><br><img src="/images/pasted-364.png" alt=""><br><img src="/images/pasted-365.png" alt=""><br><img src="/images/pasted-366.png" alt=""><br><img src="/images/pasted-367.png" alt=""><br><img src="/images/pasted-368.png" alt=""><br><img src="/images/pasted-369.png" alt=""><br><img src="/images/pasted-370.png" alt=""></p><h2 id="三、佩尼达岛"><a href="#三、佩尼达岛" class="headerlink" title="三、佩尼达岛"></a>三、佩尼达岛</h2><p><img src="/images/pasted-371.png" alt=""><br><img src="/images/pasted-372.png" alt=""><br><img src="/images/pasted-373.png" alt=""><br><img src="/images/pasted-374.png" alt=""><br><img src="/images/pasted-375.png" alt=""><br><img src="/images/pasted-376.png" alt=""><br><img src="/images/pasted-377.png" alt=""><br><img src="/images/pasted-378.png" alt=""><br><img src="/images/pasted-379.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> Traval </category>
          
          <category> SoutheastAsia </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Traval </tag>
            
            <tag> Indonesia </tag>
            
            <tag> Southeast_Asia </tag>
            
            <tag> Bali </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>潜水胜地——美娜多，海豚发现之旅</title>
      <link href="/2020/03/06/qian-shui-sheng-di-mei-nuo-duo/"/>
      <url>/2020/03/06/qian-shui-sheng-di-mei-nuo-duo/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/pasted-341.png" alt=""><br><img src="/images/pasted-342.png" alt=""><br><img src="/images/pasted-343.png" alt=""><br><img src="/images/pasted-344.png" alt=""><br><img src="/images/pasted-345.png" alt=""><br><img src="/images/pasted-346.png" alt=""><br><img src="/images/pasted-347.png" alt=""><br><img src="/images/pasted-348.png" alt=""><br><img src="/images/pasted-349.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> Traval </category>
          
          <category> SoutheastAsia </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Traval </tag>
            
            <tag> Indonesia </tag>
            
            <tag> Southeast Asia </tag>
            
            <tag> Manado </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>普吉岛</title>
      <link href="/2020/03/06/pu-ji-dao/"/>
      <url>/2020/03/06/pu-ji-dao/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/pasted-434.png" alt="upload successful"><br><img src="/images/pasted-435.png" alt="upload successful"><br><img src="/images/pasted-436.png" alt="upload successful"><br><img src="/images/pasted-437.png" alt="upload successful"><br><img src="/images/pasted-438.png" alt="upload successful"><br><img src="/images/pasted-439.png" alt="upload successful"><br><img src="/images/pasted-440.png" alt="upload successful"><br><img src="/images/pasted-441.png" alt="upload successful"><br><img src="/images/pasted-442.png" alt="upload successful"><br><img src="/images/pasted-443.png" alt="upload successful"></p>]]></content>
      
      
      <categories>
          
          <category> Traval </category>
          
          <category> SoutheastAsia </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Traval </tag>
            
            <tag> SoutheastAsia </tag>
            
            <tag> pucket island </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>曼谷</title>
      <link href="/2020/03/06/man-gu/"/>
      <url>/2020/03/06/man-gu/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/pasted-444.png" alt="upload successful"><br><img src="/images/pasted-445.png" alt="upload successful"><br><img src="/images/pasted-446.png" alt="upload successful"><br><img src="/images/pasted-447.png" alt="upload successful"><br><img src="/images/pasted-448.png" alt="upload successful"><br><img src="/images/pasted-449.png" alt="upload successful"><br><img src="/images/pasted-450.png" alt="upload successful"><br><img src="/images/pasted-451.png" alt="upload successful"><br><img src="/images/pasted-452.png" alt="upload successful"><br><img src="/images/pasted-453.png" alt="upload successful"></p>]]></content>
      
      
      <categories>
          
          <category> Traval </category>
          
          <category> SoutheastAsia </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Traval </tag>
            
            <tag> SoutheastAsia </tag>
            
            <tag> Bankok </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>越南芽庄</title>
      <link href="/2020/03/06/yue-nan-ya-zhuang/"/>
      <url>/2020/03/06/yue-nan-ya-zhuang/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/pasted-398.png" alt="upload successful"><br><img src="/images/pasted-399.png" alt="upload successful"><br><img src="/images/pasted-400.png" alt="upload successful"><br><img src="/images/pasted-401.png" alt="upload successful"><br><img src="/images/pasted-402.png" alt="upload successful"><br><img src="/images/pasted-403.png" alt="upload successful"><br><img src="/images/pasted-404.png" alt="upload successful"><br><img src="/images/pasted-405.png" alt="upload successful"><br><img src="/images/pasted-406.png" alt="upload successful"><br><img src="/images/pasted-407.png" alt="upload successful"><br><img src="/images/pasted-408.png" alt="upload successful"><br><img src="/images/pasted-409.png" alt="upload successful"><br><img src="/images/pasted-410.png" alt="upload successful"><br><img src="/images/pasted-411.png" alt="upload successful"><br><img src="/images/pasted-412.png" alt="upload successful"><br><img src="/images/pasted-413.png" alt="upload successful"><br><img src="/images/pasted-414.png" alt="upload successful"><br><img src="/images/pasted-415.png" alt="upload successful"><br><img src="/images/pasted-416.png" alt="upload successful"><br><img src="/images/pasted-417.png" alt="upload successful"><br><img src="/images/pasted-418.png" alt="upload successful"><br><img src="/images/pasted-419.png" alt="upload successful"><br><img src="/images/pasted-420.png" alt="upload successful"><br><img src="/images/pasted-421.png" alt="upload successful"></p>]]></content>
      
      
      <categories>
          
          <category> Traval </category>
          
          <category> SoutheastAsia </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Traval </tag>
            
            <tag> SoutheastAsia </tag>
            
            <tag> vitnem </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>马尔代夫</title>
      <link href="/2020/03/06/ma-er-dai-fu/"/>
      <url>/2020/03/06/ma-er-dai-fu/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> Traval </category>
          
          <category> SouthAsia </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Traval </tag>
            
            <tag> SouthAsia </tag>
            
            <tag> Maldives </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>日本—东京-大阪-神户-奈良-宇治</title>
      <link href="/2020/03/06/ri-ben/"/>
      <url>/2020/03/06/ri-ben/</url>
      
        <content type="html"><![CDATA[<h2 id="一、东京——浅草寺、东京塔、富士山"><a href="#一、东京——浅草寺、东京塔、富士山" class="headerlink" title="一、东京——浅草寺、东京塔、富士山"></a>一、东京——浅草寺、东京塔、富士山</h2><p><img src="/images/pasted-117.png" alt=""></p><p><img src="/images/pasted-118.png" alt="浅草寺"></p><p><img src="/images/pasted-119.png" alt="东京塔"></p><p><img src="/images/pasted-120.png" alt="跑步的人很多"></p><p><img src="/images/pasted-126.png" alt="富士山下河口湖"></p><p><img src="/images/pasted-127.png" alt="大雾，无缘富士山"></p><p><img src="/images/pasted-128.png" alt=""></p><p><img src="/images/pasted-129.png" alt=""></p><p><img src="/images/pasted-130.png" alt=""><br><img src="/images/pasted-121.png" alt=""></p><p><img src="/images/pasted-131.png" alt="RIP"></p><h2 id="二、奈良"><a href="#二、奈良" class="headerlink" title="二、奈良"></a>二、奈良</h2><p><img src="/images/pasted-122.png" alt="神鹿"></p><p><img src="/images/pasted-125.png" alt="奈良神鹿"></p><p><img src="/images/pasted-144.png" alt="山顶"></p><p><img src="/images/pasted-145.png" alt=""></p><h2 id="三、宇治"><a href="#三、宇治" class="headerlink" title="三、宇治"></a>三、宇治</h2><p><img src="/images/pasted-123.png" alt=""></p><h2 id="四、秋叶原"><a href="#四、秋叶原" class="headerlink" title="四、秋叶原"></a>四、秋叶原</h2><p><img src="/images/pasted-132.png" alt="地铁口"></p><p><img src="/images/pasted-133.png" alt="某宅男"></p><p><img src="/images/pasted-134.png" alt=""></p><p><img src="/images/pasted-135.png" alt="手办"></p><p><img src="/images/pasted-136.png" alt=""></p><h2 id="五、神户"><a href="#五、神户" class="headerlink" title="五、神户"></a>五、神户</h2><p><img src="/images/pasted-137.png" alt="庙"></p><p><img src="/images/pasted-138.png" alt=""></p><p><img src="/images/pasted-139.png" alt=""></p><h2 id="六、北野异人馆"><a href="#六、北野异人馆" class="headerlink" title="六、北野异人馆"></a>六、北野异人馆</h2><p><img src="/images/pasted-140.png" alt=""></p><p><img src="/images/pasted-141.png" alt=""></p><p><img src="/images/pasted-142.png" alt=""></p><p><img src="/images/pasted-143.png" alt=""></p><h2 id="七、大阪环球影城"><a href="#七、大阪环球影城" class="headerlink" title="七、大阪环球影城"></a>七、大阪环球影城</h2><p><img src="/images/pasted-146.png" alt=""></p><p><img src="/images/pasted-147.png" alt=""></p><p><img src="/images/pasted-148.png" alt="哈利波特的神秘之旅"></p><p><img src="/images/pasted-149.png" alt=""></p><p><img src="/images/pasted-150.png" alt=""></p><p><img src="/images/pasted-151.png" alt=""></p><p><img src="/images/pasted-152.png" alt=""></p><p><img src="/images/pasted-153.png" alt=""></p><p><img src="/images/pasted-155.png" alt="心斋桥"></p>]]></content>
      
      
      <categories>
          
          <category> Traval </category>
          
          <category> EastAsia </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Traval </tag>
            
            <tag> EastAsia </tag>
            
            <tag> Japan </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>悉尼</title>
      <link href="/2020/03/06/ao-da-li-ya/"/>
      <url>/2020/03/06/ao-da-li-ya/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> Traval </category>
          
          <category> Oceania </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Traval </tag>
            
            <tag> Oceania </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>七彩云南</title>
      <link href="/2020/03/06/yun-nan/"/>
      <url>/2020/03/06/yun-nan/</url>
      
        <content type="html"><![CDATA[<h2 id="一、到丽江"><a href="#一、到丽江" class="headerlink" title="一、到丽江"></a>一、到丽江</h2><p>毕业后到成都工作，四川隔壁便是云南，第一天到丽江，住在丽江古城</p><p><img src="/images/pasted-38.png" alt="丽江古城"></p><h2 id="二、大理"><a href="#二、大理" class="headerlink" title="二、大理"></a>二、大理</h2><p>大理的东西卖的也是特别离谱，云南的旅游还需要继续整治。<br><img src="/images/pasted-39.png" alt="大理寺内的塔"></p><p><img src="/images/pasted-40.png" alt="大理寺门口"></p><p><img src="/images/pasted-41.png" alt="蝴蝶泉"></p><p><img src="/images/pasted-42.png" alt="大理古城"></p><h2 id="三、玉龙雪山"><a href="#三、玉龙雪山" class="headerlink" title="三、玉龙雪山"></a>三、玉龙雪山</h2><p>玉龙雪山被导游带去了一个假的雪山，真正的雪山是不需要坐索道的，骗我们去花钱买索道门票，只能隔山而望了。<br><img src="/images/pasted-43.png" alt="玉龙雪山山脚"></p><p><img src="/images/pasted-44.png" alt="山脚的五彩池"></p><h2 id="四、洱海"><a href="#四、洱海" class="headerlink" title="四、洱海"></a>四、洱海</h2><p>租在洱海旁边的一家客栈离住宿，早上起来可以到房顶看日出，非常的美丽。<br><img src="/images/pasted-45.png" alt="洱海的日出"></p><p><img src="/images/pasted-46.png" alt="洱海景色"></p><h2 id="五、总结"><a href="#五、总结" class="headerlink" title="五、总结"></a>五、总结</h2><p>云南、四川、贵州一带的自然风光非常美，是那种非常壮观的美！</p>]]></content>
      
      
      <categories>
          
          <category> Traval </category>
          
          <category> Domestic </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Traval </tag>
            
            <tag> Domestic </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>长沙</title>
      <link href="/2020/03/06/chang-sha-zhi-xing/"/>
      <url>/2020/03/06/chang-sha-zhi-xing/</url>
      
        <content type="html"><![CDATA[<h2 id="一、到长沙"><a href="#一、到长沙" class="headerlink" title="一、到长沙"></a>一、到长沙</h2><p>一直想去湖南的橘子洲头、岳麓书院看看，湖南的小吃也是非常出名，机票来回600，周末两天来了个长沙一日半游，周六早上出发，周日下午返程。<br>到长沙后，先到饭店吃了一顿剁椒鱼头和毛氏红烧肉，之前一直对剁椒鱼头无感，这次被圈粉了，非常赞！</p><p><img src="/images/pasted-27.png" alt="剁椒鱼头+毛氏红烧肉"></p><h2 id="二、景点"><a href="#二、景点" class="headerlink" title="二、景点"></a>二、景点</h2><p>岳麓山非常大，山脚不好停车，最好坐地铁去，长沙的交通也是非常的烂，印象中跟西安差不多，岳麓山上主要有岳麓书院、黄兴墓、道观等，如果徒步上下山连观光一起估计得一天时间。</p><h2 id="2-1-岳麓书院"><a href="#2-1-岳麓书院" class="headerlink" title="2.1 岳麓书院"></a>2.1 岳麓书院</h2><p>岳麓书院要收门票，其实现了古代书院向现代大学的转型，现在接收高考报考志愿。<br>很多人穿汉服在里面拍照片。<br><img src="/images/pasted-28.png" alt="岳麓书院"></p><p><img src="/images/pasted-29.png" alt="岳麓书院后院"></p><p><img src="/images/pasted-30.png" alt="岳麓书院内"></p><p><img src="/images/pasted-31.png" alt="岳麓书院一脚"></p><h2 id="2-2-爱晚亭"><a href="#2-2-爱晚亭" class="headerlink" title="2.2 爱晚亭"></a>2.2 爱晚亭</h2><p>毛泽东经常在这里聚会、读书、探讨革命真理，根据唐代诗人杜牧：停车坐爱枫林晚，霜叶红于二月花诗句改名。</p><p><img src="/images/pasted-33.png" alt="爱晚亭"></p><p><img src="/images/pasted-34.png" alt="爱晚亭远观"></p><p><img src="/images/pasted-32.png" alt="爱晚亭碑文介绍"></p><h2 id="2-3-橘子洲头"><a href="#2-3-橘子洲头" class="headerlink" title="2.3 橘子洲头"></a>2.3 橘子洲头</h2><p>英姿飒爽、挥斥方遒、粪土当年万户侯。<br>毛泽东学生时代经常在这里读书，看中流击水浪遏飞舟的地方。</p><p><img src="/images/pasted-35.png" alt="橘子洲头标志性建筑青年毛泽东"></p><h2 id="2-4-火宫殿"><a href="#2-4-火宫殿" class="headerlink" title="2.4 火宫殿"></a>2.4 火宫殿</h2><p>火宫殿说老实话体验一般，没有小炒黄牛肉和剁椒鱼头的几个门店的菜好吃。<br><img src="/images/pasted-36.png" alt="火宫殿"><br>听说湖南的黑茶很不错<br><img src="/images/pasted-37.png" alt="黑茶"></p><h2 id="三、体会"><a href="#三、体会" class="headerlink" title="三、体会"></a>三、体会</h2><p>总体来说，长沙给我留下最大的印象是好吃，时间有限，只品尝了小炒黄牛肉、剁椒鱼头，每一顿都吃了好几碗米饭，如果下次再去游玩，一定是奔着吃去的。</p>]]></content>
      
      
      <categories>
          
          <category> Traval </category>
          
          <category> Domestic </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Traval </tag>
            
            <tag> Domestic </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>武汉之行</title>
      <link href="/2020/03/06/wu-han-zhi-xing/"/>
      <url>/2020/03/06/wu-han-zhi-xing/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/pasted-422.png" alt="upload successful"><br><img src="/images/pasted-423.png" alt="upload successful"><br><img src="/images/pasted-424.png" alt="upload successful"><br><img src="/images/pasted-425.png" alt="upload successful"><br><img src="/images/pasted-426.png" alt="upload successful"><br><img src="/images/pasted-427.png" alt="upload successful"><br><img src="/images/pasted-428.png" alt="upload successful"><br><img src="/images/pasted-429.png" alt="upload successful"><br><img src="/images/pasted-430.png" alt="upload successful"><br><img src="/images/pasted-431.png" alt="upload successful"><br><img src="/images/pasted-432.png" alt="upload successful"><br><img src="/images/pasted-433.png" alt="upload successful"></p>]]></content>
      
      
      <categories>
          
          <category> Traval </category>
          
          <category> Domestic </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Traval </tag>
            
            <tag> Domestic </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>古都西安</title>
      <link href="/2020/03/06/xi-an-zhi-xing/"/>
      <url>/2020/03/06/xi-an-zhi-xing/</url>
      
        <content type="html"><![CDATA[<p>在华为工作期间，一次机会到西安研究所出差一个月，顺便游了一下西安城</p><h2 id="一、大雁塔"><a href="#一、大雁塔" class="headerlink" title="一、大雁塔"></a>一、大雁塔</h2><p>第一次到大雁塔是读研时候，来西安出差，找峰兄简单一游，故地重游已时隔两年</p><p><img src="/images/pasted-86.png" alt="大雁塔"></p><h2 id="二、华清池"><a href="#二、华清池" class="headerlink" title="二、华清池"></a>二、华清池</h2><p><img src="/images/pasted-87.png" alt="77事变现场"></p><p><img src="/images/pasted-88.png" alt="杨贵妃？"></p><h2 id="三、兵马俑"><a href="#三、兵马俑" class="headerlink" title="三、兵马俑"></a>三、兵马俑</h2><p><img src="/images/pasted-89.png" alt="图中所示均为路人"></p><p><img src="/images/pasted-90.png" alt="甲级残废兵马俑"></p><p><img src="/images/pasted-91.png" alt="小矮马车"></p><p><img src="/images/pasted-92.png" alt="人多还是兵马俑多"></p><p><img src="/images/pasted-93.png" alt="one more"></p><p><img src="/images/pasted-94.png" alt="导游都很幽默"></p>]]></content>
      
      
      <categories>
          
          <category> Traval </category>
          
          <category> Domestic </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Traval </tag>
            
            <tag> Domestic </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>九寨沟</title>
      <link href="/2020/03/06/jiu-zhai-gou/"/>
      <url>/2020/03/06/jiu-zhai-gou/</url>
      
        <content type="html"><![CDATA[<p>在成都工作的第一年，肯定是要去四川最出名的九寨沟玩一下，由于九寨沟路线路线比较明确，报了一个团，坐了一天车到达终点，途径景点黄龙溪、汶川地震遗址。</p><h2 id="一、黄龙溪"><a href="#一、黄龙溪" class="headerlink" title="一、黄龙溪"></a>一、黄龙溪</h2><p><img src="/images/pasted-96.png" alt="黄龙溪"></p><h2 id="二、九寨沟"><a href="#二、九寨沟" class="headerlink" title="二、九寨沟"></a>二、九寨沟</h2><p>到达的当天晚上住宿在号称当地的5星级酒店，晚上在藏家体验了一下牦牛肉火锅，还有吹拉弹唱，第二天一早进九寨沟<br>九寨沟景色众多，而且相隔很远，景点之间需要上下电瓶车，及时这样一天也是勉强游完。<br><img src="/images/pasted-97.png" alt="九寨沟景色1"></p><p><img src="/images/pasted-98.png" alt=""><br>清澈见底，水底是各种老化掉落的灌木，非常惬意、宁静。<br><img src="/images/pasted-99.png" alt="清澈见底"></p><p><img src="/images/pasted-100.png" alt="西游记师徒三兄弟牵马走过的瀑布"></p><p><img src="/images/pasted-101.png" alt="七彩池还是五彩池"></p><p><img src="/images/pasted-102.png" alt="XX海"></p><p><img src="/images/pasted-103.png" alt=""></p><p><img src="/images/pasted-104.png" alt="壮观的藏区景色"></p><h2 id="心得"><a href="#心得" class="headerlink" title="心得"></a>心得</h2><p>后面地震毁了很多景色，所以说走就走的旅行很有必要，没必要什么都等明天，工作生活也是一个道理。<br>九寨归来不看水，真真是美极了。</p>]]></content>
      
      
      <categories>
          
          <category> Traval </category>
          
          <category> Domestic </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Traval </tag>
            
            <tag> Domestic </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>西岭雪山</title>
      <link href="/2020/03/06/xi-ling-xue-shan/"/>
      <url>/2020/03/06/xi-ling-xue-shan/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> Traval </category>
          
          <category> Domestic </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Traval </tag>
            
            <tag> Domestic </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>哑铃</title>
      <link href="/2020/03/05/ya-ling/"/>
      <url>/2020/03/05/ya-ling/</url>
      
        <content type="html"><![CDATA[<h3 id="当只有跑道和我时，真我便呼之欲出"><a href="#当只有跑道和我时，真我便呼之欲出" class="headerlink" title="当只有跑道和我时，真我便呼之欲出"></a>当只有跑道和我时，真我便呼之欲出</h3><h3 id="跑步是一种将自己从喧嚣的闹市剥离出来的方法"><a href="#跑步是一种将自己从喧嚣的闹市剥离出来的方法" class="headerlink" title="跑步是一种将自己从喧嚣的闹市剥离出来的方法"></a>跑步是一种将自己从喧嚣的闹市剥离出来的方法</h3><h3 id="留下时光，让时间变慢"><a href="#留下时光，让时间变慢" class="headerlink" title="留下时光，让时间变慢"></a>留下时光，让时间变慢</h3><h3 id="耐力、自律"><a href="#耐力、自律" class="headerlink" title="耐力、自律"></a>耐力、自律</h3><h3 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h3><p><img src="/images/pasted-21.png" alt="keep moving"></p>]]></content>
      
      
      <categories>
          
          <category> 运动 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>D:/software/Git/domestic/test</title>
      <link href="/2020/03/05/d-software-git-domestic-test/"/>
      <url>/2020/03/05/d-software-git-domestic-test/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Freeswith压力测试sip和媒体rtp</title>
      <link href="/2020/03/05/freeswith-ya-li-ce-shi-sip-he-mei-ti-rtp/"/>
      <url>/2020/03/05/freeswith-ya-li-ce-shi-sip-he-mei-ti-rtp/</url>
      
        <content type="html"><![CDATA[<h2 id="pre-准备环境："><a href="#pre-准备环境：" class="headerlink" title="pre:准备环境："></a>pre:准备环境：</h2><p>10.17.33.223容器化部署freeswitch<br>笔记本电脑与手机用于录制RTP媒体包<br>10.17.33.221/222基于SIPP部署呼叫压测终端</p><h2 id="一、录制RTP流媒体文件"><a href="#一、录制RTP流媒体文件" class="headerlink" title="一、录制RTP流媒体文件"></a>一、录制RTP流媒体文件</h2><h3 id="1、手机和电脑终端注册sip流程到服务器，较简单，为减少篇幅先跳过"><a href="#1、手机和电脑终端注册sip流程到服务器，较简单，为减少篇幅先跳过" class="headerlink" title="1、手机和电脑终端注册sip流程到服务器，较简单，为减少篇幅先跳过"></a>1、手机和电脑终端注册sip流程到服务器，较简单，为减少篇幅先跳过</h3><p><img src="/images/pasted-5.png" alt="终端注册"><br><img src="/images/pasted-4.png" alt="终端注册"></p><h3 id="2、启动做好的docker-image镜像，并检查sofia-status状态OK"><a href="#2、启动做好的docker-image镜像，并检查sofia-status状态OK" class="headerlink" title="2、启动做好的docker image镜像，并检查sofia status状态OK"></a>2、启动做好的docker image镜像，并检查sofia status状态OK</h3><p><img src="/images/pasted-7.png" alt="检查网络状态"></p><h3 id="3、设置eyebeam只有ulaw语音编码器"><a href="#3、设置eyebeam只有ulaw语音编码器" class="headerlink" title="3、设置eyebeam只有ulaw语音编码器"></a>3、设置eyebeam只有ulaw语音编码器</h3><p><img src="/images/pasted-8.png" alt="设置格式"></p><h3 id="4、用wireshark抓包150秒"><a href="#4、用wireshark抓包150秒" class="headerlink" title="4、用wireshark抓包150秒"></a>4、用wireshark抓包150秒</h3><p><img src="/images/pasted-9.png" alt="wireshark抓包"></p><h2 id="二、写呼叫脚本"><a href="#二、写呼叫脚本" class="headerlink" title="二、写呼叫脚本"></a>二、写呼叫脚本</h2><h3 id="2-1-Caller-xml"><a href="#2-1-Caller-xml" class="headerlink" title="2.1 Caller.xml"></a>2.1 Caller.xml</h3><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>?xml version<span class="token operator">=</span><span class="token string">"1.0"</span> encoding<span class="token operator">=</span><span class="token string">"us-ascii"</span>?<span class="token operator">></span><span class="token operator">&lt;</span>scenario name<span class="token operator">=</span><span class="token string">"New_call"</span><span class="token operator">></span> <span class="token operator">&lt;</span><span class="token operator">!</span>-- In client mode <span class="token punctuation">(</span>sipp placing calls<span class="token punctuation">)</span>, the Call-ID MUST be         --<span class="token operator">></span> <span class="token operator">&lt;</span><span class="token operator">!</span>-- generated by sipp. To <span class="token keyword">do</span> so, use <span class="token punctuation">[</span>call_id<span class="token punctuation">]</span> keyword.                --<span class="token operator">></span><span class="token operator">&lt;</span>send retrans<span class="token operator">=</span><span class="token string">"500"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token punctuation">[</span>CDATA<span class="token punctuation">[</span> INVITE sip:<span class="token punctuation">[</span>service<span class="token punctuation">]</span>@<span class="token punctuation">[</span>remote_ip<span class="token punctuation">]</span>:<span class="token punctuation">[</span>remote_port<span class="token punctuation">]</span> SIP/2.0 Via: SIP/2.0/<span class="token punctuation">[</span>transport<span class="token punctuation">]</span> <span class="token punctuation">[</span>local_ip<span class="token punctuation">]</span>:<span class="token punctuation">[</span>local_port<span class="token punctuation">]</span><span class="token punctuation">;</span>branch<span class="token operator">=</span><span class="token punctuation">[</span>branch<span class="token punctuation">]</span> From: sipp <span class="token operator">&lt;</span>sip:sipp@<span class="token punctuation">[</span>local_ip<span class="token punctuation">]</span>:<span class="token punctuation">[</span>local_port<span class="token punctuation">]</span><span class="token operator">></span><span class="token punctuation">;</span>tag<span class="token operator">=</span><span class="token punctuation">[</span>call_number<span class="token punctuation">]</span> To: sut <span class="token operator">&lt;</span>sip:<span class="token punctuation">[</span>service<span class="token punctuation">]</span>@<span class="token punctuation">[</span>remote_ip<span class="token punctuation">]</span>:<span class="token punctuation">[</span>remote_port<span class="token punctuation">]</span><span class="token operator">></span> Call-ID: <span class="token punctuation">[</span>call_id<span class="token punctuation">]</span> CSeq: 1 INVITE Contact: sip:sipp@<span class="token punctuation">[</span>local_ip<span class="token punctuation">]</span>:<span class="token punctuation">[</span>local_port<span class="token punctuation">]</span> Max-Forwards: 70 Subject: Performance Test Content-Type: application/sdp Content-Length: <span class="token punctuation">[</span>len<span class="token punctuation">]</span> v<span class="token operator">=</span>0 o<span class="token operator">=</span>user1 53655765 2353687637 IN IP<span class="token punctuation">[</span>local_ip_type<span class="token punctuation">]</span> <span class="token punctuation">[</span>local_ip<span class="token punctuation">]</span> s<span class="token operator">=</span>- c<span class="token operator">=</span>IN IP<span class="token punctuation">[</span>media_ip_type<span class="token punctuation">]</span> <span class="token punctuation">[</span>media_ip<span class="token punctuation">]</span> t<span class="token operator">=</span>0 0 m<span class="token operator">=</span>audio <span class="token punctuation">[</span>media_port<span class="token punctuation">]</span> RTP/AVP 0 a<span class="token operator">=</span>rtpmap:0 PCMU/8000<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">></span><span class="token operator">&lt;</span>/send<span class="token operator">></span><span class="token operator">&lt;</span>recv response<span class="token operator">=</span><span class="token string">"100"</span> optional<span class="token operator">=</span><span class="token string">"true"</span>/<span class="token operator">></span><span class="token operator">&lt;</span>recv response<span class="token operator">=</span><span class="token string">"180"</span> optional<span class="token operator">=</span><span class="token string">"true"</span>/<span class="token operator">></span> <span class="token operator">&lt;</span>recv response<span class="token operator">=</span><span class="token string">"181"</span> optional<span class="token operator">=</span><span class="token string">"true"</span>/<span class="token operator">></span> <span class="token operator">&lt;</span>recv response<span class="token operator">=</span><span class="token string">"182"</span> optional<span class="token operator">=</span><span class="token string">"true"</span>/<span class="token operator">></span> <span class="token operator">&lt;</span>recv response<span class="token operator">=</span><span class="token string">"183"</span> optional<span class="token operator">=</span><span class="token string">"true"</span>/<span class="token operator">></span> <span class="token operator">&lt;</span>recv response<span class="token operator">=</span><span class="token string">"200"</span> crlf<span class="token operator">=</span><span class="token string">"true"</span>/<span class="token operator">></span> <span class="token operator">&lt;</span>send<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token punctuation">[</span>CDATA<span class="token punctuation">[</span> ACK sip:<span class="token punctuation">[</span>service<span class="token punctuation">]</span>@<span class="token punctuation">[</span>remote_ip<span class="token punctuation">]</span>:<span class="token punctuation">[</span>remote_port<span class="token punctuation">]</span> SIP/2.0 Via: SIP/2.0/<span class="token punctuation">[</span>transport<span class="token punctuation">]</span> <span class="token punctuation">[</span>local_ip<span class="token punctuation">]</span>:<span class="token punctuation">[</span>local_port<span class="token punctuation">]</span><span class="token punctuation">;</span>branch<span class="token operator">=</span><span class="token punctuation">[</span>branch<span class="token punctuation">]</span> From: sipp <span class="token operator">&lt;</span>sip:sipp@<span class="token punctuation">[</span>local_ip<span class="token punctuation">]</span>:<span class="token punctuation">[</span>local_port<span class="token punctuation">]</span><span class="token operator">></span><span class="token punctuation">;</span>tag<span class="token operator">=</span><span class="token punctuation">[</span>call_number<span class="token punctuation">]</span> To: sut <span class="token operator">&lt;</span>sip:<span class="token punctuation">[</span>service<span class="token punctuation">]</span>@<span class="token punctuation">[</span>remote_ip<span class="token punctuation">]</span>:<span class="token punctuation">[</span>remote_port<span class="token punctuation">]</span><span class="token operator">></span><span class="token punctuation">[</span>peer_tag_param<span class="token punctuation">]</span> Call-ID: <span class="token punctuation">[</span>call_id<span class="token punctuation">]</span> CSeq: 1 ACK Contact: sip:sipp@<span class="token punctuation">[</span>local_ip<span class="token punctuation">]</span>:<span class="token punctuation">[</span>local_port<span class="token punctuation">]</span> Max-Forwards: 70 Subject: Performance Test Content-Length: 0<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">></span><span class="token operator">&lt;</span>/send<span class="token operator">></span> <span class="token operator">&lt;</span><span class="token operator">!</span>-- This delay can be customized by the -d command-line option       --<span class="token operator">></span> <span class="token operator">&lt;</span><span class="token operator">!</span>-- or by adding a <span class="token string">'milliseconds = "value"'</span> option here.             --<span class="token operator">></span><span class="token operator">&lt;</span>pause milliseconds<span class="token operator">=</span><span class="token string">"1000"</span>/<span class="token operator">></span><span class="token operator">&lt;</span>nop<span class="token operator">></span><span class="token operator">&lt;</span>action<span class="token operator">></span>  <span class="token operator">&lt;</span>exec play_pcap_audio<span class="token operator">=</span><span class="token string">"./1.cap"</span><span class="token operator">></span><span class="token operator">&lt;</span>/action<span class="token operator">></span><span class="token operator">&lt;</span>/nop<span class="token operator">></span><span class="token operator">&lt;</span>pause milliseconds<span class="token operator">=</span><span class="token string">"150000"</span>/<span class="token operator">></span> <span class="token operator">&lt;</span><span class="token operator">!</span>-- The <span class="token string">'crlf'</span> option inserts a blank line <span class="token keyword">in</span> the statistics report. --<span class="token operator">></span><span class="token operator">&lt;</span>send retrans<span class="token operator">=</span><span class="token string">"500"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token punctuation">[</span>CDATA<span class="token punctuation">[</span> BYE sip:<span class="token punctuation">[</span>service<span class="token punctuation">]</span>@<span class="token punctuation">[</span>remote_ip<span class="token punctuation">]</span>:<span class="token punctuation">[</span>remote_port<span class="token punctuation">]</span> SIP/2.0 Via: SIP/2.0/<span class="token punctuation">[</span>transport<span class="token punctuation">]</span> <span class="token punctuation">[</span>local_ip<span class="token punctuation">]</span>:<span class="token punctuation">[</span>local_port<span class="token punctuation">]</span><span class="token punctuation">;</span>branch<span class="token operator">=</span><span class="token punctuation">[</span>branch<span class="token punctuation">]</span> From: sipp <span class="token operator">&lt;</span>sip:sipp@<span class="token punctuation">[</span>local_ip<span class="token punctuation">]</span>:<span class="token punctuation">[</span>local_port<span class="token punctuation">]</span><span class="token operator">></span><span class="token punctuation">;</span>tag<span class="token operator">=</span><span class="token punctuation">[</span>call_number<span class="token punctuation">]</span> To: sut <span class="token operator">&lt;</span>sip:<span class="token punctuation">[</span>service<span class="token punctuation">]</span>@<span class="token punctuation">[</span>remote_ip<span class="token punctuation">]</span>:<span class="token punctuation">[</span>remote_port<span class="token punctuation">]</span><span class="token operator">></span><span class="token punctuation">[</span>peer_tag_param<span class="token punctuation">]</span> Call-ID: <span class="token punctuation">[</span>call_id<span class="token punctuation">]</span> CSeq: 2 BYE Contact: sip:sipp@<span class="token punctuation">[</span>local_ip<span class="token punctuation">]</span>:<span class="token punctuation">[</span>local_port<span class="token punctuation">]</span> Max-Forwards: 70 Subject: Performance Test Content-Length: 0<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">></span><span class="token operator">&lt;</span>/send<span class="token operator">></span><span class="token operator">&lt;</span>recv response<span class="token operator">=</span><span class="token string">"200"</span> crlf<span class="token operator">=</span><span class="token string">"true"</span><span class="token operator">></span> <span class="token operator">&lt;</span>/recv<span class="token operator">></span><span class="token operator">&lt;</span>label id<span class="token operator">=</span><span class="token string">"1"</span><span class="token operator">></span> <span class="token operator">&lt;</span><span class="token operator">!</span>-- definition of the response <span class="token function">time</span> repartition table <span class="token punctuation">(</span>unit is ms<span class="token punctuation">)</span>   --<span class="token operator">></span><span class="token operator">&lt;</span>ResponseTimeRepartition value<span class="token operator">=</span><span class="token string">"10, 20, 30, 40, 50, 100, 150, 200"</span>/<span class="token operator">></span> <span class="token operator">&lt;</span><span class="token operator">!</span>-- definition of the call length repartition table <span class="token punctuation">(</span>unit is ms<span class="token punctuation">)</span>     --<span class="token operator">></span><span class="token operator">&lt;</span>CallLengthRepartition value<span class="token operator">=</span><span class="token string">"10, 50, 100, 500, 1000, 5000, 10000"</span>/<span class="token operator">></span><span class="token operator">&lt;</span>/scenario<span class="token operator">></span></code></pre><h3 id="2-2-Called-xml"><a href="#2-2-Called-xml" class="headerlink" title="2.2 Called.xml"></a>2.2 Called.xml</h3><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>?xml version<span class="token operator">=</span><span class="token string">"1.0"</span> encoding<span class="token operator">=</span><span class="token string">"ISO-8859-1"</span>?<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span>DOCTYPE scenario SYSTEM <span class="token string">"sipp.dtd"</span><span class="token operator">></span><span class="token operator">&lt;</span>scenario name<span class="token operator">=</span><span class="token string">"Basic UAS responder"</span><span class="token operator">></span> <span class="token operator">&lt;</span><span class="token operator">!</span>-- By adding rrs<span class="token operator">=</span><span class="token string">"true"</span> <span class="token punctuation">(</span>Record Route Sets<span class="token punctuation">)</span>, the route sets         --<span class="token operator">></span> <span class="token operator">&lt;</span><span class="token operator">!</span>-- are saved and used <span class="token keyword">for</span> following messages sent. Useful to <span class="token function">test</span>   --<span class="token operator">></span> <span class="token operator">&lt;</span><span class="token operator">!</span>--  against stateful SIP proxies/B2BUAs.                              --<span class="token operator">></span><span class="token operator">&lt;</span>recv request<span class="token operator">=</span><span class="token string">"INVITE"</span> crlf<span class="token operator">=</span><span class="token string">"true"</span><span class="token operator">></span> <span class="token operator">&lt;</span>/recv<span class="token operator">></span> <span class="token operator">&lt;</span><span class="token operator">!</span>-- The <span class="token string">'[last_*]'</span> keyword is replaced automatically by the          --<span class="token operator">></span> <span class="token operator">&lt;</span><span class="token operator">!</span>-- specified header <span class="token keyword">if</span> it was present <span class="token keyword">in</span> the last message received  --<span class="token operator">></span> <span class="token operator">&lt;</span><span class="token operator">!</span>-- <span class="token punctuation">(</span>except <span class="token keyword">if</span> it was a retransmission<span class="token punctuation">)</span>. If the header was not       --<span class="token operator">></span> <span class="token operator">&lt;</span><span class="token operator">!</span>-- present or <span class="token keyword">if</span> no message has been received, the <span class="token string">'[last_*]'</span>       --<span class="token operator">></span> <span class="token operator">&lt;</span><span class="token operator">!</span>-- keyword is discarded, and all bytes <span class="token keyword">until</span> the end of the line    --<span class="token operator">></span> <span class="token operator">&lt;</span><span class="token operator">!</span>--  are also discarded.                                               --<span class="token operator">></span> <span class="token operator">&lt;</span><span class="token operator">!</span>--                                                                    --<span class="token operator">></span> <span class="token operator">&lt;</span><span class="token operator">!</span>-- If the specified header was present several <span class="token function">times</span> <span class="token keyword">in</span> the         --<span class="token operator">></span> <span class="token operator">&lt;</span><span class="token operator">!</span>-- message, all occurences are concatenated <span class="token punctuation">(</span>CRLF seperated<span class="token punctuation">)</span>        --<span class="token operator">></span> <span class="token operator">&lt;</span><span class="token operator">!</span>--  to be used <span class="token keyword">in</span> place of the <span class="token string">'[last_*]'</span> keyword.                    --<span class="token operator">></span><span class="token operator">&lt;</span>send<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token punctuation">[</span>CDATA<span class="token punctuation">[</span> SIP/2.0 180 Ringing <span class="token punctuation">[</span>last_Via:<span class="token punctuation">]</span> <span class="token punctuation">[</span>last_From:<span class="token punctuation">]</span> <span class="token punctuation">[</span>last_To:<span class="token punctuation">]</span><span class="token punctuation">;</span>tag<span class="token operator">=</span><span class="token punctuation">[</span>call_number<span class="token punctuation">]</span> <span class="token punctuation">[</span>last_Call-ID:<span class="token punctuation">]</span> <span class="token punctuation">[</span>last_CSeq:<span class="token punctuation">]</span> Contact: <span class="token operator">&lt;</span>sip:<span class="token punctuation">[</span>local_ip<span class="token punctuation">]</span>:<span class="token punctuation">[</span>local_port<span class="token punctuation">]</span><span class="token punctuation">;</span>transport<span class="token operator">=</span><span class="token punctuation">[</span>transport<span class="token punctuation">]</span><span class="token operator">></span> Content-Length: 0<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">></span><span class="token operator">&lt;</span>/send<span class="token operator">></span><span class="token operator">&lt;</span>send retrans<span class="token operator">=</span><span class="token string">"500"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token punctuation">[</span>CDATA<span class="token punctuation">[</span> SIP/2.0 200 OK <span class="token punctuation">[</span>last_Via:<span class="token punctuation">]</span> <span class="token punctuation">[</span>last_From:<span class="token punctuation">]</span> <span class="token punctuation">[</span>last_To:<span class="token punctuation">]</span><span class="token punctuation">;</span>tag<span class="token operator">=</span><span class="token punctuation">[</span>call_number<span class="token punctuation">]</span> <span class="token punctuation">[</span>last_Call-ID:<span class="token punctuation">]</span> <span class="token punctuation">[</span>last_CSeq:<span class="token punctuation">]</span> Contact: <span class="token operator">&lt;</span>sip:<span class="token punctuation">[</span>local_ip<span class="token punctuation">]</span>:<span class="token punctuation">[</span>local_port<span class="token punctuation">]</span><span class="token punctuation">;</span>transport<span class="token operator">=</span><span class="token punctuation">[</span>transport<span class="token punctuation">]</span><span class="token operator">></span> Content-Type: application/sdp Content-Length: <span class="token punctuation">[</span>len<span class="token punctuation">]</span> v<span class="token operator">=</span>0 o<span class="token operator">=</span>user1 53655765 2353687637 IN IP<span class="token punctuation">[</span>local_ip_type<span class="token punctuation">]</span> <span class="token punctuation">[</span>local_ip<span class="token punctuation">]</span> s<span class="token operator">=</span>- c<span class="token operator">=</span>IN IP<span class="token punctuation">[</span>media_ip_type<span class="token punctuation">]</span> <span class="token punctuation">[</span>media_ip<span class="token punctuation">]</span> t<span class="token operator">=</span>0 0 m<span class="token operator">=</span>audio <span class="token punctuation">[</span>media_port<span class="token punctuation">]</span> RTP/AVP 0 a<span class="token operator">=</span>rtpmap:0 PCMU/8000<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">></span><span class="token operator">&lt;</span>/send<span class="token operator">></span><span class="token operator">&lt;</span>recv request<span class="token operator">=</span><span class="token string">"ACK"</span> rtd<span class="token operator">=</span><span class="token string">"true"</span> crlf<span class="token operator">=</span><span class="token string">"true"</span><span class="token operator">></span>   <span class="token operator">&lt;</span>/recv<span class="token operator">></span>    <span class="token operator">&lt;</span>pause milliseconds<span class="token operator">=</span><span class="token string">"1000"</span>/<span class="token operator">></span>    <span class="token operator">&lt;</span>nop<span class="token operator">></span>    <span class="token operator">&lt;</span>action<span class="token operator">></span>      <span class="token operator">&lt;</span>exec play_pcap_audio<span class="token operator">=</span><span class="token string">"./2.cap"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>/action<span class="token operator">></span>    <span class="token operator">&lt;</span>/nop<span class="token operator">></span><span class="token operator">&lt;</span>recv request<span class="token operator">=</span><span class="token string">"BYE"</span><span class="token operator">></span> <span class="token operator">&lt;</span>/recv<span class="token operator">></span><span class="token operator">&lt;</span>send<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token punctuation">[</span>CDATA<span class="token punctuation">[</span> SIP/2.0 200 OK <span class="token punctuation">[</span>last_Via:<span class="token punctuation">]</span> <span class="token punctuation">[</span>last_From:<span class="token punctuation">]</span> <span class="token punctuation">[</span>last_To:<span class="token punctuation">]</span> <span class="token punctuation">[</span>last_Call-ID:<span class="token punctuation">]</span> <span class="token punctuation">[</span>last_CSeq:<span class="token punctuation">]</span> Contact: <span class="token operator">&lt;</span>sip:<span class="token punctuation">[</span>local_ip<span class="token punctuation">]</span>:<span class="token punctuation">[</span>local_port<span class="token punctuation">]</span><span class="token punctuation">;</span>transport<span class="token operator">=</span><span class="token punctuation">[</span>transport<span class="token punctuation">]</span><span class="token operator">></span> Content-Length: 0<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">></span><span class="token operator">&lt;</span>/send<span class="token operator">></span><span class="token operator">&lt;</span>ResponseTimeRepartition value<span class="token operator">=</span><span class="token string">"10, 20, 30, 40, 50, 100, 150, 200"</span>/<span class="token operator">></span><span class="token operator">&lt;</span>CallLengthRepartition value<span class="token operator">=</span><span class="token string">"10, 50, 100, 500, 1000, 5000, 10000"</span>/<span class="token operator">></span><span class="token operator">&lt;</span>/scenario<span class="token operator">></span></code></pre><h3 id="2-3-Caller-bat"><a href="#2-3-Caller-bat" class="headerlink" title="2.3 Caller.bat"></a>2.3 Caller.bat</h3><pre class=" language-bash"><code class="language-bash">sipp -sn uac 10.17.33.223:5060 -r 4 -rp 1000 -p 15060 -i 10.17.33.221 -s 1005 -sf caller.xml -l 600</code></pre><h3 id="2-4-Called-bat"><a href="#2-4-Called-bat" class="headerlink" title="2.4 Called.bat"></a>2.4 Called.bat</h3><pre class=" language-bash"><code class="language-bash">sipp -sn uac 10.17.33.223:5060 -r 1 -rp 1000 -p 5060 -i 10.17.33.222 -s 1017 -sf caller.xml -l 1200</code></pre><h2 id="三、两台非freeswitch服务器部署sipp"><a href="#三、两台非freeswitch服务器部署sipp" class="headerlink" title="三、两台非freeswitch服务器部署sipp"></a>三、两台非freeswitch服务器部署sipp</h2><p>可参考：<a href="https://segmentfault.com/a/1190000004272862" target="_blank" rel="noopener">https://segmentfault.com/a/1190000004272862</a></p><h2 id="四、启动脚本，开始测试"><a href="#四、启动脚本，开始测试" class="headerlink" title="四、启动脚本，开始测试"></a>四、启动脚本，开始测试</h2><p>发现问题：</p><p><img src="/images/pasted-10.png" alt="问题日志"></p><p>定位发现号码不认可，添加网关：</p><p><img src="/images/pasted-11.png" alt="添加网关配置"></p><p>很多网关不需要注册即可使用，不用管这个</p><p><img src="/images/pasted-12.png" alt=""></p><p><img src="/images/pasted-71.png" alt="测通呼叫流程"><br>机器配置2vC4G，非录音情况下支撑500并发cpu利用率达到60%。</p><p><img src="/images/pasted-70.png" alt="500并发压测"></p>]]></content>
      
      
      <categories>
          
          <category> signaling </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sip </tag>
            
            <tag> 信令 </tag>
            
            <tag> 性能测试 </tag>
            
            <tag> 媒体 </tag>
            
            <tag> rtp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sip信令</title>
      <link href="/2020/03/03/article-title/"/>
      <url>/2020/03/03/article-title/</url>
      
        <content type="html"><![CDATA[<p>打桩测试</p>]]></content>
      
      
      <categories>
          
          <category> media </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2020/03/03/hello-world/"/>
      <url>/2020/03/03/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>最后一片净土—稻城亚丁</title>
      <link href="/2017/10/05/dao-cheng-ya-ding/"/>
      <url>/2017/10/05/dao-cheng-ya-ding/</url>
      
        <content type="html"><![CDATA[<h1 id="时间：2017-10-01-2017-10-07"><a href="#时间：2017-10-01-2017-10-07" class="headerlink" title="时间：2017.10.01~2017.10.07"></a>时间：2017.10.01~2017.10.07</h1><h2 id="一、出发"><a href="#一、出发" class="headerlink" title="一、出发"></a>一、出发</h2><p>从成都包车去稻城，路上有个隧道发生连撞车事故，导致交通堵塞，车空调坏掉没法制冷，开了7个小时后，决定返回成都改飞机到稻城</p><p><img src="/images/pasted-13.png" alt="路边"></p><p><img src="/images/pasted-14.png" alt="蓝蓝的天空"></p><h2 id="二、到达稻城县"><a href="#二、到达稻城县" class="headerlink" title="二、到达稻城县"></a>二、到达稻城县</h2><p>到达稻城的第一天晚上，出去闲逛遇到篝火，几个小孩带节奏蹦来蹦去</p><p><img src="/images/pasted-15.png" alt="篝火晚会"></p><h2 id="三、向亚丁出发"><a href="#三、向亚丁出发" class="headerlink" title="三、向亚丁出发"></a>三、向亚丁出发</h2><p>进山了，景区检票口在离亚丁至少半个多小时车程以外的地方吧<br><img src="/images/pasted-16.png" alt="镜面"></p><p><img src="/images/pasted-17.png" alt="XX牧场，名字忘了"></p><p><img src="/images/pasted-18.png" alt="雪山脚下"></p><p><img src="/images/pasted-19.png" alt=""></p><h2 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h2><p>景色绝对是很美的，只是我的手机比较渣<br><img src="/images/pasted-20.png" alt=""></p><h2 id="五、远方"><a href="#五、远方" class="headerlink" title="五、远方"></a>五、远方</h2><p>牛奶海没有去，有机会下次再来，下次我要骑自行车来，顺路骑车去拉萨。</p>]]></content>
      
      
      <categories>
          
          <category> Traval </category>
          
          <category> Domestic </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Traval </tag>
            
            <tag> Domestic </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
